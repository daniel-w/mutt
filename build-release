#!/bin/sh --

#
# Build a mutt release.
#
# This used to be part of the main Makefile, but is better handled
# by a shell script.
#
# Note that this script won't work for you.  I'm including it with 
# the distribution for the sake of completeness.
#
# Thomas Roessler <roessler@guug.de> Mon,  8 Nov 1999 22:32:41 +0100
#

set -e

# devel="devel/"	# comment out for the stable branch

# test for uncommitted changes
if hg id | grep -q '+'
then
  echo "Uncommitted changes"
  exit 1
fi

# update the source

hg update

# Do automated security checks

./check_sec.sh || exit 1

# bump the version number, and calculate the tags

hg revert VERSION 
OVERSION="`cat VERSION`" 
OTAG="mutt-`echo $OVERSION | tr . -`-rel" 

echo $OVERSION | awk -F . '{printf("%d.%d.%d\n", $1, $2, $3 + 1);}' > VERSION 
${VISUAL} VERSION

VERSION="`cat VERSION`" 
TAG="mutt-`echo $VERSION | tr . -`-rel" 

echo 'const char *ReleaseDate = "'`date +%Y-%m-%d`'";' > reldate.h

#rcs2log | cat - ChangeLog > ChangeLog.$$ && mv ChangeLog.$$ ChangeLog
${VISUAL} ChangeLog

# now, prepare the distribution tar balls

(cd m4 && rm -f Makefile Makefile.in Makefile.am && make -f Makefile.am.in)
automake
touch configure.in
make config.status
./config.status
make update-doc
make

# build them

make dist

# commit and tag the release

hg commit -m "automatic post-release commit for mutt-${VERSION}"
hg tag ${TAG}
hg sign ${TAG}

# build the diff between the two releases

hg diff -r ${OTAG} -r ${TAG} mutt | gzip -9 \
	> diff-${OVERSION}i-${VERSION}.gz

# sign the various files

DISTFILES="mutt-${VERSION}.tar.gz diff-${OVERSION}i-${VERSION}.gz"

for f in $DISTFILES; do
	gpg -ba $f
	chmod 644 $f.asc
done

for f in $DISTFILES ; do
#	scp1 $f $f.asc sigtrap.guug.de:/home/ftp/pub/mutt/${devel}
	scp $f $f.asc cvs.gnupg.org:/home/ftp/pub/mutt/${devel}
done

# Finally, announce the new mutt to the public

#mutt -s "[Announce] mutt-${VERSION} is out" mutt-dev@mutt.org

