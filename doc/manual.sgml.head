<!doctype linuxdoc system>

<article>

<title>The Mutt E-Mail Client
<author>by Michael Elkins <htmlurl url="mailto:me@cs.hmc.edu" name="&lt;me@cs.hmc.edu&gt;">
<date>version @VERSION@
<abstract>
``All mail clients suck.  This one just sucks less.'' -me, circa 1995
</abstract>

<toc>

<sect>Introduction
<p>
<bf/Mutt/ is a small but very powerful text-based MIME mail client.  Mutt is
highly configurable, and is well suited to the mail power user with advanced
features like key bindings, keyboard macros, mail threading, regular
expression searches and a powerful pattern matching language for selecting
groups of messages.

<sect1>Mutt Home Page
<p>
<htmlurl url="http://www.mutt.org/"
name="http://www.mutt.org/">

<sect1>Mailing Lists
<p>
To subscribe to one of the following mailing lists, send a message with the
word <em/subscribe/ in the body to
<tt/list-name/<em/-request/<tt/@mutt.org/.

<itemize>
<item><htmlurl url="mailto:mutt-announce-request@mutt.org"
name="mutt-announce@mutt.org"> -- low traffic list for announcements
<item><htmlurl url="mailto:mutt-users-request@mutt.org"
name="mutt-users@mutt.org"> -- help, bug reports and feature requests
<item><htmlurl url="mailto:mutt-dev-request@mutt.org" name="mutt-dev@mutt.org"> -- development mailing list
</itemize>

<bf/Note:/ all messages posted to <em/mutt-announce/ are automatically
forwarded to <em/mutt-users/, so you do not need to be subscribed to both
lists.

<sect1>Software Distribution Sites
<p>
<itemize>
<item><htmlurl url="ftp://ftp.mutt.org/pub/mutt/"
name="ftp://ftp.mutt.org/pub/mutt/">
<item><htmlurl url="ftp://ftp.guug.de/pub/mutt/" 
name="ftp://ftp.guug.de/pub/mutt/">
</itemize>
<p>
For a list of mirror sites, please refer to <htmlurl
url="http://www.mutt.org/download.html"
name="http://www.mutt.org/download.html">.

<sect1>IRC
<p>
Visit channel <em/#mutt/ on <htmlurl
url="http://www.openprojects.net" name="OpenProjects.Net
(www.openprojects.net)"> to chat with other people interested in Mutt.

<sect1>USENET
<p>
See the newsgroup <htmlurl url="news:comp.mail.mutt" name="comp.mail.mutt">.

<sect1>Copyright
<p>
Mutt is Copyright (C) 1996-2000 Michael R. Elkins
&lt;me@cs.hmc.edu&gt; and others

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA.

<sect>Getting Started
<p>

This section is intended as a brief overview of how to use Mutt.  There are
many other features which are described elsewhere in the manual.  There
is even more information available in the Mutt FAQ and various web
pages.  See the <htmlurl url="http://www.mutt.org/mutt/"
name="Mutt Page"> for more details.

The keybindings described in this section are the defaults as distributed.
Your local system administrator may have altered the defaults for your site.
You can always type ``?'' in any menu to display the current bindings.

The first thing you need to do is invoke mutt, simply by typing mutt
at the command line.  There are various command-line options, see 
either the mutt man page or the <ref id="commandline" name="reference">.

<sect1>Moving Around in Menus
<p>

Information is presented in menus, very similar to ELM.  Here is a table
showing the common keys used to navigate menus in Mutt.

<tscreen><verb>
j or Down       next-entry      move to the next entry
k or Up         previous-entry  move to the previous entry
z or PageDn     page-down       go to the next page
Z or PageUp     page-up         go to the previous page
= or Home       first-entry     jump to the first entry
* or End        last-entry      jump to the last entry
q               quit            exit the current menu
?               help            list all keybindings for the current menu
</verb></tscreen>

<sect1>Editing Input Fields<label id="editing">
<p>
Mutt has a builtin line editor which is used as the primary way to input
textual data such as email addresses or filenames.  The keys used to move
around while editing are very similar to those of Emacs.

<tscreen><verb>
^A or <Home>    bol             move to the start of the line
^B or <Left>    backward-char   move back one char
Esc B		backward-word	move back one word
^D or <Delete>  delete-char     delete the char under the cursor
^E or <End>     eol             move to the end of the line
^F or <Right>   forward-char    move forward one char
Esc F		forward-word	move forward one word
<Tab>           complete        complete filename or alias
^T              complete-query  complete address with query
^K              kill-eol        delete to the end of the line
ESC d		kill-eow	delete to the end ot the word
^W              kill-word       kill the word in front of the cursor
^U              kill-line       delete entire line
^V              quote-char      quote the next typed key
<Up>            history-up      recall previous string from history
<Down>          history-down    recall next string from history
<BackSpace>     backspace       kill the char in front of the cursor
Esc u		upcase-word	convert word to upper case
Esc l		downcase-word	convert word to lower case
Esc c		capitalize-word capitalize the word
^G              n/a             abort
<Return>        n/a             finish editing
</verb></tscreen>

You can remap the <em/editor/ functions using the <ref id="bind" name="bind">
command.  For example, to make the <em/Delete/ key delete the character in
front of the cursor rather than under, you could use

<tt/bind editor &lt;delete&gt; backspace/

<sect1>Reading Mail - The Index and Pager
<p>

Similar to many other mail clients, there are two modes in which mail is
read in Mutt.  The first is the index of messages in the mailbox, which is
called the ``index'' in Mutt.  The second mode is the display of the
message contents.  This is called the ``pager.''

The next few sections describe the functions provided in each of these
modes.

<sect2>The Message Index
<p>

<tscreen><verb>
c               change to a different mailbox
ESC c           change to a folder in read-only mode
C               copy the current message to another mailbox
ESC C           decode a message and copy it to a folder
ESC s           decode a message and save it to a folder
D               delete messages matching a pattern
d               delete the current message
F               mark as important
l               show messages matching a pattern
N               mark message as new
o               change the current sort method
O               reverse sort the mailbox
q               save changes and exit
s               save-message
T               tag messages matching a pattern
t               toggle the tag on a message
ESC t           toggle tag on entire message thread
U               undelete messages matching a pattern
u               undelete-message
v               view-attachments
x               abort changes and exit
<Return>        display-message
<Tab>           jump to the next new message
@               show the author's full e-mail address
$               save changes to mailbox
/               search
ESC /           search-reverse
^L              clear and redraw the screen
^T              untag messages matching a pattern
</verb></tscreen>

<sect3>Status Flags
<p>

In addition to who sent the message and the subject, a short summary of
the disposition of each message is printed beside the message number.
Zero or more of the following ``flags'' may appear, which mean:

<p>
<descrip>
<tag/D/ message is deleted (is marked for deletion)
<tag/d/ message have attachments marked for deletion
<tag/K/ contains a PGP public key
<tag/N/ message is new
<tag/O/ message is old
<tag/P/ message is PGP encrypted
<tag/r/ message has been replied to
<tag/S/ message is PGP signed, and the signature is succesfully verified
<tag/s/ message is PGP signed
<tag/!/ message is flagged
<tag/*/ message is tagged
</descrip>

Some of the status flags can be turned on or off using
<itemize>
<item><bf/set-flag/ (default: w)
<item><bf/clear-flag/ (default: W)
</itemize>

<p>
Furthermore, the following flags reflect who the message is addressed
to.  They can be customized with the
<ref id="to_chars" name="&dollar;to&lowbar;chars"> variable.

<p>
<tscreen><verb>
+       message is to you and you only
T       message is to you, but also to or cc'ed to others
C       message is cc'ed to you
F       message is from you
L       message is sent to a subscribed mailing list
</verb></tscreen>

<sect2>The Pager
<p>

By default, Mutt uses its builtin pager to display the body of messages.
The pager is very similar to the Unix program <em/less/ though not nearly as
featureful.

<tscreen><verb>
<Return>        go down one line
<Space>         display the next page (or next message if at the end of a message)
-               go back to the previous page
n               search for next match
S               skip beyond quoted text
T               toggle display of quoted text
?               show keybindings
/               search for a regular expression (pattern)
ESC /           search backwards for a regular expression
\               toggle search pattern coloring
^               jump to the top of the message
$               jump to the bottom of the message
</verb></tscreen>

In addition, many of the functions from the <em/index/ are available in
the pager, such as <em/delete-message/ or <em/copy-message/ (this is one
advantage over using an external pager to view messages).

Also, the internal pager supports a couple other advanced features. For
one, it will accept and translate the ``standard'' nroff sequences for
bold and underline. These sequences are a series of either the letter,
backspace (^H), the letter again for bold or the letter, backspace,
``&lowbar;'' for denoting underline. Mutt will attempt to display these
in bold and underline respectively if your terminal supports them. If
not, you can use the bold and underline <ref id="color" name="color">
objects to specify a color or mono attribute for them.

Additionally, the internal pager supports the ANSI escape sequences for
character attributes.  Mutt translates them into the correct color and
character settings.  The sequences Mutt supports are:

<p>
<tscreen><verb>
ESC [ Ps;Ps;Ps;...;Ps m
where Ps =
0    All Attributes Off
1    Bold on
4    Underline on
5    Blink on
7    Reverse video on
3x   Foreground color is x
4x   Background color is x

Colors are
0    black
1    red
2    green
3    yellow
4    blue
5    magenta
6    cyan
7    white
</verb></tscreen>

Mutt uses these attributes for handling text/enriched messages, and they
can also be used by an external <ref id="auto_view" name="autoview">
script for highlighting purposes.  <bf/Note:/ If you change the colors for your
display, for example by changing the color associated with color2 for
your xterm, then that color will be used instead of green.

<sect2>Threaded Mode<label id="threads">
<p>
When the mailbox is <ref id="sort" name="sorted"> by <em/threads/, there are
a few additional functions available in the <em/index/ and <em/pager/ modes.

<tscreen><verb>
^D      delete-thread           delete all messages in the current thread
^U      undelete-thread         undelete all messages in the current thread
^N      next-thread             jump to the start of the next thread
^P      previous-thread         jump to the start of the previous thread
^R      read-thread             mark the current thread as read
ESC d   delete-subthread        delete all messages in the current subthread
ESC u   undelete-subthread      undelete all messages in the current subthread
ESC n   next-subthread          jump to the start of the next subthread
ESC p   previous-subthread      jump to the start of the previous subthread
ESC r   read-subthread          mark the current subthread as read
ESC t   tag-thread              toggle the tag on the current thread
ESC v	collapse-thread		toggle collapse for the current thread
ESC V	collapse-all		toggle collapse for all threads
P       parent-message          jump to parent message in thread
</verb></tscreen>

<bf/Note:/ Collapsing a thread displays only the first message
in the thread and hides the others. This is useful when threads
contain so many messages that you can only see a handful of threads on
the screen. See %M in <ref id="index_format"name="&dollar;index&lowbar;format">.
For example, you could use "&percnt;?M?(#&percnt;03M)&amp;(&percnt;4l)?" in <ref
id="index_format"name="&dollar;index&lowbar;format"> to optionally
display the number of hidden messages if the thread is collapsed.

See also: <ref id="strict_threads" name="&dollar;strict&lowbar;threads">.

<sect2>Miscellaneous Functions
<p><bf/create-alias/<label id="create-alias"> (default: a)<newline>

Creates a new alias based upon the current message (or prompts for a
new one).  Once editing is complete, an <ref id="alias" name="alias">
command is added to the file specified by the <ref id="alias_file"
name="&dollar;alias&lowbar;file"> variable for future use. <bf/Note:/
Specifying an <ref id="alias_file" name="&dollar;alias&lowbar;file">
does not add the aliases specified there-in, you must also <ref
id="source" name="source"> the file.

<p><bf/check-traditional-pgp/<label id="check-traditional-pgp"> (default: ESC P)<newline>

This function will search the current message for content signed or
encrypted with PGP the "traditional" way, that is, without proper
MIME tagging.  Technically, this function will temporarily change
the MIME content types of the body parts containing PGP data; this
is similar to the <ref id="edit-type" name="edit-type"> function's
effect.


<p><bf/display-toggle-weed/<label id="display-toggle-weed"> (default: h)<newline>

Toggles the weeding of message header fields specified by <ref id="ignore"
name="ignore"> commands.

<p><bf/edit/<label id="edit"> (default: e)<newline>

This command (available in the ``index'' and ``pager'') allows you to
edit the raw current message as it's present in the mail folder.
After you have finished editing, the changed message will be
appended to the current folder, and the original message will be
marked for deletion.

<p><bf/edit-type/<label id="edit-type"><newline>
(default: ^E on the attachment menu, and in the pager and index menus; ^T on the
compose menu)

This command is used to temporarily edit an attachment's content
type to fix, for instance, bogus character set parameters.  When
invoked from the index or from the pager, you'll have the
opportunity to edit the top-level attachment's content type.  On the
<ref id="attach_menu" name="attachment menu">, you can change any
attachment's content type. These changes are not persistent, and get
lost upon changing folders.

Note that this command is also available on the <ref
id="compose_menu" name="compose menu">.  There, it's used to
fine-tune the properties of attachments you are going to send.

<p><bf/enter-command/<label id="enter-command"> (default: ``:'')<newline>

This command is used to execute any command you would normally put in a
configuration file.  A common use is to check the settings of variables, or
in conjunction with <ref id="macro" name="macros"> to change settings on the
fly.

<p><bf/extract-keys/<label id="extract-keys"> (default: ^K)<newline>

This command extracts PGP public keys from the current or tagged
message(s) and adds them to your PGP public key ring.

<p><bf/forget-passphrase/<label id="forget-passphrase"> (default:
^F)<newline> 

This command wipes the PGP passphrase from memory. It is useful, if
you misspelled the passphrase.

<p><bf/list-reply/<label id="list-reply"> (default: L)<newline>

Reply to the current or tagged message(s) by extracting any addresses which
match the addresses given by the <ref id="lists" name="lists or subscribe">
commands, but also honor any <tt/Mail-Followup-To/ header(s) if the
<ref id="honor_followup_to" name="&dollar;honor&lowbar;followup&lowbar;to">
configuration variable is set.  Using this when replying to messages posted
to mailing lists helps avoid duplicate copies being sent to the author of
the message you are replying to.

<bf/pipe-message/<label id="pipe-message"> (default: |)<newline>

Asks for an external Unix command and pipes the current or
tagged message(s) to it.  The variables <ref id="pipe_decode"
name="&dollar;pipe&lowbar;decode">, <ref id="pipe_split"
name="&dollar;pipe&lowbar;split">, <ref id="pipe_sep"
name="&dollar;pipe&lowbar;sep"> and <ref id="wait_key"
name="&dollar;wait&lowbar;key"> control the exact behaviour of this
function.

<bf/resend-message/<label id="resend-message"> (default: ESC e)<newline>

With resend-message, mutt takes the current message as a template for a
new message.  This function is best described as "recall from arbitrary
folders".  It can conveniently be used to forward MIME messages while
preserving the original mail structure. Note that the amount of headers
included here depends on the value of the <ref id="weed" name="&dollar;weed">
variable.

This function is also available from the attachment menu. You can use this
to easily resend a message which was included with a bounce message
as a message/rfc822 body part.

<bf/shell-escape/<label id="shell-escape"> (default: !)<newline>

Asks for an external Unix command and executes it.  The <ref
id="wait_key" name="&dollar;wait&lowbar;key"> can be used to control
whether Mutt will wait for a key to be pressed when the command returns
(presumably to let the user read the output of the command), based on
the return status of the named command.

<bf/toggle-quoted/<label id="toggle-quoted"> (default: T)<newline>

The <em/pager/ uses the <ref id="quote_regexp"
name="&dollar;quote&lowbar;regexp"> variable to detect quoted text when
displaying the body of the message.  This function toggles the display
of the quoted material in the message.  It is particularly useful when
are interested in just the response and there is a large amount of
quoted text in the way.

<bf/skip-quoted/<label id="skip-quoted"> (default: S)<newline>

This function will go to the next line of non-quoted text which come
after a line of quoted text in the internal pager.

<sect1>Sending Mail
<p>

The following bindings are available in the <em/index/ for sending
messages.

<tscreen><verb>
m       compose         compose a new message
r       reply           reply to sender
g       group-reply     reply to all recipients
L       list-reply      reply to mailing list address
f       forward         forward message
b       bounce          bounce (remail) message
ESC k   mail-key        mail a PGP public key to someone
</verb></tscreen>

Bouncing a message sends the message as is to the recipient you
specify.  Forwarding a message allows you to add comments or
modify the message you are forwarding.  These items are discussed
in greater detail in the next chapter <ref id="forwarding_mail"
name="``Forwarding and Bouncing Mail''">.

Mutt will then enter the <em/compose/ menu and prompt you for the
recipients to place on the ``To:'' header field.  Next, it will ask
you for the ``Subject:'' field for the message, providing a default if
you are replying to or forwarding a message.  See also <ref id="askcc"
name="&dollar;askcc">, <ref id="askbcc" name="&dollar;askbcc">, <ref
id="autoedit" name="&dollar;autoedit">, and <ref id="fast_reply"
name="&dollar;fast&lowbar;reply"> for changing how Mutt asks these
questions.

Mutt will then automatically start your <ref id="editor"
name="&dollar;editor"> on the message body.  If the <ref id="edit_headers"
name="&dollar;edit&lowbar;headers"> variable is set, the headers will be at
the top of the message in your editor.  Any messages you are replying
to will be added in sort order to the message, with appropriate <ref
id="attribution" name="&dollar;attribution">, <ref id="indent_string"
name="&dollar;indent&lowbar;string"> and <ref id="post_indent_string"
name="&dollar;post&lowbar;indent&lowbar;string">.  When forwarding a
message, if the <ref id="mime_forward" name="&dollar;mime&lowbar;forward">
variable is unset, a copy of the forwarded message will be included.  If
you have specified a <ref id="signature" name="&dollar;signature">, it
will be appended to the message.

Once you have finished editing the body of your mail message, you are
returned to the <em/compose/ menu.  The following options are available:

<tscreen><verb>
a       attach-file             attach a file
A	attach-message		attach message(s) to the message
ESC k   attach-key              attach a PGP public key
d       edit-description        edit description on attachment
D       detach-file             detach a file
t       edit-to                 edit the To field
ESC f   edit-from               edit the From field
r       edit-reply-to           edit the Reply-To field
c       edit-cc                 edit the Cc field
b       edit-bcc                edit the Bcc field
y       send-message            send the message
s       edit-subject            edit the Subject
f       edit-fcc                specify an ``Fcc'' mailbox
p       pgp-menu                select PGP options
P       postpone-message        postpone this message until later
q       quit                    quit (abort) sending the message
w	write-fcc		write the message to a folder
i       ispell                  check spelling (if available on your system)
^F      forget-passphrase       whipe PGP passphrase from memory
</verb></tscreen>

<bf/Note:/ The attach-message function will prompt you for a folder to
attach messages from. You can now tag messages in that folder and they
will be attached to the message you are sending. Note that certain
operations like composing a new mail, replying, forwarding, etc. are
not permitted when you are in that folder. The %r in <ref
id="status_format" name="&dollar;status&lowbar;format"> will change to
a 'A' to indicate that you are in attach-message mode.

<sect2>Editing the message header
<p>
When editing the header of your outgoing message, there are a couple of
special features available.

If you specify<newline>
<tt/Fcc:/ <em/filename/<newline>
Mutt will pick up <em/filename/
just as if you had used the <em/edit-fcc/ function in the <em/compose/ menu.

You can also attach files to your message by specifying<newline>
<tt/Attach:/ <em/filename/  &lsqb; <em/description/ &rsqb;<newline>
where <em/filename/ is the file to attach and <em/description/ is an
optional string to use as the description of the attached file.

When replying to messages, if you remove the <em/In-Reply-To:/ field from
the header field, Mutt will not generate a <em/References:/ field, which
allows you to create a new message thread.

Also see <ref id="edit_headers" name="edit&lowbar;headers">.

<sect2>Using Mutt with PGP

<p>
If you want to use PGP, you can specify 

<tt/Pgp:/ &lsqb; <tt/E/ | <tt/S/ | <tt/S&lt;id/&gt; &rsqb; <newline>

``E'' encrypts, ``S'' signs and
``S&lt;id&gt;'' signs with the given key, setting <ref
id="pgp_sign_as" name="&dollar;pgp&lowbar;sign&lowbar;as"> permanently.

If you have told mutt to PGP encrypt a message, it will guide you
through a key selection process when you try to send the message.
Mutt will not ask you any questions about keys which have a
certified user ID matching one of the message recipients' mail
addresses.  However, there may be situations in which there are
several keys, weakly certified user ID fields, or where no matching
keys can be found.

In these cases, you are dropped into a menu with a list of keys from
which you can select one.  When you quit this menu, or mutt can't
find any matching keys, you are prompted for a user ID.  You can, as
usually, abort this prompt using <tt/^G/.  When you do so, mutt will
return to the compose screen.

Once you have successfully finished the key selection, the message
will be encrypted using the selected public keys, and sent out.

Most fields of the entries in the key selection menu (see also <ref
id="pgp_entry_format" name="&dollar;pgp&lowbar;entry&lowbar;format">) 
have obvious meanings.  But some explanations on the capabilities, flags, 
and validity fields are in order.

The flags sequence (&percnt;f) will expand to one of the following flags:
<tscreen><verb>
R            The key has been revoked and can't be used.
X            The key is expired and can't be used.
d            You have marked the key as disabled.
c            There are unknown critical self-signature 
             packets.
</verb></tscreen>

The capabilities field (&percnt;c) expands to a two-character sequence
representing a key's capabilities.  The first character gives
the key's encryption capabilities: A minus sign (<bf/-/) means 
that the key cannot be used for encryption.  A dot (<bf/./) means that
it's marked as a signature key in one of the user IDs, but may 
also be used for encryption.  The letter <bf/e/ indicates that 
this key can be used for encryption.
 
The second character indicates the key's signing capabilities.  Once 
again, a ``<bf/-/'' implies ``not for signing'', ``<bf/./'' implies
that the key is marked as an encryption key in one of the user-ids, and
``<bf/s/'' denotes a key which can be used for signing.

Finally, the validity field (%t) indicates how well-certified a user-id
is.  A question mark (<bf/?/) indicates undefined validity, a minus 
character (<bf/-/) marks an untrusted association, a space character 
means a partially trusted association, and a plus character (<bf/+/) 
indicates complete validity.

<sect2>Sending anonymous messages via mixmaster.

<p>
You may also have configured mutt to co-operate with Mixmaster, an
anonymous remailer.  Mixmaster permits you to send your messages
anonymously using a chain of remailers. Mixmaster support in mutt is for 
mixmaster version 2.04 (beta 45 appears to be the latest) and 2.03. 
It does not support earlier versions or the later so-called version 3 betas, 
of which the latest appears to be called 2.9b23.

To use it, you'll have to obey certain restrictions.  Most
important, you cannot use the <tt/Cc/ and <tt/Bcc/ headers.  To tell
Mutt to use mixmaster, you have to select a remailer chain, using
the mix function on the compose menu.  

The chain selection screen is divided into two parts.  In the
(larger) upper part, you get a list of remailers you may use.  In
the lower part, you see the currently selected chain of remailers.

You can navigate in the chain using the <tt/chain-prev/ and
<tt/chain-next/ functions, which are by default bound to the left
and right arrows and to the <tt/h/ and <tt/l/ keys (think vi
keyboard bindings).  To insert a remailer at the current chain
position, use the <tt/insert/ function.  To append a remailer behind
the current chain position, use <tt/select-entry/ or <tt/append/.
You can also delete entries from the chain, using the corresponding
function.  Finally, to abandon your changes, leave the menu, or
<tt/accept/ them pressing (by default) the <tt/Return/ key.

Note that different remailers do have different capabilities,
indicated in the &percnt;c entry of the remailer menu lines (see
<ref id="mix_entry_format"
name="&dollar;mix&lowbar;entry&lowbar;format">).  Most important is
the ``middleman'' capability, indicated by a capital ``M'': This
means that the remailer in question cannot be used as the final
element of a chain, but will only forward messages to other
mixmaster remailers.  For details on the other capabilities, please
have a look at the mixmaster documentation.

<sect1>Forwarding and Bouncing Mail<label id="forwarding_mail">
<p>

Bouncing and forwarding let you send an existing message to recipients
that you specify.  Bouncing a message uses the <ref id="sendmail"
name="sendmail"> command to send a copy to alternative addresses as if
they were the message's original recipients.  Forwarding a message, on
the other hand, allows you to modify the message before it is resent
(for example, by adding your own comments).

The following keys are bound by default:

<tscreen><verb>
f       forward         forward message
b       bounce          bounce (remail) message
</verb></tscreen>

Forwarding can be done by including the original message in the new
message's body (surrounded by indicating lines) or including it as a MIME
attachment, depending on the value of the <ref id="mime_forward"
name="&dollar;mime&lowbar;forward"> variable.  Decoding of attachments,
like in the pager, can be controlled by the <ref id="forward_decode"
name="&dollar;forward&lowbar;decode"> and <ref id="mime_forward_decode"
name="&dollar;mime&lowbar;forward&lowbar;decode"> variables,
respectively.  The desired forwarding format may depend on the content,
therefore <em/&dollar;mime&lowbar;forward/ is a quadoption which, for
example, can be set to ``ask-no''.

The inclusion of headers is controlled by the current setting of the
<ref id="weed" name="&dollar;weed"> variable, unless <ref
id="mime_forward" name="mime&lowbar;forward"> is set.

Editing the message to forward follows the same procedure as sending or
replying to a message does.

<sect1>Postponing Mail<label id="postponing_mail">
<p>

At times it is desirable to delay sending a message that you have
already begun to compose.  When the <em/postpone-message/ function is
used in the <em/compose/ menu, the body of your message and attachments
are stored in the mailbox specified by the <ref id="postponed"
name="&dollar;postponed"> variable.  This means that you can recall the
message even if you exit Mutt and then restart it at a later time.

Once a message is postponed, there are several ways to resume it.  From the
command line you can use the ``-p'' option, or if you <em/compose/ a new
message from the <em/index/ or <em/pager/ you will be prompted if postponed
messages exist.  If multiple messages are currently postponed, the
<em/postponed/ menu will pop up and you can select which message you would
like to resume.

<bf/Note:/ If you postpone a reply to a message, the reply setting of
the message is only updated when you actually finish the message and
send it.  Also, you must be in the same folder with the message you
replied to for the status of the message to be updated.

See also the <ref id="postpone" name="&dollar;postpone"> quad-option.

<sect>Configuration
<p>

While the default configuration (or ``preferences'') make Mutt
usable right out of the box, it is often desirable to tailor Mutt to
suit your own tastes. When Mutt is first invoked, it will attempt to
read the ``system'' configuration file (defaults set by your local
system administrator), unless the ``-n'' <ref id="commandline"
name="command line"> option is specified.  This file is typically
<tt>/usr/local/share/mutt/Muttrc</tt> or <tt>/etc/Muttrc</tt>. Mutt
will next look for a file named <tt>.muttrc</tt> in your home
directory.  If this file does not exist and your home directory has
a subdirectory named <tt/.mutt/, mutt try to load a file named
<tt>.mutt/muttrc</tt>. 

<tt>.muttrc</tt> is the file where you will usually place your <ref
 id="commands" name="commands"> to configure Mutt.

In addition, mutt supports version specific configuration files that are
parsed instead of the default files as explained above.  For instance, if
your system has a <tt/Muttrc-0.88/ file in the system configuration
directory, and you are running version 0.88 of mutt, this file will be
sourced instead of the <tt/Muttrc/ file.  The same is true of the user
configuration file, if you have a file <tt/.muttrc-0.88.6/ in your home
directory, when you run mutt version 0.88.6, it will source this file
instead of the default <tt/.muttrc/ file.  The version number is the
same which is visible using the ``-v'' <ref id="commandline"
name="command line"> switch or using the <tt/show-version/ key (default:
V) from the index menu.

<sect1>Syntax of Initialization Files<label id="muttrc-syntax">
<p>

An initialization file consists of a series of <ref id="commands"
name="commands">.  Each line of the file may contain one or more commands.
When multiple commands are used, they must be separated by a semicolon (;).
<tscreen><verb>
set realname='Mutt user' ; ignore x-
</verb></tscreen>
The hash mark, or pound sign
(``&num;''), is used as a ``comment'' character. You can use it to
annotate your initialization file. All text after the comment character
to the end of the line is ignored. For example,

<tscreen><verb>
my_hdr X-Disclaimer: Why are you listening to me? &num; This is a comment
</verb></tscreen>

Single quotes (') and double quotes (&dquot;) can be used to quote strings
which contain spaces or other special characters.  The difference between
the two types of quotes is similar to that of many popular shell programs,
namely that a single quote is used to specify a literal string (one that is
not interpreted for shell variables or quoting with a backslash &lsqb;see
next paragraph&rsqb;), while double quotes indicate a string for which
should be evaluated.  For example, backtics are evaluated inside of double
quotes, but <bf/not/ for single quotes.

&bsol; quotes the next character, just as in shells such as bash and zsh.
For example, if want to put quotes ``&dquot;'' inside of a string, you can use
``&bsol;'' to force the next character to be a literal instead of interpreted
character.
<tscreen><verb>
set realname="Michael \"MuttDude\" Elkins"
</verb></tscreen>

``&bsol;&bsol;'' means to insert a literal ``&bsol;'' into the line.
``&bsol;n'' and ``&bsol;r'' have their usual C meanings of linefeed and
carriage-return, respectively.

A &bsol; at the end of a line can be used to split commands over
multiple lines, provided that the split points don't appear in the
middle of command names.

It is also possible to substitute the output of a Unix command in an
initialization file.  This is accomplished by enclosing the command in
backquotes (``).  For example,
<tscreen><verb>
my_hdr X-Operating-System: `uname -a`
</verb></tscreen>
The output of the Unix command ``uname -a'' will be substituted before the
line is parsed.  Note that since initialization files are line oriented, only
the first line of output from the Unix command will be substituted.

UNIX environments can be accessed like the way it is done in shells like
sh and bash: Prepend the name of the environment by a ``&dollar;''.  For
example,
<tscreen><verb>
set record=+sent_on_$HOSTNAME
</verb></tscreen>

The commands understood by mutt are explained in the next paragraphs.
For a complete list, see the <ref id="commands" name="command reference">.

<sect1>Defining/Using aliases<label id="alias">
<p>

Usage: <tt/alias/ <em/key/ <em/address/ &lsqb; , <em/address/, ... &rsqb;

It's usually very cumbersome to remember or type out the address of someone
you are communicating with.  Mutt allows you to create ``aliases'' which map
a short string to a full address.

<bf/Note:/ if you want to create an alias for a group (by specifying more than
one address), you <bf/must/ separate the addresses with a comma (``,'').

To remove an alias or aliases (``*'' means all aliases):

<tt/unalias/ &lsqb; * | <em/key/ <em/.../ &rsqb;

<tscreen><verb>
alias muttdude me@cs.hmc.edu (Michael Elkins)
alias theguys manny, moe, jack
</verb></tscreen>

Unlike other mailers, Mutt doesn't require aliases to be defined
in a special file.  The <tt/alias/ command can appear anywhere in
a configuration file, as long as this file is <ref id="source"
name="sourced">.  Consequently, you can have multiple alias files, or
you can have all aliases defined in your muttrc.

On the other hand, the <ref id="create-alias" name="create-alias">
function can use only one file, the one pointed to by the <ref
id="alias_file" name="&dollar;alias&lowbar;file"> variable (which is
<tt>&tilde;/.muttrc</tt> by default). This file is not special either,
in the sense that Mutt will happily append aliases to any file, but in
order for the new aliases to take effect you need to explicitly <ref
id="source" name="source"> this file too.

For example:

<tscreen><verb>
source /usr/local/share/Mutt.aliases
source ~/.mail_aliases
set alias_file=~/.mail_aliases
</verb></tscreen>

To use aliases, you merely use the alias at any place in mutt where mutt
prompts for addresses, such as the <em/To:/ or <em/Cc:/ prompt.  You can
also enter aliases in your editor at the appropriate headers if you have the
<ref id="edit_headers" name="&dollar;edit&lowbar;headers"> variable set.

In addition, at the various address prompts, you can use the tab character
to expand a partial alias to the full alias.  If there are multiple matches,
mutt will bring up a menu with the matching aliases.  In order to be
presented with the full list of aliases, you must hit tab with out a partial
alias, such as at the beginning of the prompt or after a comma denoting
multiple addresses.

In the alias menu, you can select as many aliases as you want with the
<em/select-entry/ key (default: RET), and use the <em/exit/ key
(default: q) to return to the address prompt.

<sect1>Changing the default key bindings<label id="bind">
<p>
Usage: <tt/bind/ <em/map/ <em/key/ <em/function/

This command allows you to change the default key bindings (operation
invoked when pressing a key).

<em/map/ specifies in which menu the binding belongs.  The currently
defined maps are:

<itemize>
<item>generic
<item>alias
<item>attach
<item>browser
<item>editor
<item>index
<item>compose
<item>pager
<item>pgp
<item>postpone
</itemize>

<em/key/ is the key (or key sequence) you wish to bind.  To specify a
control character, use the sequence <em/&bsol;Cx/, where <em/x/ is the
letter of the control character (for example, to specify control-A use
``&bsol;Ca'').  Note that the case of <em/x/ as well as <em/&bsol;C/ is
ignored, so that <em/&bsol;CA, &bsol;Ca, &bsol;cA/ and <em/&bsol;ca/ are all
equivalent.  An alternative form is to specify the key as a three digit
octal number prefixed with a ``&bsol;'' (for example <em/&bsol;177/ is
equivalent to <em/&bsol;c?/).

In addition, <em/key/ may consist of:

<tscreen><verb>
\t              tab
<tab>           tab
\r              carriage return
\n              newline
\e              escape
<esc>           escape
<up>            up arrow
<down>          down arrow
<left>          left arrow
<right>         right arrow
<pageup>        Page Up
<pagedown>      Page Down
<backspace>     Backspace
<delete>        Delete
<insert>        Insert
<enter>         Enter
<return>        Return
<home>          Home
<end>           End
<space>         Space bar
<f1>            function key 1
<f10>           function key 10
</verb></tscreen>

<em/key/ does not need to be enclosed in quotes unless it contains a
space (`` '').

<em/function/ specifies which action to take when <em/key/ is pressed.
For a complete list of functions, see the <ref id="functions"
name="reference">.  The special function <tt/noop/ unbinds the specify key
sequence.

<sect1>Defining aliases for character sets <label id="charset-hook">
<p>
Usage: <tt/charset-hook/ <em/alias/ <em/charset/<newline>
Usage: <tt/iconv-hook/ <em/charset/ <em/local-charset/

The <tt/charset-hook/ command defines an alias for a character set.
This is useful to properly display messages which are tagged with a
character set name not known to mutt.

The <tt/iconv-hook/ command defines a system-specific name for a
character set.  This is helpful when your systems character
conversion library insists on using strange, system-specific names
for character sets.


<sect1>Setting variables based upon mailbox<label id="folder-hook">
<p>
Usage: <tt/folder-hook/ &lsqb;!&rsqb;<em/regexp/ <em/command/

It is often desirable to change settings based on which mailbox you are
reading.  The folder-hook command provides a method by which you can execute
any configuration command.  <em/pattern/ is a regular expression specifying
in which mailboxes to execute <em/command/ before loading.  If a mailbox
matches multiple folder-hook's, they are executed in the order given in the
muttrc.

<bf/Note:/ if you use the ``!'' shortcut for <ref id="spoolfile"
name="&dollar;spoolfile"> at the beginning of the pattern, you must place it
inside of double or single quotes in order to distinguish it from the
logical <em/not/ operator for the expression.

Note that the settings are <em/not/ restored when you leave the mailbox.
For example, a command action to perform is to change the sorting method
based upon the mailbox being read:

<tscreen><verb>
folder-hook mutt set sort=threads
</verb></tscreen>

However, the sorting method is not restored to its previous value when
reading a different mailbox.  To specify a <em/default/ command, use the
pattern ``.'':

<p>
<tscreen><verb>
folder-hook . set sort=date-sent
</verb></tscreen>

<sect1>Keyboard macros<label id="macro">
<p>
Usage: <tt/macro/ <em/menu/ <em/key/ <em/sequence/ &lsqb; <em/description/ &rsqb;

Macros are useful when you would like a single key to perform a series of
actions.  When you press <em/key/ in menu <em/menu/, Mutt will behave as if
you had typed <em/sequence/.  So if you have a common sequence of commands
you type, you can create a macro to execute those commands with a single
key.

<em/key/ and <em/sequence/ are expanded by the same rules as the <ref
id="bind" name="key bindings">.  There are some additions however.  The
first is that control characters in <em/sequence/ can also be specified
as <em/&circ;x/.  In order to get a caret (`&circ;'') you need to use
<em/&circ;&circ;/.  Secondly, to specify a certain key such as <em/up/
or to invoke a function directly, you can use the format
<em/&lt;key name&gt;/ and <em/&lt;function name&gt;/.  For a listing of key
names see the section on <ref id="bind" name="key bindings">.  Functions
are listed in the <ref id="functions" name="function reference">.

The advantage with using function names directly is that the macros will
work regardless of the current key bindings, so they are not dependent on
the user having particular key definitions.  This makes them more robust
and portable, and also facilitates defining of macros in files used by more
than one user (eg. the system Muttrc).

Optionally you can specify a descriptive text after <em/sequence/,
which is shown in the help screens.

<bf/Note:/ Macro definitions (if any) listed in the help screen(s), are
silently truncated at the screen width, and are not wrapped.   

<sect1>Using color and mono video attributes<label id="color">
<p>
Usage: <tt/color/ <em/object/ <em/foreground/ <em/background/ &lsqb; <em/regexp/ &rsqb;<newline>
Usage: <tt/color/ index <em/foreground/ <em/background/ <em/pattern/<newline>
Usage: <tt/uncolor/ index <em/pattern/ &lsqb; <em/pattern/ ...  &rsqb;<newline>

If your terminal supports color, you can spice up Mutt by creating your own
color scheme.  To define the color of an object (type of information), you
must specify both a foreground color <bf/and/ a background color (it is not
possible to only specify one or the other).

<em/object/ can be one of:

<itemize>
<item>attachment
<item>body (match <em/regexp/ in the body of messages)
<item>bold (hiliting bold patterns in the body of messages)
<item>error (error messages printed by Mutt)
<item>header (match <em/regexp/ in the message header)
<item>hdrdefault (default color of the message header in the pager)
<item>index (match <em/pattern/ in the message index)
<item>indicator (arrow or bar used to indicate the current item in a menu)
<item>markers (the ``+'' markers at the beginning of wrapped lines in the pager)
<item>message (informational messages)
<item>normal
<item>quoted (text matching <ref id="quote_regexp"
name="&dollar;quote&lowbar;regexp"> in the body of a message)
<item>quoted1, quoted2, ..., quoted<bf/N/ (higher levels of quoting)
<item>search (hiliting of words in the pager)
<item>signature
<item>status (mode lines used to display info about the mailbox or message)
<item>tilde (the ``&tilde;'' used to pad blank lines in the pager)
<item>tree (thread tree drawn in the message index and attachment menu)
<item>underline (hiliting underlined patterns in the body of messages)
</itemize>

<em/foreground/ and <em/background/ can be one of the following:

<itemize>
<item>white
<item>black
<item>green
<item>magenta
<item>blue
<item>cyan
<item>yellow
<item>red
<item>default
<item>color<em/x/
</itemize>

<em/foreground/ can optionally be prefixed with the keyword <tt/bright/ to make
the foreground color boldfaced (e.g., <tt/brightred/).

If your terminal supports it, the special keyword <em/default/ can be
used as a transparent color.  The value <em/brightdefault/ is also valid.
If Mutt is linked against the <em/S-Lang/ library, you also need to set
the <em/COLORFGBG/ environment variable to the default colors of your
terminal for this to work; for example (for Bourne-like shells):

<tscreen><verb>
set COLORFGBG="green;black"
export COLORFGBG
</verb></tscreen>

<bf/Note:/ The <em/S-Lang/ library requires you to use the <em/lightgray/
and <em/brown/ keywords instead of <em/white/ and <em/yellow/ when
setting this variable.

<bf/Note:/ The uncolor command can be applied to the index object only.  It
removes entries from the list. You <bf/must/ specify the same pattern
specified in the color command for it to be removed.  The pattern ``*'' is
a special token which means to clear the color index list of all entries.

Mutt also recognizes the keywords <em/color0/, <em/color1/, &hellip;,
<em/color/<bf/N-1/ (<bf/N/ being the number of colors supported
by your terminal).  This is useful when you remap the colors for your
display (for example by changing the color associated with <em/color2/
for your xterm), since color names may then lose their normal meaning.

If your terminal does not support color, it is still possible change the video
attributes through the use of the ``mono'' command:

Usage: <tt/mono/ <em/&lt;object&gt; &lt;attribute&gt;/ &lsqb; <em/regexp/ &rsqb;<newline>
Usage: <tt/mono/ index <em/attribute/ <em/pattern/<newline>
Usage: <tt/unmono/ index <em/pattern/ &lsqb; <em/pattern/ ...  &rsqb;<newline>

where <em/attribute/ is one of the following:

<itemize>
<item>none
<item>bold
<item>underline
<item>reverse
<item>standout
</itemize>

<sect1>Ignoring (weeding) unwanted message headers<label id="ignore">
<p>
Usage: <tt/&lsqb;un&rsqb;ignore/ <em/pattern/ &lsqb; <em/pattern/ ... &rsqb;

Messages often have many header fields added by automatic processing systems,
or which may not seem useful to display on the screen.  This command allows
you to specify header fields which you don't normally want to see.

You do not need to specify the full header field name.  For example,
``ignore content-'' will ignore all header fields that begin with the pattern
``content-''.

To remove a previously added token from the list, use the ``unignore'' command.
Note that if you do ``ignore x-'' it is not possible to ``unignore x-mailer,''
for example.  The ``unignore'' command does <bf/not/ make Mutt display headers
with the given pattern.

``unignore *'' will remove all tokens from the ignore list.

For example:
<tscreen><verb>
# Sven's draconian header weeding
ignore *
unignore from date subject to cc
unignore organization organisation x-mailer: x-newsreader: x-mailing-list:
unignore posted-to:
</verb></tscreen>

<sect1>Mailing lists<label id="lists">
<p>
Usage: <tt/&lsqb;un&rsqb;lists/ <em/address/ &lsqb; <em/address/ ... &rsqb;<newline>
Usage: <tt/&lsqb;un&rsqb;subscribe/ <em/address/ &lsqb; <em/address/ ... &rsqb;

Mutt has a few nice features for <ref id="using_lists" name="handling
mailing lists">.  In order to take advantage of them, you must
specify which addresses belong to mailing lists, and which mailing
lists you are subscribed to.  Once you have done this, the <ref
id="list-reply" name="list-reply"> function will work for all known lists.
Additionally, when you send a message to a subscribed list, mutt will
add a Mail-Followup-To header to tell other users' mail user agents
not to send copies of replies to your personal address.   Note that
the Mail-Followup-To header is a non-standard extension which is not
supported by all mail user agents.  Adding it is not bullet-proof against
receiving personal CCs of list messages.  Also note that the generation
of the Mail-Followup-To header is controlled by the <ref id="followup_to"
name="followup_to"> configuration variable.

More precisely, Mutt maintains lists of known and subscribed mailing
lists.  Every subscribed mailing list is known.  To mark
a mailing list as known, use the ``lists'' command.  To mark it as
subscribed, use ``subscribe''.

Specify as much of the address as you need to to remove ambiguity.  For
example, if you've subscribed to the Mutt mailing list, you will receive mail
addresssed to <em/mutt-users@mutt.org/.  So, to tell Mutt that this is a
mailing list, you could add ``lists mutt-users'' to your
initialization file.  To tell mutt that you are subscribed to it,
add ``subscribe mutt-users'' to your initialization file instead.
If you also happen to get mail from someone whose address is
<em/mutt-users@example.com/, you could use ``lists mutt-users@mutt.org'' 
or ``subscribe mutt-users@mutt.org'' to
match only mail from the actual list.

The ``unlists'' command is used to remove a token from the list of
known and subscribed mailing-lists. Use ``unlists *'' to remove all
tokens.

To remove a mailing list from the list of subscribed mailing lists,
but keep it on the list of known mailing lists, use ``unsubscribe''.


<sect1>Using Multiple spool mailboxes<label id="mbox-hook">
<p>
Usage: <tt/mbox-hook/ &lsqb;!&rsqb;<em/pattern/ <em/mailbox/

This command is used to move read messages from a specified mailbox to a
different mailbox automatically when you quit or change folders.
<em/pattern/ is a regular expression specifying the mailbox to treat as a
``spool'' mailbox and <em/mailbox/ specifies where mail should be saved when
read.

Unlike some of the other <em/hook/ commands, only the <em/first/ matching
pattern is used (it is not possible to save read mail in more than a single
mailbox).

<sect1>Defining mailboxes which receive mail<label id="mailboxes">
<p>
Usage: <tt/mailboxes/ &lsqb;!&rsqb;<em/filename/ &lsqb; <em/filename/ ... &rsqb;

This command specifies folders which can receive mail and
which will be checked for new messages.  By default, the
main menu status bar displays how many of these folders have
new messages.
<p>
When changing folders, pressing <em/space/ will cycle
through folders with new mail.
<p>
Pressing TAB in the directory browser will bring up a menu showing the files
specified by the <tt/mailboxes/ command, and indicate which contain new
messages.  Mutt will automatically enter this mode when invoked from the
command line with the <tt/-y/ option.
<p>
<bf/Note:/ new mail is detected by comparing the last modification time to
the last access time.  Utilities like <tt/biff/ or <tt/frm/ or any other
program which accesses the mailbox might cause Mutt to never detect new mail
for that mailbox if they do not properly reset the access time.  Backup
tools are another common reason for updated access times.
<p>

<bf/Note:/ the filenames in the <tt/mailboxes/ command are resolved when
the command is executed, so if these names contain <ref id="shortcuts"
name="shortcut characters"> (such as ``='' and ``!''), any variable
definition that affect these characters (like <ref id="folder"
name="&dollar;folder"> and <ref id="spoolfile" name="&dollar;spoolfile">)
should be executed before the <tt/mailboxes/ command.

<sect1>User defined headers<label id="my_hdr">
<p>
Usage:<newline>
<tt/my_hdr/ <em/string/<newline>
<tt/unmy_hdr/ <em/field/ &lsqb; <em/field/ ... &rsqb;

The ``my&lowbar;hdr'' command allows you to create your own header
fields which will be added to every message you send.

For example, if you would like to add an ``Organization:'' header field to
all of your outgoing messages, you can put the command

<quote>
my_hdr Organization: A Really Big Company, Anytown, USA
</quote>

in your <tt/.muttrc/.

<bf/Note:/  space characters are <em/not/ allowed between the keyword and
the colon (``:'').  The standard for electronic mail (RFC822) says that
space is illegal there, so Mutt enforces the rule.

If you would like to add a header field to a single message, you should
either set the <ref id="edit_headers" name="edit&lowbar;headers"> variable,
or use the <em/edit-headers/ function (default: ``E'') in the send-menu so
that you can edit the header of your message along with the body.

To remove user defined header fields, use the ``unmy&lowbar;hdr''
command.  You may specify an asterisk (``*'') to remove all header
fields, or the fields to remove.  For example, to remove all ``To'' and
``Cc'' header fields, you could use:

<quote>
unmy_hdr to cc
</quote>

<sect1>Defining the order of headers when viewing messages<label id="hdr_order">
<p>
Usage: <tt/hdr&lowbar;order/ <em/header1/ <em/header2/ <em/header3/

With this command, you can specify an order in which mutt will attempt
to present headers to you when viewing messages.

``unhdr_order *'' will clear all previous headers from the order list,
thus removing the header order effects set by the system-wide startup
file.

<tscreen><verb>
hdr&lowbar;order From Date: From: To: Cc: Subject:
</verb></tscreen>

<sect1>Specify default save filename<label id="save-hook">
<p>
Usage: <tt/save-hook/ &lsqb;!&rsqb;<em/pattern/ <em/filename/

This command is used to override the default filename used when saving
messages.  <em/filename/ will be used as the default filename if the message is
<em/From:/ an address matching <em/regexp/ or if you are the author and the
message is addressed <em/to:/ something matching <em/regexp/.

See <ref id="pattern_hook" name="Message Matching in Hooks"> for information on the exact format of <em/pattern/.

Examples:

<tscreen><verb>
save-hook me@(turing\\.)?cs\\.hmc\\.edu$ +elkins
save-hook aol\\.com$ +spam
</verb></tscreen>

Also see the <ref id="fcc-save-hook" name="fcc-save-hook"> command.

<sect1>Specify default Fcc: mailbox when composing<label id="fcc-hook">
<p>
Usage: <tt/fcc-hook/ &lsqb;!&rsqb;<em/pattern/ <em/mailbox/

This command is used to save outgoing mail in a mailbox other than
<ref id="record" name="&dollar;record">.  Mutt searches the initial list of
message recipients for the first matching <em/regexp/ and uses <em/mailbox/
as the default Fcc: mailbox.  If no match is found the message will be saved
to <ref id="record" name="&dollar;record"> mailbox.

See <ref id="pattern_hook" name="Message Matching in Hooks"> for information on the exact format of <em/pattern/.

Example: <tt/fcc-hook aol.com&dollar; +spammers/

The above will save a copy of all messages going to the aol.com domain to
the `+spammers' mailbox by default.  Also see the <ref id="fcc-save-hook" 
name="fcc-save-hook"> command.

<sect1>Specify default save filename and default Fcc: mailbox at once<label
id="fcc-save-hook">
<p>
Usage: <tt/fcc-save-hook/ &lsqb;!&rsqb;<em/pattern/ <em/mailbox/

This command is a shortcut, equivalent to doing both a <ref id="fcc-hook" name="fcc-hook">
and a <ref id="save-hook" name="save-hook"> with its arguments.

<sect1>Change settings based upon message recipients<label id="send-hook">
<p>
Usage: <tt/send-hook/ &lsqb;!&rsqb;<em/pattern/ <em/command/

This command can be used to execute arbitrary configuration commands based
upon recipients of the message.  <em/pattern/ is a regular expression
matching the desired address.  <em/command/ is executed when <em/regexp/
matches recipients of the message.  When multiple matches occur, commands are
executed in the order they are specified in the muttrc.

See <ref id="pattern_hook" name="Message Matching in Hooks"> for information on the exact format of <em/pattern/.

Example: <tt/send-hook mutt &dquot;set mime&lowbar;forward signature=''&dquot;/

Another typical use for this command is to change the values of the
<ref id="attribution" name="&dollar;attribution">, <ref id="signature"
name="&dollar;signature"> and <ref id="locale" name="&dollar;locale">
variables in order to change the language of the attributions and
signatures based upon the recipients.

<bf/Note:/ the send-hook's are only executed ONCE after getting the initial
list of recipients.  Adding a recipient after replying or editing the
message will NOT cause any send-hook to be executed.  Also note that
my_hdr commands which modify recipient headers, or the message's
subject, don't have any effect on the current message when executed
from a send-hook.

<sect1>Change settings before formatting a message<label id="message-hook">
<p>
Usage: <tt/message-hook/ &lsqb;!&rsqb;<em/pattern/ <em/command/

This command can be used to execute arbitrary configuration commands
before viewing or formatting a message based upon information about the message.
<em/command/ is executed if the <em/pattern/ matches the message to be
displayed. When multiple matches occur, commands are executed in the order
they are specified in the muttrc.

See <ref id="pattern_hook" name="Message Matching in Hooks"> for
information on the exact format of <em/pattern/.

Example:
<tscreen><verb>
message-hook ~A 'set pager=builtin'
message-hook '~f freshmeat-news' 'set pager="less \"+/^  subject: .*\""'
</verb></tscreen>

<sect1>Choosing the PGP key of the recipient<label id="pgp-hook">
<p>
Usage: <tt/pgp-hook/ <em/pattern/ <em/keyid/

When encrypting messages with PGP, you may want to associate a certain
PGP key with a given e-mail address automatically, either because the
recipient's public key can't be deduced from the destination address,
or because, for some reasons, you need to override the key Mutt would
normally use.  The pgp-hook command provides a method by which you can
specify the ID of the public key to be used when encrypting messages to
a certain recipient.

<sect1>Adding key sequences to the keyboard buffer<label id="push">
<p>
Usage: <tt/push/ <em/string/

This command adds the named string to the keyboard buffer. The string may
contain control characters, key names and function names like the sequence
string in the <ref id="macro" name="macro"> command. You may use it to
automatically run a sequence of commands at startup, or when entering
certain folders.

<sect1>Executing functions<label id="exec">
<p>
Usage: <tt/exec/ <em/function/ &lsqb; <em/function/ ... &rsqb;

This command can be used to execute any function. Functions are
listed in the <ref id="functions" name="function reference">.
``exec function'' is equivalent to ``push &lt;function&gt;''.

<sect1>Message Scoring<label id="score-command">
<p>
Usage: <tt/score/ <em/pattern/ <em/value/<newline>
Usage: <tt/unscore/ <em/pattern/ &lsqb; <em/pattern/ ... &rsqb;

The <tt/score/ commands adds <em/value/ to a message's score if <em/pattern/
matches it.  <em/pattern/ is a string in the format described in the <ref
id="patterns" name="patterns"> section (note: For efficiency reasons, patterns
which scan information not available in the index, such as <tt>&tilde;b</tt>,
<tt>&tilde;B</tt> or <tt>&tilde;h</tt>, may not be used).  <em/value/ is a
positive or negative integer.  A message's final score is the sum total of all
matching <tt/score/ entries.  However, you may optionally prefix <em/value/ with
an equal sign (=) to cause evaluation to stop at a particular entry if there is
a match.  Negative final scores are rounded up to 0.

The <tt/unscore/ command removes score entries from the list.  You <bf/must/
specify the same pattern specified in the <tt/score/ command for it to be
removed.  The pattern ``*'' is a special token which means to clear the list
of all score entries.

<sect1>Setting variables<label id="set">
<p>
Usage: <tt/set/ &lsqb;no|inv&rsqb;<em/variable/&lsqb;=<em/value/&rsqb; &lsqb; <em/variable/ ... &rsqb;<newline>
Usage: <tt/toggle/ <em/variable/ &lsqb;<em/variable/ ... &rsqb;<newline>
Usage: <tt/unset/ <em/variable/ &lsqb;<em/variable/ ... &rsqb;<newline>
Usage: <tt/reset/ <em/variable/ &lsqb;<em/variable/ ... &rsqb;

This command is used to set (and unset) <ref id="variables"
name="configuration variables">.  There are four basic types of variables:
boolean, number, string and quadoption.  <em/boolean/ variables can be
<em/set/ (true) or <em/unset/ (false).  <em/number/ variables can be
assigned a positive integer value.

<em/string/ variables consist of any number of printable characters.
<em/strings/ must be enclosed in quotes if they contain spaces or tabs.  You
may also use the ``C'' escape sequences <bf/&bsol;n/ and <bf/&bsol;t/ for
newline and tab, respectively.

<em/quadoption/ variables are used to control whether or not to be prompted
for certain actions, or to specify a default action.  A value of <em/yes/
will cause the action to be carried out automatically as if you had answered
yes to the question.  Similarly, a value of <em/no/ will cause the the
action to be carried out as if you had answered ``no.''  A value of
<em/ask-yes/ will cause a prompt with a default answer of ``yes'' and
<em/ask-no/ will provide a default answer of ``no.''

Prefixing a variable with ``no'' will unset it.  Example: <tt/set noaskbcc/.

For <em/boolean/ variables, you may optionally prefix the variable name with
<tt/inv/ to toggle the value (on or off).  This is useful when writing
macros.  Example: <tt/set invsmart&lowbar;wrap/.

The <tt/toggle/ command automatically prepends the <tt/inv/ prefix to all
specified variables.

The <tt/unset/ command automatically prepends the <tt/no/ prefix to all
specified variables.

Using the enter-command function in the <em/index/ menu, you can query the
value of a variable by prefixing the name of the variable with a question
mark:

<tscreen><verb>
set ?allow_8bit
</verb></tscreen>

The question mark is actually only required for boolean and quadoption 
variables.

The <tt/reset/ command resets all given variables to the compile time
defaults (hopefully mentioned in this manual). If you use the command
<tt/set/ and prefix the variable with ``&amp;'' this has the same
behavior as the reset command.

With the <tt/reset/ command there exists the special variable ``all'',
which allows you to reset all variables to their system defaults.

<sect1>Reading initialization commands from another file<label id="source">
<p>
Usage: <tt/source/ <em/filename/

This command allows the inclusion of initialization commands
from other files.  For example, I place all of my aliases in
<tt>&tilde;/.mail&lowbar;aliases</tt> so that I can make my
<tt>&tilde;/.muttrc</tt> readable and keep my aliases private.

If the filename begins with a tilde (``&tilde;''), it will be expanded to the
path of your home directory.

If the filename ends with a vertical bar (|), then <em/filename/ is
considered to be an executable program from which to read input (eg.
<tt/source ~/bin/myscript|/).

<sect1>Removing hooks<label id="unhook">
<p>
Usage: <tt/unhook/ &lsqb; * | <em/hook-type/ &rsqb;

This command permits you to flush hooks you have previously defined.
You can either remove all hooks by giving the ``*'' character as an
argument, or you can remove all hooks of a specific type by saying
something like <tt/unhook send-hook/.

<sect>Advanced Usage

<sect1>Regular Expressions<label id="regexp">
<p>
All string patterns in Mutt including those in more complex
<ref id="patterns" name="patterns"> must be specified
using regular expressions (regexp) in the ``POSIX extended'' syntax (which
is more or less the syntax used by egrep and GNU awk).  For your
convenience, we have included below a brief description of this syntax.

The search is case sensitive if the pattern contains at least one upper
case letter, and case insensitive otherwise. Note that ``&bsol;''
must be quoted if used for a regular expression in an initialization
command: ``&bsol;&bsol;''.

A regular expression is a pattern that describes a set of strings.
Regular expressions are constructed analogously to arithmetic
expressions, by using various operators to combine smaller expressions.

Note that the regular expression can be enclosed/delimited by either &dquot;
or ' which is useful if the regular expression includes a white-space
character.  See <ref id="muttrc-syntax" name="Syntax of Initialization Files">
for more information on &dquot; and ' delimiter processing.  To match a
literal &dquot; or ' you must preface it with \ (backslash).

The fundamental building blocks are the regular expressions that match
a single character.  Most characters, including all letters and digits,
are regular expressions that match themselves.  Any metacharacter with
special meaning may be quoted by preceding it with a backslash.

The period ``.'' matches any single character.  The caret ``&circ;'' and
the dollar sign ``&dollar'' are metacharacters that respectively match
the empty string at the beginning and end of a line.

A list of characters enclosed by ``&lsqb;'' and ``&rsqb;'' matches any
single character in that list; if the first character of the list
is a caret ``&circ;'' then it matches any character <bf/not/ in the
list.  For example, the regular expression <bf/&lsqb;0123456789&rsqb;/
matches any single digit.  A range of ASCII characters may be specified
by giving the first and last characters, separated by a hyphen
``&hyphen;''.  Most metacharacters lose their special meaning inside
lists.  To include a literal ``&rsqb;'' place it first in the list.
Similarly, to include a literal ``&circ;'' place it anywhere but first.
Finally, to include a literal hyphen ``&hyphen;'' place it last.

Certain named classes of characters are predefined.  Character classes
consist of ``&lsqb;:'', a keyword denoting the class, and ``:&rsqb;''.
The following classes are defined by the POSIX standard:

<descrip>
<tag/&lsqb;:alnum:&rsqb;/
Alphanumeric characters.
<tag/&lsqb;:alpha:&rsqb;/
Alphabetic characters.
<tag/&lsqb;:blank:&rsqb;/
Space or tab characters.
<tag/&lsqb;:cntrl:&rsqb;/
Control characters.
<tag/&lsqb;:digit:&rsqb;/
Numeric characters.
<tag/&lsqb;:graph:&rsqb;/
Characters that are both printable and visible.  (A space is printable,
but not visible, while an ``a'' is both.)
<tag/&lsqb;:lower:&rsqb;/
Lower-case alphabetic characters.
<tag/&lsqb;:print:&rsqb;/
Printable characters (characters that are not control characters.)
<tag/&lsqb;:punct:&rsqb;/
Punctuation characters (characters that are not letter, digits, control
characters, or space characters).
<tag/&lsqb;:space:&rsqb;/
Space characters (such as space, tab and formfeed, to name a few).
<tag/&lsqb;:upper:&rsqb;/
Upper-case alphabetic characters.
<tag/&lsqb;:xdigit:&rsqb;/
Characters that are hexadecimal digits.
</descrip>

A character class is only valid in a regular expression inside the
brackets of a character list.  Note that the brackets in these
class names are part of the symbolic names, and must be included
in addition to the brackets delimiting the bracket list.  For
example, <bf/&lsqb;&lsqb;:digit:&rsqb;&rsqb;/ is equivalent to
<bf/&lsqb;0-9&rsqb;/.

Two additional special sequences can appear in character lists.  These
apply to non-ASCII character sets, which can have single symbols (called
collating elements) that are represented with more than one character,
as well as several characters that are equivalent for collating or
sorting purposes:

<descrip>
<tag/Collating Symbols/
A collating symbols is a multi-character collating element enclosed in
``&lsqb;.'' and ``.&rsqb;''.  For example, if ``ch'' is a collating
element, then <bf/&lsqb;&lsqb;.ch.&rsqb;&rsqb;/ is a regexp that matches
this collating element, while <bf/&lsqb;ch&rsqb;/ is a regexp that
matches either ``c'' or ``h''.
<tag/Equivalence Classes/
An equivalence class is a locale-specific name for a list of
characters that are equivalent. The name is enclosed in ``&lsqb;=''
and ``=&rsqb;''.  For example, the name ``e'' might be used to
represent all of ``&egrave;'' ``&eacute;'' and ``e''.  In this case,
<bf/&lsqb;&lsqb;=e=&rsqb;&rsqb;/ is a regexp that matches any of
``&egrave;'', ``&eacute;'' and ``e''.
</descrip>

A regular expression matching a single character may be followed by one
of several repetition operators:

<descrip>
<tag/?/
The preceding item is optional and matched at most once.
<tag/*/
The preceding item will be matched zero or more times.
<tag/+/
The preceding item will be matched one or more times.
<tag/&lcub;n&rcub;/
The preceding item is matched exactly <em/n/ times.
<tag/&lcub;n,&rcub;/
The preceding item is matched <em/n/ or more times.
<tag/&lcub;,m&rcub;/
The preceding item is matched at most <em/m/ times.
<tag/&lcub;n,m&rcub;/
The preceding item is matched at least <em/n/ times, but no more than
<em/m/ times.
</descrip>

Two regular expressions may be concatenated; the resulting regular
expression matches any string formed by concatenating two substrings
that respectively match the concatenated subexpressions.

Two regular expressions may be joined by the infix operator ``|'';
the resulting regular expression matches any string matching either
subexpression.

Repetition takes precedence over concatenation, which in turn takes
precedence over alternation.  A whole subexpression may be enclosed in
parentheses to override these precedence rules.

<bf/Note:/ If you compile Mutt with the GNU <em/rx/ package, the
following operators may also be used in regular expressions:

<descrip>
<tag/&bsol;&bsol;y/
Matches the empty string at either the beginning or the end of a word.
<tag/&bsol;&bsol;B/
Matches the empty string within a word.
<tag/&bsol;&bsol;&lt;/
Matches the empty string at the beginning of a word.
<tag/&bsol;&bsol;&gt;/
Matches the empty string at the end of a word.
<tag/&bsol;&bsol;w/
Matches any word-constituent character (letter, digit, or underscore).
<tag/&bsol;&bsol;W/
Matches any character that is not word-constituent.
<tag/&bsol;&bsol;`/
Matches the empty string at the beginning of a buffer (string).
<tag/&bsol;&bsol;'/
Matches the empty string at the end of a buffer.
</descrip>

Please note however that these operators are not defined by POSIX, so
they may or may not be available in stock libraries on various systems.

<sect1>Patterns<label id="patterns">
<p>
Many of Mutt's commands allow you to specify a pattern to match
(limit, tag-pattern, delete-pattern, etc.).  There are several ways to select
messages:

<tscreen><verb>
~A              all messages
~b EXPR         messages which contain EXPR in the message body
~B EXPR         messages which contain EXPR in the whole message
~c USER         messages carbon-copied to USER
~C EXPR         message is either to: or cc: EXPR
~D              deleted messages
~d [MIN]-[MAX]  messages with ``date-sent'' in a Date range
~E              expired messages
~e EXPR         message which contains EXPR in the ``Sender'' field
~F              flagged messages
~f USER         messages originating from USER
~g              PGP signed messages
~G              PGP encrypted messages
~h EXPR         messages which contain EXPR in the message header
~k		message contains PGP key material
~i ID           message which match ID in the ``Message-ID'' field
~L EXPR         message is either originated or received by EXPR
~l              message is addressed to a known mailing list
~m [MIN]-[MAX]  message in the range MIN to MAX *)
~n [MIN]-[MAX]  messages with a score in the range MIN to MAX *)
~N              new messages
~O              old messages
~p              message is addressed to you (consults $alternates)
~P              message is from you (consults $alternates)
~Q              messages which have been replied to
~R              read messages
~r [MIN]-[MAX]  messages with ``date-received'' in a Date range
~S              superseded messages
~s SUBJECT      messages having SUBJECT in the ``Subject'' field.
~T              tagged messages
~t USER         messages addressed to USER
~U              unread messages
~v		message is part of a collapsed thread.
~x EXPR         messages which contain EXPR in the `References' field
~y EXPR         messages which contain EXPR in the `X-Label' field
~z [MIN]-[MAX]  messages with a size in the range MIN to MAX *)
~=		duplicated messages (see $duplicate_threads)
</verb></tscreen>

Where EXPR, USER, ID, and SUBJECT are 
<ref id="regexp" name="regular expressions">.  Special attention has to be
made when using regular expressions inside of patterns.  Specifically,
Mutt's parser for these patterns will strip one level of backslash (\),
which is normally used for quoting.  If it is your intention to use a
backslash in the regular expression, you will need to use two backslashes
instead (\\).

*) The forms <tt/&lt;&lsqb;MAX&rsqb;/, <tt/&gt;&lsqb;MIN&rsqb;/,
<tt/&lsqb;MIN&rsqb;-/ and <tt/-&lsqb;MAX&rsqb;/
are allowed, too.

<sect2>Pattern Modifier
<p>

Note that patterns matching 'lists' of addresses (notably c,C,p,P and t)
match if there is at least one match in the whole list. If you want to
make sure that all elements of that list match, you need to prefix your
pattern with ^.
This example matches all mails which only has recipients from Germany.

<tscreen><verb>
^~C \.de$
</verb></tscreen>

<sect2>Complex Patterns
<p>

Logical AND is performed by specifying more than one criterion.  For
example:

<tscreen><verb>
~t mutt ~f elkins
</verb></tscreen>

would select messages which contain the word ``mutt'' in the list of
recipients <bf/and/ that have the word ``elkins'' in the ``From'' header
field.

Mutt also recognizes the following operators to create more complex search
patterns:

<itemize>
<item>! -- logical NOT operator
<item>| -- logical OR operator
<item>() -- logical grouping operator
</itemize>

Here is an example illustrating a complex search pattern.  This pattern will
select all messages which do not contain ``mutt'' in the ``To'' or ``Cc''
field and which are from ``elkins''.

<tscreen><verb>
!(~t mutt|~c mutt) ~f elkins
</verb></tscreen>

Here is an example using white space in the regular expression (note
the ' and &dquot; delimiters).  For this to match, the mail's subject must
match the ``^Junk +From +Me$'' and it must be from either ``Jim +Somebody''
or ``Ed +SomeoneElse'':

<tscreen><verb>
 '~s "^Junk +From +Me$" ~f ("Jim +Somebody"|"Ed +SomeoneElse")'
</verb></tscreen>

Note that if a regular expression contains parenthesis, or a veritical bar
("|"), you <bf/must/ enclose the expression in double or single quotes since
those characters are also used to separate different parts of Mutt's
pattern language.  For example,

<tscreen><verb>
~f "me@(mutt\.org|cs\.hmc\.edu)"
</verb></tscreen>

Without the quotes, the parenthesis would truncate the regular expression
to simply <em/me@/, which is probably not what you want.

<sect2>Searching by Date
<p>
Mutt supports two types of dates, <em/absolute/ and <em/relative/.

<bf/Absolute/.  Dates <bf/must/ be in DD/MM/YY format (month and year are
optional, defaulting to the current month and year).  An example of a valid
range of dates is:

<tscreen><verb>
Limit to messages matching: ~d 20/1/95-31/10
</verb></tscreen>

If you omit the minimum (first) date, and just specify ``-DD/MM/YY'', all
messages <em/before/ the given date will be selected.  If you omit the maximum
(second) date, and specify ``DD/MM/YY-'', all messages <em/after/ the given
date will be selected.  If you specify a single date with no dash (``-''),
only messages sent on the given date will be selected. 

<bf/Error Margins/.  You can add error margins to absolute dates.
An error margin is a sign (+ or -), followed by a digit, followed by
one of the following units:
<verb>
y	years
m	months
w	weeks
d	days
</verb>
As a special case, you can replace the sign by a ``*'' character,
which is equivalent to giving identical plus and minus error margins.

Example: To select any messages two weeks around January 15, 2001,
you'd use the following pattern: 
<tscreen><verb> 
Limit to messages matching: ~d 15/1/2001*2w
</verb></tscreen>


<bf/Relative/.  This type of date is relative to the current date, and may
be specified as:
<itemize>
<item>&gt;<em/offset/ (messages older than <em/offset/ units)
<item>&lt;<em/offset/ (messages newer than <em/offset/ units)
<item>=<em/offset/ (messages exactly <em/offset/ units old)
</itemize>

<em/offset/ is specified as a positive number with one of the following
units:
<verb>
y       years
m       months
w       weeks
d       days
</verb>

Example: to select messages less than 1 month old, you would use
<tscreen><verb>
Limit to messages matching: ~d <1m
</verb></tscreen>



<bf/Note:/ all dates used when searching are relative to the
<bf/local/ time zone, so unless you change the setting of your <ref
id="index_format" name="&dollar;index&lowbar;format"> to include a
<tt/&percnt;&lsqb;...&rsqb;/ format, these are <bf/not/ the dates shown
in the main index.

<sect1>Using Tags
<p>

Sometimes it is desirable to perform an operation on a group of
messages all at once rather than one at a time.  An example might be
to save messages to a mailing list to a separate folder, or to
delete all messages with a given subject.  To tag all messages
matching a pattern, use the tag-pattern function, which is bound to
``shift-T'' by default.  Or you can select individual messages by
hand using the ``tag-message'' function, which is bound to ``t'' by
default.  See <ref id="patterns" name="patterns"> for Mutt's pattern
matching syntax.

Once you have tagged the desired messages, you can use the
``tag-prefix'' operator, which is the ``;'' (semicolon) key by default.
When the ``tag-prefix'' operator is used, the <bf/next/ operation will
be applied to all tagged messages if that operation can be used in that
manner.  If the <ref id="auto_tag" name="&dollar;auto&lowbar;tag">
variable is set, the next operation applies to the tagged messages
automatically, without requiring the ``tag-prefix''.

<sect1>Using Hooks<label id="hooks">
<p>
A <em/hook/ is a concept borrowed from the EMACS editor which allows you to
execute arbitrary commands before performing some operation.  For example,
you may wish to tailor your configuration based upon which mailbox you are
reading, or to whom you are sending mail.  In the Mutt world, a <em/hook/
consists of a <ref id="regexp" name="regular expression"> or
<ref id="patterns" name="pattern"> along with a
configuration option/command.  See
<itemize>
<item><ref id="folder-hook" name="folder-hook">
<item><ref id="send-hook" name="send-hook">
<item><ref id="message-hook" name="message-hook">
<item><ref id="save-hook" name="save-hook">
<item><ref id="mbox-hook" name="mbox-hook">
<item><ref id="fcc-hook" name="fcc-hook">
<item><ref id="fcc-save-hook" name="fcc-save-hook">
</itemize>
for specific details on each type of <em/hook/ available.

<bf/Note:/ if a hook changes configuration settings, these changes remain
effective until the end of the current mutt session. As this is generally
not desired, a default hook needs to be added before all other hooks to
restore configuration defaults. Here is an example with send-hook and the
my_hdr directive:

<tscreen><verb>
send-hook . 'unmy_hdr From:'
send-hook ~Cb@b.b my_hdr from: c@c.c
</verb></tscreen>

<sect2>Message Matching in Hooks<label id="pattern_hook">
<p>
Hooks that act upon messages (<tt/send-hook, save-hook, fcc-hook,
message-hook/) are evaluated in a slightly different manner.  For the other
types of hooks, a <ref id="regexp" name="regular expression"> is
sufficient.  But in dealing with messages a finer grain of control is
needed for matching since for different purposes you want to match
different criteria.

Mutt allows the use of the <ref id="patterns" name="search pattern">
language for matching messages in hook commands.  This works in
exactly the same way as it would when <em/limiting/ or
<em/searching/ the mailbox, except that you are restricted to those
operators which match information mutt extracts from the header of
the message (i.e.  from, to, cc, date, subject, etc.).

For example, if you wanted to set your return address based upon sending
mail to a specific address, you could do something like:
<tscreen><verb>
send-hook '~t ^me@cs\.hmc\.edu$' 'my_hdr From: Mutt User <user@host>'
</verb></tscreen>
which would execute the given command when sending mail to
<em/me@cs.hmc.edu/.

However, it is not required that you write the pattern to match using the
full searching language.  You can still specify a simple <em/regular
expression/ like the other hooks, in which case Mutt will translate your
pattern into the full language, using the translation specified by the 
<ref id="default_hook" name="&dollar;default&lowbar;hook"> variable.  The
pattern is translated at the time the hook is declared, so the value of 
<ref id="default_hook" name="&dollar;default&lowbar;hook"> that is in effect
at that time will be used.

<sect1>External Address Queries<label id="query">
<p>
Mutt supports connecting to external directory databases such as LDAP,
ph/qi, bbdb, or NIS through a wrapper script which connects to mutt
using a simple interface.  Using the <ref id="query_command"
name="&dollar;query&lowbar;command"> variable, you specify the wrapper
command to use.  For example:

<tscreen><verb>
set query_command = "mutt_ldap_query.pl '%s'"
</verb></tscreen>

The wrapper script should accept the query on the command-line.  It
should return a one line message, then each matching response on a
single line, each line containing a tab separated address then name then
some other optional information.  On error, or if there are no matching
addresses, return a non-zero exit code and a one line error message.

An example multiple response output:
<tscreen><verb>
Searching database ... 20 entries ... 3 matching:
me@cs.hmc.edu           Michael Elkins  mutt dude
blong@fiction.net       Brandon Long    mutt and more
roessler@guug.de        Thomas Roessler mutt pgp
</verb></tscreen>

There are two mechanisms for accessing the query function of mutt.  One
is to do a query from the index menu using the query function (default: Q).
This will prompt for a query, then bring up the query menu which will
list the matching responses.  From the query menu, you can select
addresses to create aliases, or to mail.  You can tag multiple messages
to mail, start a new query, or have a new query appended to the current
responses.

The other mechanism for accessing the query function is for address
completion, similar to the alias completion.  In any prompt for address
entry, you can use the complete-query function (default: ^T) to run a
query based on the current address you have typed.  Like aliases, mutt
will look for what you have typed back to the last space or comma.  If
there is a single response for that query, mutt will expand the address
in place.  If there are multiple responses, mutt will activate the query
menu.  At the query menu, you can select one or more addresses to be
added to the prompt.

<sect1>Mailbox Formats
<p>
Mutt supports reading and writing of four different mailbox formats:
mbox, MMDF, MH and Maildir.  The mailbox type is autodetected, so there
is no need to use a flag for different mailbox types.  When creating new
mailboxes, Mutt uses the default specified with the <ref id="mbox_type"
name="&dollar;mbox&lowbar;type"> variable.

<bf/mbox/.  This is the most widely used mailbox format for UNIX.  All
messages are stored in a single file.  Each message has a line of the form:

<tscreen><verb>
From me@cs.hmc.edu Fri, 11 Apr 1997 11:44:56 PST
</verb></tscreen>

to denote the start of a new message (this is often referred to as the
``From&lowbar;'' line).

<bf/MMDF/.  This is a variant of the <em/mbox/ format.  Each message is
surrounded by lines containing ``^A^A^A^A'' (four control-A's).

<bf/MH/. A radical departure from <em/mbox/ and <em/MMDF/, a mailbox
consists of a directory and each message is stored in a separate file.
The filename indicates the message number (however, this is may not
correspond to the message number Mutt displays). Deleted messages are
renamed with a comma (,) prepended to the filename. <bf/Note:/ Mutt
detects this type of mailbox by looking for either <tt/.mh&lowbar;sequences/
or <tt/.xmhcache/ (needed to distinguish normal directories from MH
mailboxes).

<bf/Maildir/.  The newest of the mailbox formats, used by the Qmail MTA (a
replacement for sendmail).  Similar to <em/MH/, except that it adds three
subdirectories of the mailbox: <em/tmp/, <em/new/ and <em/cur/.  Filenames
for the messages are chosen in such a way they are unique, even when two
programs are writing the mailbox over NFS, which means that no file locking
is needed.

<sect1>Mailbox Shortcuts<label id="shortcuts">
<p>
There are a number of built in shortcuts which refer to specific mailboxes.
These shortcuts can be used anywhere you are prompted for a file or mailbox
path.

<itemize>
<item>! -- refers to your <ref id="spoolfile" name="&dollar;spoolfile"> (incoming) mailbox
<item>&gt; -- refers to your <ref id="mbox" name="&dollar;mbox"> file
<item>&lt; -- refers to your <ref id="record" name="&dollar;record"> file
<item>- or !! -- refers to the file you've last visited
<item>&tilde; -- refers to your home directory
<item>= or + -- refers to your <ref id="folder" name="&dollar;folder"> directory
<item>@<em/alias/ -- refers to the <ref id="save-hook" 
name="default save folder"> as determined by the address of the alias
</itemize>

<sect1>Handling Mailing Lists<label id="using_lists">
<p>

Mutt has a few configuration options that make dealing with large
amounts of mail easier.  The first thing you must do is to let Mutt
know what addresses you consider to be mailing lists (technically
this does not have to be a mailing list, but that is what it is most
often used for), and what lists you are subscribed to.  This is
accomplished through the use of the <ref id="lists"
name="lists and subscribe"> commands in your muttrc.

Now that Mutt knows what your mailing lists are, it can do several
things, the first of which is the ability to show the name of a list
through which you received a message (i.e., of a subscribed list) in
the <em/index/ menu display.  This is useful to distinguish between
personal and list mail in the same mailbox.  In the <ref id="index_format"
name="&dollar;index&lowbar;format"> variable, the escape ``&percnt;L''
will return the string ``To &lt;list&gt;'' when ``list'' appears in the
``To'' field, and ``Cc &lt;list&gt;'' when it appears in the ``Cc''
field (otherwise it returns the name of the author).

Often times the ``To'' and ``Cc'' fields in mailing list messages
tend to get quite large. Most people do not bother to remove the
author of the message they are reply to from the list, resulting in
two or more copies being sent to that person.  The ``list-reply''
function, which by default is bound to ``L'' in the <em/index/ menu
and <em/pager/, helps reduce the clutter by only replying to the
known mailing list addresses instead of all recipients (except as
specified by <tt/Mail-Followup-To/, see below).

Mutt also supports the <tt/Mail-Followup-To/ header.  When you send
a message to a list of recipients which includes one or several
subscribed mailing lists, and if the <ref id="followup_to"
name="&dollar;followup&lowbar;to"> option is set, mutt will generate
a Mail-Followup-To header which contains all the recipients to whom
you send this message, but not your address. This indicates that
group-replies or list-replies (also known as ``followups'') to this
message should only be sent to the original recipients of the
message, and not separately to you - you'll receive your copy through
one of the mailing lists you are subscribed to.

Conversely, when group-replying or list-replying to a message which
has a <tt/Mail-Followup-To/ header, mutt will respect this header if
the <ref id="honor_followup_to"
name="&dollar;honor&lowbar;followup&lowbar;to"> configuration
variable is set.  Using list-reply will in this case also make sure
that the reply goes to the mailing list, even if it's not specified
in the list of recipients in the <tt/Mail-Followup-To/.

Note that, when header editing is enabled, you can create a
<tt/Mail-Followup-To/ header manually.  Mutt will only auto-generate
this header if it doesn't exist when you send the message.


The other method some mailing list admins use is to generate a
``Reply-To'' field which points back to the mailing list address rather
than the author of the message.  This can create problems when trying
to reply directly to the author in private, since most mail clients
will automatically reply to the address given in the ``Reply-To''
field.  Mutt uses the <ref id="reply_to" name="&dollar;reply&lowbar;to">
variable to help decide which address to use.  If set, you will be
prompted as to whether or not you would like to use the address given in
the ``Reply-To'' field, or reply directly to the address given in the
``From'' field.  When unset, the ``Reply-To'' field will be used when
present.

The ``X-Label:'' header field can be used to further identify mailing
lists or list subject matter (or just to annotate messages
individually).  The <ref id="index_format"
name="&dollar;index&lowbar;format"> variable's ``&percnt;y'' and
``&percnt;Y'' escapes can be used to expand ``X-Label:'' fields in the
index, and Mutt's pattern-matcher can match regular expressions to
``X-Label:'' fields with the ``~y'' selector.  ``X-Label:'' is not a
standard message header field, but it can easily be inserted by procmail
and other mail filtering agents.

Lastly, Mutt has the ability to <ref id="sort" name="sort"> the mailbox into
<ref id="threads" name="threads">.  A thread is a group of messages which all relate to the same
subject.  This is usually organized into a tree-like structure where a
message and all of its replies are represented graphically.  If you've ever
used a threaded news client, this is the same concept.  It makes dealing
with large volume mailing lists easier because you can easily delete
uninteresting threads and quickly find topics of value.

<sect1>Delivery Status Notification (DSN) Support
<p>
RFC1894 defines a set of MIME content types for relaying information
about the status of electronic mail messages.  These can be thought of as
``return receipts.'' Berkeley sendmail 8.8.x currently has some command
line options in which the mail client can make requests as to what type
of status messages should be returned.

To support this, there are two variables. <ref id="dsn_notify"
name="&dollar;dsn&lowbar;notify"> is used to request receipts for
different results (such as failed message, message delivered, etc.).
<ref id="dsn_return" name="&dollar;dsn&lowbar;return"> requests how much
of your message should be returned with the receipt (headers or full
message).  Refer to the man page on sendmail for more details on DSN.

<sect1>POP3 Support (OPTIONAL)
<p>

If Mutt was compiled with POP3 support (by running the <em/configure/
script with the <em/--enable-pop/ flag), it has the ability to work
with mailboxes located on a remote POP3 server and fetch mail for local
browsing.

You can access the remote POP3 mailbox by selecting the folder
<tt>pop://popserver/</tt>.

You can select an alternative port by specifying it with the server, ie:
<tt>pop://popserver:port/</tt>.

You can also specify different username for each folder, ie:
<tt>pop://username@popserver[:port]/</tt>.

Polling for new mail is more expensive over POP3 than locally. For this
reason the frequency at which Mutt will check for mail remotely can be
controlled by the
<ref id="pop&lowbar;checkinterval" name="&dollar;pop&lowbar;checkinterval">
variable, which defaults to every 60 seconds.

If Mutt was compiled with SSL support (by running the <em/configure/
script with the <em/--with-ssl/ flag), connections to POP3 servers
can be encrypted. This naturally requires that the server supports
SSL encrypted connections. To access a folder with POP3/SSL, you should
use pops: prefix, ie:
<tt>pops://[username@]popserver[:port]/</tt>.

Another way to access your POP3 mail is the <em/fetch-mail/ function
(default: G).  It allows to connect to <ref id="pop_host"
name="pop&lowbar;host">, fetch all your new mail and place it in the
local <ref id="spoolfile" name="spoolfile">.  After this
point, Mutt runs exactly as if the mail had always been local.

<bf/Note:/ If you only need to fetch all messages to local mailbox
you should consider using a specialized program, such as <htmlurl
url="http://www.ccil.org/~esr/fetchmail" name="fetchmail">

<sect1>IMAP Support (OPTIONAL)
<p>

If Mutt was compiled with IMAP support (by running the <em/configure/
script with the <em/--enable-imap/ flag), it has the ability to work
with folders located on a remote IMAP server.

You can access the remote inbox by selecting the folder
<tt>imap://imapserver/INBOX</tt>, where <tt/imapserver/ is the name of the
IMAP server and <tt/INBOX/ is the special name for your spool mailbox on
the IMAP server. If you want to access another mail folder at the IMAP
server, you should use <tt>imap://imapserver/path/to/folder</tt> where
<tt>path/to/folder</tt> is the path of the folder you want to access.

You can select an alternative port by specifying it with the server, ie:
<tt>imap://imapserver:port/INBOX</tt>.

You can also specify different username for each folder, ie:
<tt>imap://username@imapserver[:port]/INBOX</tt>.

If Mutt was compiled with SSL support (by running the <em/configure/
script with the <em/--with-ssl/ flag), connections to IMAP servers
can be encrypted. This naturally requires that the server supports
SSL encrypted connections. To access a folder with IMAP/SSL, you should
use <tt>imaps://[username@]imapserver[:port]/path/to/folder</tt> as your 
folder path.

Pine-compatible notation is also supported, ie
<tt>{[username@]imapserver[:port][/ssl]}path/to/folder</tt>

Note that not all servers use / as the hierarchy separator.  Mutt should
correctly notice which separator is being used by the server and convert
paths accordingly.

When browsing folders on an IMAP server, you can toggle whether to look
at only the folders you are subscribed to, or all folders with the
<em/toggle-subscribed/ command.  See also the 
<ref id="imap&lowbar;list&lowbar;subscribed"
name="&dollar;imap&lowbar;list&lowbar;subscribed"> variable.

Polling for new mail on an IMAP server can cause noticeable delays. So, you'll
want to carefully tune the
<ref id="mail&lowbar;check" name="&dollar;mail&lowbar;check">
and
<ref id="timeout" name="&dollar;timeout">
variables. Personally I use
<tscreen><verb>
set mail_check=90
set timeout=15
</verb></tscreen>
with relatively good results over my slow modem line.

Note that if you are using mbox as the mail store on UW servers prior to
v12.250, the server has been reported to disconnect a client if another client
selects the same folder.

<sect2>The Folder Browser
<p>

As of version 1.2, mutt supports browsing mailboxes on an IMAP
server. This is mostly the same as the local file browser, with the
following differences:
<itemize>
<item>In lieu of file permissions, mutt displays the string "IMAP",
  possibly followed by the symbol "+", indicating
  that the entry contains both messages and subfolders. On
  Cyrus-like servers folders will often contain both messages and
  subfolders. 
<item>For the case where an entry can contain both messages and
  subfolders, the selection key (bound to <tt>enter</tt> by default)
  will choose to descend into the subfolder view. If you wish to view
  the messages in that folder, you must use <tt>view-file</tt> instead
  (bound to <tt>space</tt> by default).
<item>You can delete mailboxes with the <tt>delete-mailbox</tt>
  command (bound to <tt>d</tt> by default. You may also
  <tt>subscribe</tt> and <tt>unsubscribe</tt> to mailboxes (normally
  these are bound to <tt>s</tt> and <tt>u</tt>, respectively).
</itemize>

<sect2>Authentication
<p>

Mutt supports four authentication methods with IMAP servers: SASL,
GSSAPI, CRAM-MD5, and LOGIN (there is a patch by Grant Edwards to add
NTLM authentication for you poor exchange users out there, but it has
yet to be integrated into the main tree). There is also support for
the pseudo-protocol ANONYMOUS, which allows you to log in to a public
IMAP server without having an account. To use ANONYMOUS, simply make
your username blank or "anonymous".
<p>
SASL is a special super-authenticator, which selects among several protocols
(including GSSAPI, CRAM-MD5, ANONYMOUS, and DIGEST-MD5) the most secure
method available on your host and the server. Using some of these methods
(including DIGEST-MD5 and possibly GSSAPI), your entire session will be
encrypted and invisible to those teeming network snoops. It is the best
option if you have it. To use it, you must have the Cyrus SASL library
installed on your system and compile mutt with the <em/--with-sasl/ flag.
<p>
Mutt will try whichever methods are compiled in and available on the server,
in the following order: SASL, ANONYMOUS, GSSAPI, CRAM-MD5, LOGIN.

There are a few variables which control authentication: 
<itemize>
<item><ref id="imap&lowbar;user" name="&dollar;imap&lowbar;user"> - controls
  the username under which you request authentication on the IMAP server,
  for all authenticators. This is overridden by an explicit username in
  the mailbox path (ie by using a mailbox name of the form
  <tt/{user@host}/).
<item><ref id="imap&lowbar;pass" name="&dollar;imap&lowbar;pass"> - a
  password which you may preset, used by all authentication methods where
  a password is needed.
<item><ref id="imap&lowbar;authenticators"
  name="&dollar;imap&lowbar;authenticators"> - a colon-delimited list of IMAP
  authentication methods to try, in the order you wish to try them. If
  specified, this overrides mutt's default (attempt everything, in the order
  listed above).
</itemize>

<sect1>Managing multiple IMAP/POP accounts (OPTIONAL)<label id="account-hook">
<p>

If you happen to have accounts on multiple IMAP and/or POP servers,
you may find managing all the authentication settings inconvenient and
error-prone.  The account-hook command may help. This hook works like
folder-hook but is invoked whenever you access a remote mailbox
(including inside the folder browser), not just when you open the
mailbox.
<p>
Some examples:

<tscreen><verb>
account-hook . 'unset imap_user; unset imap_pass; unset tunnel'
account-hook imap://host1/ 'set imap_user=me1 imap_pass=foo'
account-hook imap://host2/ 'set tunnel="ssh host2 /usr/libexec/imapd"'
</verb></tscreen>

<sect1>Start a WWW Browser on URLs (EXTERNAL)<label id="urlview">
<p>
If a message contains URLs (<em/unified ressource locator/ = address in the
WWW space like <em>http://www.mutt.org/</em>), it is efficient to get
a menu with all the URLs and start a WWW browser on one of them.  This
functionality is provided by the external urlview program which can be
retrieved at <htmlurl url="ftp://ftp.guug.de/pub/mutt/contrib/"
name="ftp://ftp.guug.de/pub/mutt/contrib/"> and the configuration commands:
<tscreen><verb>
macro index \cb |urlview\n
macro pager \cb |urlview\n
</verb></tscreen>

<sect>Mutt's MIME Support
<p>
Quite a bit of effort has been made to make Mutt the premier text-mode
MIME MUA.  Every effort has been made to provide the functionality that
the discerning MIME user requires, and the conformance to the standards
wherever possible.  When configuring Mutt for MIME, there are two extra
types of configuration files which Mutt uses.  One is the
<tt/mime.types/ file, which contains the mapping of file extensions to 
IANA MIME types.  The other is the <tt/mailcap/ file, which specifies
the external commands to use for handling specific MIME types.

<sect1>Using MIME in Mutt
<p>
There are three areas/menus in Mutt which deal with MIME, they are the
pager (while viewing a message), the attachment menu and the compose
menu.

<sect2>Viewing MIME messages in the pager
<p>
When you select a message from the index and view it in the pager, Mutt
decodes the message to a text representation.  Mutt internally supports
a number of MIME types, including <tt>text/plain, text/enriched,
message/rfc822, and message/news</tt>.  In addition, the export
controlled version of Mutt recognizes a variety of PGP MIME types,
including PGP/MIME and application/pgp.

Mutt will denote attachments with a couple lines describing them.
These lines are of the form:
<tscreen><verb>
[-- Attachment #1: Description --]
[-- Type: text/plain, Encoding: 7bit, Size: 10000 --]
</verb></tscreen>
Where the <tt/Description/ is the description or filename given for the
attachment, and the <tt/Encoding/ is one of
<tt>7bit/8bit/quoted-printable/base64/binary</tt>.

If Mutt cannot deal with a MIME type, it will display a message like:
<tscreen><verb>
[-- image/gif is unsupported (use 'v' to view this part) --]
</verb></tscreen>

<sect2>The Attachment Menu<label id="attach_menu">
<p>
The default binding for <tt/view-attachments/ is `v', which displays the
attachment menu for a message.  The attachment menu displays a list of
the attachments in a message.  From the attachment menu, you can save,
print, pipe, delete, and view attachments.  You can apply these
operations to a group of attachments at once, by tagging the attachments
and by using the ``tag-prefix'' operator.  You can also reply to the
current message from this menu, and only the current attachment (or the
attachments tagged) will be quoted in your reply.  You can view
attachments as text, or view them using the mailcap viewer definition.

Finally, you can apply the usual message-related functions (like 
<ref id="resend-message" name="resend-message">, and the reply
and forward functions) to attachments of type <tt>message/rfc822</tt>.

See the help on the attachment menu for more information.

<sect2>The Compose Menu<label id="compose_menu">
<p>
The compose menu is the menu you see before you send a message.  It
allows you to edit the recipient list, the subject, and other aspects
of your message.  It also contains a list of the attachments of your
message, including the main body.  From this menu, you can print, copy,
filter, pipe, edit, compose, review, and rename an attachment or a
list of tagged attachments.  You can also modifying the attachment
information, notably the type, encoding and description.

Attachments appear as follows:
<verb>
-   1 [text/plain, 7bit, 1K]             /tmp/mutt-euler-8082-0 <no description>
    2 [applica/x-gunzip, base64, 422K]   ~/src/mutt-0.85.tar.gz <no description>
</verb>

The '-' denotes that Mutt will delete the file after sending (or
postponing, or cancelling) the message.  It can be toggled with the
<tt/toggle-unlink/ command (default: u).  The next field is the MIME
content-type, and can be changed with the <tt/edit-type/ command
(default: ^T).  The next field is the encoding for the attachment,
which allows a binary message to be encoded for transmission on 7bit
links.  It can be changed with the <tt/edit-encoding/ command
(default: ^E).  The next field is the size of the attachment,
rounded to kilobytes or megabytes.  The next field is the filename,
which can be changed with the <tt/rename-file/ command (default: R).
The final field is the description of the attachment, and can be
changed with the <tt/edit-description/ command (default: d).

<sect1>MIME Type configuration with <tt/mime.types/
<p>
When you add an attachment to your mail message, Mutt searches your
personal mime.types file at <tt>&dollar;{HOME}/.mime.types</tt>, and then
the system mime.types file at <tt>/usr/local/share/mutt/mime.types</tt> or
<tt>/etc/mime.types</tt>

The mime.types file consist of lines containing a MIME type and a space
separated list of extensions.  For example:
<tscreen><verb>
application/postscript          ps eps
application/pgp                 pgp
audio/x-aiff                    aif aifc aiff
</verb></tscreen>
A sample <tt/mime.types/ file comes with the Mutt distribution, and
should contain most of the MIME types you are likely to use.  

If Mutt can not determine the mime type by the extension of the file you
attach, it will look at the file.  If the file is free of binary
information, Mutt will assume that the file is plain text, and mark it
as <tt>text/plain</tt>.  If the file contains binary information, then Mutt will
mark it as <tt>application/octet-stream</tt>.  You can change the MIME
type that Mutt assigns to an attachment by using the <tt/edit-type/
command from the compose menu (default: ^T). The MIME type is actually a
major mime type followed by the sub-type, separated by a '/'. 6 major
types: application, text, image, video, audio, and model have been approved
after various internet discussions. Mutt recognises all of these if the 
appropriate entry is found in the mime.types file. It also recognises other
major mime types, such as the chemical type that is widely used in the 
molecular modelling community to pass molecular data in various forms to 
various molecular viewers. Non-recognised mime types should only be used 
if the recipient of the message is likely to be expecting such attachments.

<sect1>MIME Viewer configuration with <tt/mailcap/
<p>
Mutt supports RFC 1524 MIME Configuration, in particular the Unix
specific format specified in Appendix A of RFC 1524.  This file format
is commonly referred to as the mailcap format.  Many MIME compliant
programs utilize the mailcap format, allowing you to specify handling
for all MIME types in one place for all programs.  Programs known to
use this format include Netscape, XMosaic, lynx and metamail.

In order to handle various MIME types that Mutt can not handle
internally, Mutt parses a series of external configuration files to
find an external handler.  The default search string for these files
is a colon delimited list set to
<tscreen><verb>
${HOME}/.mailcap:/usr/local/share/mutt/mailcap:/etc/mailcap:/etc/mailcap:/usr/etc/mailcap:/usr/local/etc/mailcap
</verb></tscreen>
where <tt/&dollar;HOME/ is your home directory.

In particular, the metamail distribution will install a mailcap file,
usually as <tt>/usr/local/etc/mailcap</tt>, which contains some baseline
entries.

<sect2>The Basics of the mailcap file
<p>
A mailcap file consists of a series of lines which are comments, blank,
or definitions.

A comment line consists of a &num; character followed by anything you want.

A blank line is blank.

A definition line consists of a content type, a view command, and any
number of optional fields.  Each field of a definition line is divided
by a semicolon ';' character.

The content type is specified in the MIME standard type/subtype method.
For example,
<tt>text/plain, text/html, image/gif, </tt>
etc.  In addition, the mailcap format includes two formats for
wildcards, one using the special '*' subtype, the other is the implicit
wild, where you only include the major type.  For example, <tt>image/*</tt>, or
<tt>video,</tt> will match all image types and video types,
respectively.

The view command is a Unix command for viewing the type specified. There
are two different types of commands supported. The default is to send
the body of the MIME message to the command on stdin. You can change
this behaviour by using &percnt;s as a parameter to your view command.
This will cause Mutt to save the body of the MIME message to a temporary
file, and then call the view command with the &percnt;s replaced by
the name of the temporary file. In both cases, Mutt will turn over the
terminal to the view program until the program quits, at which time Mutt
will remove the temporary file if it exists.

So, in the simplest form, you can send a text/plain message to the
external pager more on stdin:
<tscreen><verb>
text/plain; more
</verb></tscreen>
Or, you could send the message as a file:
<tscreen><verb>
text/plain; more %s
</verb></tscreen>
Perhaps you would like to use lynx to interactively view a text/html 
message:
<tscreen><verb>
text/html; lynx %s
</verb></tscreen>
In this case, lynx does not support viewing a file from stdin, so you
must use the &percnt;s syntax.
<bf/Note:/ <em>Some older versions of lynx contain a bug where they
will check the mailcap file for a viewer for text/html.  They will find
the line which calls lynx, and run it.  This causes lynx to continuously
spawn itself to view the object.</em>

On the other hand, maybe you don't want to use lynx interactively, you
just want to have it convert the text/html to text/plain, then you can
use:
<tscreen><verb>
text/html; lynx -dump %s | more
</verb></tscreen>

Perhaps you wish to use lynx to view text/html files, and a pager on
all other text formats, then you would use the following:
<tscreen><verb>
text/html; lynx %s
text/*; more
</verb></tscreen>
This is the simplest form of a mailcap file.

<sect2>Secure use of mailcap
<p>
The interpretion of shell meta-characters embedded in MIME parameters
can lead to security problems in general.  Mutt tries to quote parameters
in expansion of %s syntaxes properly, and avoids risky characters by
substituting them, see the <ref id="mailcap_sanitize"
name="mailcap&lowbar;sanitize"> variable.

Although mutt's procedures to invoke programs with mailcap seem to be
safe, there are other applications parsing mailcap, maybe taking less care
of it.  Therefore you should pay attention to the following rules:

<em/Keep the %-expandos away from shell quoting./
Don't quote them with single or double quotes.  Mutt does this for
you, the right way, as should any other program which interprets
mailcap.  Don't put them into backtick expansions.  Be highly careful
with eval statements, and avoid them if possible at all.  Trying to fix
broken behaviour with quotes introduces new leaks - there is no
alternative to correct quoting in the first place.

If you have to use the %-expandos' values in context where you need
quoting or backtick expansions, put that value into a shell variable
and reference the shell variable where necessary, as in the following
example (using <tt/&dollar;charset/ inside the backtick expansion is safe,
since it is not itself subject to any further expansion):

<tscreen><verb>
text/test-mailcap-bug; cat %s; copiousoutput; test=charset=%{charset} \
        && test "`echo $charset | tr '[A-Z]' '[a-z]'`" != iso-8859-1
</verb></tscreen>

<sect2>Advanced mailcap Usage
<p>

<sect3>Optional Fields
<p>
In addition to the required content-type and view command fields, you
can add semi-colon ';' separated fields to set flags and other options.
Mutt recognizes the following optional fields:
<descrip>
<tag/copiousoutput/
This flag tells Mutt that the command passes possibly large amounts of
text on stdout.  This causes Mutt to invoke a pager (either the internal
pager or the external pager defined by the pager variable) on the output
of the view command.  Without this flag, Mutt assumes that the command
is interactive.  One could use this to replace the pipe to <tt>more</tt>
in the <tt>lynx -dump</tt> example in the Basic section:
<tscreen><verb>
text/html; lynx -dump %s ; copiousoutput
</verb></tscreen>
This will cause lynx to format the text/html output as text/plain
and Mutt will use your standard pager to display the results.
<tag/needsterminal/
Mutt uses this flag when viewing attachments with <ref id="auto_view"
name="autoview">, in order to decide whether it should honor the setting
of the <ref id="wait_key" name="&dollar;wait&lowbar;key"> variable or
not.  When an attachment is viewed using an interactive program, and the
corresponding mailcap entry has a <em/needsterminal/ flag, Mutt will use
<ref id="wait_key" name="&dollar;wait&lowbar;key"> and the exit status
of the program to decide if it will ask you to press a key after the
external program has exited.  In all other situations it will not prompt
you for a key.
<tag>compose=&lt;command&gt;</tag>
This flag specifies the command to use to create a new attachment of a
specific MIME type.  Mutt supports this from the compose menu.
<tag>composetyped=&lt;command&gt;</tag>
This flag specifies the command to use to create a new attachment of a
specific MIME type.  This command differs from the compose command in
that mutt will expect standard MIME headers on the data.  This can be
used to specify parameters, filename, description, etc. for a new
attachment.   Mutt supports this from the compose menu.
<tag>print=&lt;command&gt;</tag>
This flag specifies the command to use to print a specific MIME type.
Mutt supports this from the attachment and compose menus.
<tag>edit=&lt;command&gt;</tag>
This flag specifies the command to use to edit a specific MIME type.  
Mutt supports this from the compose menu, and also uses it to compose
new attachments.  Mutt will default to the defined editor for text
attachments.
<tag>nametemplate=&lt;template&gt;</tag>
This field specifies the format for the file denoted by &percnt;s in the
command fields.  Certain programs will require a certain file extension,
for instance, to correctly view a file.  For instance, lynx will only
interpret a file as <tt>text/html</tt> if the file ends in <tt/.html/.
So, you would specify lynx as a <tt>text/html</tt> viewer with a line in
the mailcap file like:
<tscreen><verb>
text/html; lynx %s; nametemplate=%s.html
</verb></tscreen>
<tag>test=&lt;command&gt;</tag>
This field specifies a command to run to test whether this mailcap
entry should be used.  The command is defined with the command expansion
rules defined in the next section.  If the command returns 0, then the
test passed, and Mutt uses this entry.  If the command returns non-zero,
then the test failed, and Mutt continues searching for the right entry.
<bf/Note:/ <em>the content-type must match before Mutt performs the test.</em>
For example:
<tscreen><verb>
text/html; netscape -remote 'openURL(%s)' ; test=RunningX
text/html; lynx %s
</verb></tscreen>
In this example, Mutt will run the program RunningX which will return 0
if the X Window manager is running, and non-zero if it isn't.  If
RunningX returns 0, then Mutt will call netscape to display the
text/html object.  If RunningX doesn't return 0, then Mutt will go on
to the next entry and use lynx to display the text/html object.
</descrip>

<sect3>Search Order
<p>
When searching for an entry in the mailcap file, Mutt will search for
the most useful entry for its purpose.  For instance, if you are
attempting to print an <tt>image/gif</tt>, and you have the following
entries in your mailcap file, Mutt will search for an entry with the
print command:
<tscreen><verb>
image/*;        xv %s
image/gif;      ; print= anytopnm %s | pnmtops | lpr; \
                nametemplate=%s.gif
</verb></tscreen>
Mutt will skip the <tt>image/*</tt> entry and use the <tt>image/gif</tt>
entry with the print command.

In addition, you can use this with <ref id="auto_view" name="Autoview"> 
to denote two commands for viewing an attachment, one to be viewed
automatically, the other to be viewed interactively from the attachment
menu.  In addition, you can then use the test feature to determine which
viewer to use interactively depending on your environment.
<tscreen><verb>
text/html;      netscape -remote 'openURL(%s)' ; test=RunningX
text/html;      lynx %s; nametemplate=%s.html
text/html;      lynx -dump %s; nametemplate=%s.html; copiousoutput
</verb></tscreen>
For <ref id="auto_view" name="Autoview">, Mutt will choose the third
entry because of the copiousoutput tag.  For interactive viewing, Mutt
will run the program RunningX to determine if it should use the first
entry.  If the program returns non-zero, Mutt will use the second entry
for interactive viewing.

<sect3>Command Expansion
<p>
The various commands defined in the mailcap files are passed to the
<tt>/bin/sh</tt> shell using the system() function.  Before the
command is passed to <tt>/bin/sh -c</tt>, it is parsed to expand
various special parameters with information from Mutt.  The keywords
Mutt expands are:
<descrip>
<tag/&percnt;s/
As seen in the basic mailcap section, this variable is expanded
to a filename specified by the calling program.  This file contains
the body of the message to view/print/edit or where the composing
program should place the results of composition.  In addition, the
use of this keyword causes Mutt to not pass the body of the message
to the view/print/edit program on stdin.
<tag/&percnt;t/
Mutt will expand &percnt;t to the text representation of the content
type of the message in the same form as the first parameter of the
mailcap definition line, ie <tt>text/html</tt> or
<tt>image/gif</tt>.
<tag>&percnt;{&lt;parameter&gt;}</tag>
Mutt will expand this to the value of the specified parameter
from the Content-Type: line of the mail message.  For instance, if
Your mail message contains:
<tscreen><verb>
Content-Type: text/plain; charset=iso-8859-1
</verb></tscreen>
then Mutt will expand &percnt;{charset} to iso-8859-1.  The default metamail
mailcap file uses this feature to test the charset to spawn an xterm
using the right charset to view the message.
<tag>&bsol;&percnt;</tag>
This will be replaced by a &percnt;
</descrip>
Mutt does not currently support the &percnt;F and &percnt;n keywords
specified in RFC 1524.  The main purpose of these parameters is for
multipart messages, which is handled internally by Mutt.

<sect2>Example mailcap files
<p>
This mailcap file is fairly simple and standard:
<code>
# I'm always running X :)
video/*;        xanim %s > /dev/null
image/*;        xv %s > /dev/null

# I'm always running netscape (if my computer had more memory, maybe)
text/html;      netscape -remote 'openURL(%s)'
</code>

This mailcap file shows quite a number of examples:

<code>
# Use xanim to view all videos   Xanim produces a header on startup,
# send that to /dev/null so I don't see it
video/*;        xanim %s > /dev/null

# Send html to a running netscape by remote
text/html;      netscape -remote 'openURL(%s)'; test=RunningNetscape

# If I'm not running netscape but I am running X, start netscape on the
# object
text/html;      netscape %s; test=RunningX

# Else use lynx to view it as text
text/html;      lynx %s

# This version would convert the text/html to text/plain
text/html;      lynx -dump %s; copiousoutput

# enriched.sh converts text/enriched to text/html and then uses 
# lynx -dump to convert it to text/plain
text/enriched;  enriched.sh ; copiousoutput

# I use enscript to print text in two columns to a page
text/*;         more %s; print=enscript -2Gr %s

# Netscape adds a flag to tell itself to view jpegs internally
image/jpeg;xv %s; x-mozilla-flags=internal

# Use xv to view images if I'm running X
# In addition, this uses the \ to extend the line and set my editor
# for images
image/*;xv %s; test=RunningX; \
        edit=xpaint %s

# Convert images to text using the netpbm tools
image/*;  (anytopnm %s | pnmscale -xysize 80 46 | ppmtopgm | pgmtopbm |
pbmtoascii -1x2 ) 2>&1 ; copiousoutput

# Send excel spreadsheets to my NT box
application/ms-excel; open.pl %s
</code>

<sect1>MIME Autoview<label id="auto_view">
<p>
In addition to explicitly telling Mutt to view an attachment with the
MIME viewer defined in the mailcap file, Mutt has support for
automatically viewing MIME attachments while in the pager.

To work, you must define a viewer in the mailcap file which uses the 
<tt/copiousoutput/ option to denote that it is non-interactive.
Usually, you also use the entry to convert the attachment to a text
representation which you can view in the pager.

You then use the <tt/auto&lowbar;view/ muttrc command to list the
content-types that you wish to view automatically.

For instance, if you set auto&lowbar;view to:
<tscreen><verb>
auto_view text/html text/enriched application/x-gunzip application/postscript image/gif application/x-tar-gz
</verb></tscreen>

Mutt could use the following mailcap entries to automatically view
attachments of these types.
<tscreen><verb>
text/html;      lynx -dump %s; copiousoutput; nametemplate=%s.html
text/enriched;  enriched.sh  ; copiousoutput
image/*;        anytopnm %s | pnmscale -xsize 80 -ysize 50 | ppmtopgm | pgmtopbm | pbmtoascii ; copiousoutput
application/x-gunzip;   gzcat; copiousoutput
application/x-tar-gz; gunzip -c %s | tar -tf - ; copiousoutput
application/postscript; ps2ascii %s; copiousoutput
</verb></tscreen>

<sect1>MIME Multipart/Alternative<label id="alternative_order">
<p>
Mutt has some heuristics for determining which attachment of a
multipart/alternative type to display.  First, mutt will check the 
alternative&lowbar;order list to determine if one of the available types
is preferred.  The alternative&lowbar;order list consists of a number of
mimetypes in order, including support for implicit and explicit
wildcards, for example:
<tscreen><verb>
alternative_order text/enriched text/plain text application/postscript image/*
</verb></tscreen>

Next, mutt will check if any of the types have a defined 
<ref id="auto_view" name="auto&lowbar;view">, and use that.  Failing
that, Mutt will look for any text type.  As a last attempt, mutt will
look for any type it knows how to handle.

<sect>Reference
<sect1>Command line options<label id="commandline">
<p>
Running <tt/mutt/ with no arguments will make Mutt attempt to read your spool
mailbox.  However, it is possible to read other mailboxes and
to send messages from the command line as well.

<tscreen><verb>
-a      attach a file to a message
-b      specify a blind carbon-copy (BCC) address
-c      specify a carbon-copy (Cc) address
-e      specify a config command to be run after initilization files are read
-f      specify a mailbox to load
-F      specify an alternate file to read initialization commands
-h      print help on command line options
-H      specify a draft file from which to read a header and body
-i      specify a file to include in a message composition
-m      specify a default mailbox type
-n      do not read the system Muttrc
-p      recall a postponed message
-R      open mailbox in read-only mode
-s      specify a subject (enclose in quotes if it contains spaces)
-v      show version number and compile-time definitions
-x      simulate the mailx(1) compose mode
-y      show a menu containing the files specified by the mailboxes command
-z      exit immediately if there are no messages in the mailbox
-Z      open the first folder with new message,exit immediately if none
</verb></tscreen>

To read messages in a mailbox

<tt/mutt/ &lsqb; -nz &rsqb; &lsqb; -F <em/muttrc/ &rsqb; &lsqb; -m <em/type/ &rsqb; &lsqb; -f <em/mailbox/ &rsqb; 

To compose a new message

<tt/mutt/ &lsqb; -n &rsqb; &lsqb; -F <em/muttrc/ &rsqb; &lsqb; -a <em/file/ &rsqb; &lsqb; -c <em/address/ &rsqb; &lsqb; -i <em/filename/ &rsqb; &lsqb; -s <em/subject/ &rsqb; <em/address/ &lsqb; <em/address/ ... &rsqb; 

Mutt also supports a ``batch'' mode to send prepared messages.  Simply redirect
input from the file you wish to send.  For example,

<tt>mutt -s &dquot;data set for run &num;2&dquot; professor@bigschool.edu
&lt; &tilde;/run2.dat</tt>

This command will send a message to ``professor@bigschool.edu'' with a subject
of ``data set for run &num;2''.  In the body of the message will be the contents
of the file ``&tilde;/run2.dat''.

<sect1>Configuration Commands<label id="commands">
<p>
The following are the commands understood by mutt.

<itemize>
<item>
<tt><ref id="account-hook" name="account-hook"></tt> <em/pattern/ <em/command/
<item>
<tt><ref id="alias" name="alias"></tt> <em/key/ <em/address/ &lsqb; , <em/address/, ... &rsqb;
<item>
<tt><ref id="alias" name="unalias"></tt> &lsqb; * | <em/key/ ... &rsqb;
<item>
<tt><ref id="alternative_order" name="alternative&lowbar;order"></tt> <em/mimetype/ &lsqb; <em/mimetype/ ... &rsqb;
<item>
<tt><ref id="auto_view" name="auto&lowbar;view"></tt> <em/mimetype/ &lsqb; <em/mimetype/ ... &rsqb;
<item>
<tt><ref id="bind" name="bind"></tt> <em/map/ <em/key/ <em/function/
<item>
<tt><ref id="charset-hook" name="charset-hook"></tt> <em/alias/ <em/charset/
<item>
<tt><ref id="color" name="color"></tt> <em/object/ <em/foreground/ <em/background/ &lsqb; <em/regexp/ &rsqb;
<item>
<tt><ref id="color" name="uncolor"></tt> <em/index/ <em/pattern/ &lsqb; <em/pattern/ ... &rsqb;
<item>
<tt><ref id="exec" name="exec"></tt> <em/function/ &lsqb; <em/function/ ... &rsqb;
<item>
<tt><ref id="fcc-hook" name="fcc-hook"></tt> <em/pattern/ <em/mailbox/
<item>
<tt><ref id="fcc-save-hook" name="fcc-save-hook"></tt> <em/pattern/ <em/mailbox/
<item>
<tt><ref id="folder-hook" name="folder-hook"></tt> <em/pattern/ <em/command/
<item>
<tt><ref id="hdr_order" name="hdr&lowbar;order"></tt> <em/header/ &lsqb; <em/header/ ... &rsqb;
<item>
<tt><ref id="hdr_order" name="unhdr&lowbar;order"></tt> <em/header/ &lsqb; <em/header/ ... &rsqb;
<item>
<tt><ref id="charset-hook" name="iconv-hook"></tt> <em/charset/ <em/local-charset/
<item>
<tt><ref id="ignore" name="ignore"></tt> <em/pattern/ &lsqb; <em/pattern/ ... &rsqb;
<item>
<tt><ref id="ignore" name="unignore"></tt> <em/pattern/ &lsqb; <em/pattern/ ... &rsqb;
<item>
<tt><ref id="lists" name="lists"></tt> <em/address/ &lsqb; <em/address/ ... &rsqb; 
<item>
<tt><ref id="lists" name="unlists"></tt> <em/address/ &lsqb; <em/address/ ... &rsqb; 
<item>
<tt><ref id="macro" name="macro"></tt> <em/menu/ <em/key/ <em/sequence/ &lsqb; <em/description/ &rsqb; 
<item>
<tt><ref id="mailboxes" name="mailboxes"></tt> <em/filename/ &lsqb; <em/filename/ ... &rsqb;
<item>
<tt><ref id="mbox-hook" name="mbox-hook"></tt> <em/pattern/ <em/mailbox/
<item>
<tt><ref id="message-hook" name="message-hook"></tt> <em/pattern/ <em/command/
<item>
<tt><ref id="color" name="mono"></tt> <em/object attribute/ &lsqb; <em/regexp/ &rsqb;
<item>
<tt><ref id="color" name="unmono"></tt> <em/index/ <em/pattern/ &lsqb; <em/pattern/ ... &rsqb;
<item>
<tt><ref id="my_hdr" name="my&lowbar;hdr"></tt> <em/string/
<item>
<tt><ref id="my_hdr" name="unmy&lowbar;hdr"></tt> <em/field/ &lsqb; <em/field/ ... &rsqb;
<item>
<tt><ref id="pgp-hook" name="pgp-hook"></tt> <em/pattern/ <em/key-id/
<item>
<tt><ref id="push" name="push"></tt> <em/string/
<item>
<tt><ref id="set" name="reset"></tt> <em/variable/ &lsqb;<em/variable/ ... &rsqb;
<item>
<tt><ref id="save-hook" name="save-hook"></tt> <em/regexp/ <em/filename/
<item>
<tt><ref id="score-command" name="score"></tt> <em/pattern/ <em/value/
<item>
<tt><ref id="score-command" name="unscore"></tt> <em/pattern/ &lsqb; <em/pattern/ ... &rsqb;
<item>
<tt><ref id="send-hook" name="send-hook"></tt> <em/regexp/ <em/command/
<item>
<tt><ref id="set" name="set"></tt> &lsqb;no|inv&rsqb;<em/variable/&lsqb;=<em/value/&rsqb; &lsqb; <em/variable/ ... &rsqb;
<item>
<tt><ref id="set" name="unset"></tt> <em/variable/ &lsqb;<em/variable/ ... &rsqb;
<item>
<tt><ref id="source" name="source"></tt> <em/filename/
<item>
<tt><ref id="lists" name="subscribe"></tt> <em/address/ &lsqb; <em/address/ ... &rsqb; 
<item>
<tt><ref id="lists" name="unsubscribe"></tt> <em/address/ &lsqb; <em/address/ ... &rsqb; 
<item>
<tt><ref id="set" name="toggle"></tt> <em/variable/ &lsqb;<em/variable/ ... &rsqb;
<item>
<tt><ref id="unhook" name="unhook"></tt> <em/hook-type/
</itemize>

<sect1>Configuration variables<label id="variables">
<p>

