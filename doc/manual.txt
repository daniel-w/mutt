  The Mutt E-Mail Client
  by Michael Elkins <me@cs.hmc.edu>
  v0.92.2, 23 April 1998

  ``All mail clients suck.  This one just sucks less.'' -me, circa 1995

  11..  IInnttrroodduuccttiioonn

  MMuutttt is a small but very powerful text-based MIME mail client.  Mutt
  is highly configurable, and is well suited to the mail power user with
  advanced features like key bindings, keyboard macros, mail threading,
  regular expression searches and a powerful pattern matching language
  for selecting groups of messages.


  11..11..  MMuutttt HHoommee PPaaggee

  http://www.cs.hmc.edu/~me/mutt/index.html


  11..22..  MMaaiilliinngg LLiissttss

  To subscribe to one of the following mailing lists, send a message
  with the word _s_u_b_s_c_r_i_b_e in the subject to list-name_-
  _r_e_q_u_e_s_t@cs.hmc.edu.


  +o  mutt-announce@cs.hmc.edu -- low traffic list for announcements

  +o  mutt-users@cs.hmc.edu -- help, bug reports and feature requests

  +o  mutt-dev@cs.hmc.edu -- development mailing list

  NNoottee:: all messages posted to _m_u_t_t_-_a_n_n_o_u_n_c_e are automatically forwarded
  to _m_u_t_t_-_u_s_e_r_s, so you do not need to be subscribed to both lists.


  11..33..  SSooffttwwaarree DDiissttrriibbuuttiioonn SSiitteess


  +o  ftp://ftp.cs.hmc.edu/pub/me/mutt/


  11..44..  IIRRCC

  Visit channel _#_m_u_t_t on DALnet (www.dal.net) to chat with other people
  interested in Mutt.


  11..55..  UUSSEENNEETT

  See the newsgroup comp.mail.mutt.


  11..66..  CCooppyyrriigghhtt

  Mutt is Copyright (C) 1996-8 Michael R. Elkins <me@cs.hmc.edu>

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or (at
  your option) any later version.

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


  22..  GGeettttiinngg SSttaarrtteedd


  This section is intended as a brief overview of how to use Mutt.
  There are many other features which are described elsewhere in the
  manual.  There is even more information available in the Mutt FAQ and
  various web pages.  See the Mutt Page for more details.

  The keybindings described in this section are the defaults as
  distributed.  Your local system administrator may have altered the
  defaults for your site.  You can always type ``?'' in any menu to
  display the current bindings.

  The first thing you need to do is invoke mutt, simply by typing mutt
  at the command line.  There are various command-line options, see
  either the mutt man page or the ``reference''.


  22..11..  MMoovviinngg AArroouunndd iinn MMeennuuss


  Information is presented in menus, very similar to ELM.  Here is a
  table showing the common keys used to navigate menus in Mutt.



       j or Down       next-entry      move to the next entry
       k or Up         previous-entry  move to the previous entry
       z or PageDn     page-down       go to the next page
       Z or PageUp     page-up         go to the previous page
       = or Home       first-entry     jump to the first entry
       * or End        last-entry      jump to the last entry
       q               quit            exit the current menu
       ?               help            list all keybindings for the current menu





  22..22..  EEddiittiinngg IInnppuutt FFiieellddss

  Mutt has a builtin line editor which is used as the primary way to
  input textual data such as email addresses or filenames.  The keys
  used to move around while editing are very similar to those of Emacs.















  ^A or <Home>    bol             move to the start of the line
  ^B or <Left>    backward-char   move back one char
  ^D or <Delete>  delete-char     delete the char under the cursor
  ^E or <End>     eol             move to the end of the line
  ^F or <Right>   forward-char    move forward one char
  ^K              kill-eol        delete to the end of the line
  ^U              kill-line       delete entire line
  ^W              kill-word       kill the word in front of the cursor
  <Up>            history-up      recall previous string from history
  <Down>          history-down    recall next string from history
  <BackSpace>     backspace       kill the char in front of the cursor
  ^G              n/a             abort
  <Tab>           n/a             complete filename (only when prompting for a file)
  <Return>        n/a             finish editing




  You can remap the _e_d_i_t_o_r functions using the ``bind'' command.  For
  example, to make the _D_e_l_e_t_e key delete the character in front of the
  cursor rather than under, you could use

  bind editor delete backspace


  22..33..  RReeaaddiinngg MMaaiill -- TThhee IInnddeexx aanndd PPaaggeerr


  Similar to many other mail clients, there are two modes in which mail
  is read in Mutt.  The first is the index of messages in the mailbox,
  which is called the ``index'' in Mutt.  The second mode is the display
  of the message contents.  This is called the ``pager.''

  The next few sections describe the functions provided in each of these
  modes.


  22..33..11..  TThhee MMeessssaaggee IInnddeexx




























  c               change to a different mailbox
  ESC c           change to a folder in read-only mode
  C               copy the current message to another mailbox
  ESC C           decode a message and copy it to a folder
  ESC s           decode a message and save it to a folder
  D               delete messages matching a pattern
  d               delete the current message
  F               mark as important
  l               show messages matching a pattern
  N               mark message as new
  o               change the current sort method
  O               reverse sort the mailbox
  q               save changes and exit
  s               save-message
  t               toggle the tag on a message
  ESC t           toggle tag on entire message thread
  u               undelete-message
  v               view-attachments
  x               abort changes and exit
  <Return>        display-message
  <Tab>           jump to the next new message
  @               show the author's full e-mail address
  $               save changes to mailbox
  /               search
  ESC /           search-reverse
  ^L              clear and redraw the screen
  ^T              tag messages matching a pattern
  ^U              undelete messages matching a pattern





  22..33..11..11..  SSttaattuuss FFllaaggss


  In addition to who sent the message and the subject, a short summary
  of the disposition of each message is printed beside the message
  number.  Zero or more of the following ``flags'' may appear, which
  mean:




       D       message is deleted
       K       contains a PGP public key
       M       requires mailcap to view
       N       message is new
       O       message is old
       P       message is PGP encrypted
       r       message has been replied to
       S       message is PGP signed
       !       message is flagged
       *       message is tagged




  Some of the status flags can be turned on or off using

  +o  sseett--ffllaagg (default: w)

  +o  cclleeaarr--ffllaagg (default: W)



  Furthermore, the following flags reflect who the message is addressed
  to.  They can be customized with the ``$to_chars'' variable.




       +       message is to you and you only
       T       message is to you, but also to or cc'ed to others
       C       message is cc'ed to you
       F       message is from you





  22..33..22..  TThhee PPaaggeerr


  By default, Mutt uses its builtin pager to display the body of
  messages.  The pager is very similar to the Unix program _l_e_s_s though
  not nearly as featureful.



       <Return>        go down one line
       <Space>         display the next page (or next message if at the end of a message)
       -               go back to the previous page
       n               display the next message
       ?               show keybindings
       /               search for a regular expression (pattern)
       \              toggle search pattern coloring




  In addition, many of the functions from the _i_n_d_e_x are available in the
  pager, such as _d_e_l_e_t_e_-_m_e_s_s_a_g_e or _c_o_p_y_-_m_e_s_s_a_g_e (this is one advantage
  over using an external pager to view messages).

  Also, the internal pager supports a couple other advanced features.
  For one, it will accept and translate the ``standard'' nroff sequences
  for bold and underline. These sequences are a series of either the
  letter, backspace (^H), the letter again for bold or the letter,
  backspace, ``_'' for denoting underline. Mutt will attempt to display
  these in bold and underline respectively if your terminal supports
  them. If not, you can use the bold and underline ``color'' objects to
  specify a color or mono attribute for them.

  Additionally, the internal pager supports the ANSI escape sequences
  for character attributes.  Mutt translates them into the correct color
  and character settings.  The sequences Mutt supports are:















  ESC [ Ps;Ps;Ps;...;Ps m
  where Ps =
  0    All Attributes Off
  1    Bold on
  4    Underline on
  5    Blink on
  7    Reverse video on
  3x   Foreground color is x
  4x   Background color is x

  Colors are
  0    black
  1    red
  2    green
  3    yellow
  4    blue
  5    magenta
  6    cyan
  7    white




  Mutt uses these attributes for handling text/enriched messages, and
  they can also be used by an external ``autoview'' script for
  highlighting purposes.  NNoottee:: If you change the colors for your
  display, for example by changing the color associated with color2 for
  your xterm, then that color will be used instead of green.


  22..33..33..  TThhrreeaaddeedd MMooddee

  When the mailbox is ``sorted'' by _t_h_r_e_a_d_s, there are a few additional
  functions available in the _i_n_d_e_x and _p_a_g_e_r modes.



       ^D      delete-thread           delete all messages in the current thread
       ^U      undelete-thread         undelete all messages in the current thread
       ^N      next-thread             jump to the start of the next thread
       ^P      previous-thread         jump to the start of the previous thread
       ^R      read-thread             mark the current thread as read
       ESC d   delete-subthread        delete all messages in the current subthread
       ESC u   undelete-subthread      undelete all messages in the current subthread
       ESC n   next-subthread          jump to the start of the next subthread
       ESC p   previous-subthread      jump to the start of the previous subthread
       ESC r   read-subthread          mark the current subthread as read
       ESC t   tag-thread              toggle the tag on the current thread




  See also: ``$strict_threads''.


  22..33..44..  MMiisscceellllaanneeoouuss FFuunnccttiioonnss

  ccrreeaattee--aalliiaass (default: a)

  Creates a new alias based upon the current message (or prompts for a
  new one).  Once editing is complete, an ``alias'' command is added to
  the file specified by the ``$alias_file'' variable for future use.
  NNoottee:: Specifying an ``$alias_file'' does not add the aliases specified
  there-in, you must also ``source'' the file.


  ddiissppllaayy--hheeaaddeerrss (default: h)

  Toggles the weeding of message header fields specified by ``ignore''
  commands.


  eenntteerr--ccoommmmaanndd (default: ``:'')

  This command is used to execute any command you would normally put in
  a configuration file.  A common use is to check the settings of
  variables, or in conjunction with ``macros'' to change settings on the
  fly.


  eexxttrraacctt--kkeeyyss (default: ESC k)

  This command extracts PGP public keys from the current or tagged
  message(s) and adds them to your ``$pgp_v2_pubring'' or
  ``$pgp_v5_pubring'' depending on ``$pgp_key_version''.


  ffoorrggeett--ppaasssspphhrraassee (default: ^F)

  This command wipes the PGP passphrase from memory. It is useful, if
  you misspelled the passphrase.


  lliisstt--rreeppllyy (default: L)

  Reply to the current or tagged message(s) by extracting any addresses
  which match the addresses given by the ``lists'' command.  Using this
  when replying to messages posted to mailing lists help avoid duplicate
  copies being sent to the author of the message you are replying to.

  ppiippee--mmeessssaaggee (default: |)

  Asks for an external Unix command and pipes the current or tagged
  message(s) to it.  The variables ``$pipe_decode'', ``$pipe_split'',
  ``$pipe_sep'' and ``$wait_key'' control the exact behaviour of this
  function.

  sshheellll--eessccaappee (default: !)

  Asks for an external Unix command and executes it.  The ``$wait_key''
  can be used to control whether Mutt will wait for a key to be pressed
  when the command returns (presumably to let the user read the output
  of the command), based on the return status of the named command.

  ttooggggllee--qquuootteedd (default: T)

  The _p_a_g_e_r uses the ``$quote_regexp'' variable to detect quoted text
  when displaying the body of the message.  This function toggles the
  display of the quoted material in the message.  It is particularly
  useful when are interested in just the response and there is a large
  amount of quoted text in the way.

  sskkiipp--qquuootteedd (default: S)

  This function will go to the next line of non-quoted text which come
  after a line of quoted text in the internal pager.


  22..44..  SSeennddiinngg MMaaiill



  The following bindings are available in the _i_n_d_e_x for sending
  messages.



       m       compose         compose a new message
       r       reply           reply to sender
       g       group-reply     reply to all recipients
       L       list-reply      reply to mailing list address
       f       forward         forward message
       b       bounce          bounce (remail) message
       ESC k   mail-key        mail a PGP public key to someone




  Bouncing a message sends the message as is to the recipient you
  specify.  Forwarding a message allows you to add comments or modify
  the message you are forwarding.  Bouncing a message uses the
  ``sendmail'' command to send a copy of a message to recipients as if
  they were original recipients of the message.  See also
  ``$mime_forward''.

  Mutt will then enter the _c_o_m_p_o_s_e menu and prompt you for the
  recipients to place on the ``To:'' header field.  Next, it will ask
  you for the ``Subject:'' field for the message, providing a default if
  you are replying to or forwarding a message.  See also ``$askcc'',
  ``$askbcc'', ``$autoedit'', and ``$fast_reply'' for changing how Mutt
  asks these questions.

  Mutt will then automatically start your ``$editor'' on the message
  body.  If the ``$edit_headers'' variable is set, the headers will be
  at the top of the message in your editor.  Any messages you are
  replying to will be added in sort order to the message, with
  appropriate ``$attribution'', ``$indent_string'' and
  ``$post_indent_string''.  When forwarding a message, if the
  ``$mime_forward'' variable is unset, a copy of the forwarded message
  will be included.  If you have specified a ``$signature'', it will be
  appended to the message.

  Once you have finished editing the body of your mail message, you are
  returned to the _c_o_m_p_o_s_e menu.  The following options are available:



       a       attach-file             attach a file
       ESC k   attach-key              attach a PGP public key
       d       edit-description        edit description on attachment
       D       detach-file             detach a file
       T       edit-to                 edit the To field
       c       edit-cc                 edit the Cc field
       b       edit-bcc                edit the Bcc field
       y       send-message            send the message
       s       edit-subject            edit the Subject
       f       edit-fcc                specify an ``Fcc'' mailbox
       p       pgp-menu                select PGP options (``i'' version only)
       P       postpone-message        postpone this message until later
       q       quit                    quit (abort) sending the message
       i       ispell                  check spelling (if available on your system)
       ^F      forget-passphrase       whipe PGP passphrase from memory






  22..44..11..  EEddiittiinngg tthhee mmeessssaaggee hheeaaddeerr

  When editing the header of your outgoing message, there are a couple
  of special features available.

  If you specify
  Fcc: _f_i_l_e_n_a_m_e
  Mutt will pick up _f_i_l_e_n_a_m_e just as if you had used the _e_d_i_t_-_f_c_c
  function in the _c_o_m_p_o_s_e menu.

  You can also attach files to your message by specifying
  Attach: _f_i_l_e_n_a_m_e  [ _d_e_s_c_r_i_p_t_i_o_n ]
  where _f_i_l_e_n_a_m_e is the file to attach and _d_e_s_c_r_i_p_t_i_o_n is an optional
  string to use as the description of the attached file.

  When replying to messages, if you remove the _I_n_-_R_e_p_l_y_-_T_o_: field from
  the header field, Mutt will not generate a _R_e_f_e_r_e_n_c_e_s_: field, which
  allows you to create a new message thread.

  If you want to use PGP, you can specify

  Pgp: [ E | S | S<id> ]

  ``E'' encrypts, ``S'' signs and ``S<id>'' signs with the given key,
  setting ``$pgp_sign_as'' permanently.

  Also see ``edit_headers''.


  22..55..  PPoossttppoonniinngg MMaaiill


  At times it is desirable to delay sending a message that you have
  already begun to compose.  When the _p_o_s_t_p_o_n_e_-_m_e_s_s_a_g_e function is used
  in the _c_o_m_p_o_s_e menu, the body of your message and attachments are
  stored in the mailbox specified by the ``$postponed'' variable.  This
  means that you can recall the message even if you exit Mutt and then
  restart it at a later time.

  Once a message is postponed, there are several ways to resume it.
  From the command line you can use the ``-p'' option, or if you _c_o_m_p_o_s_e
  a new message from the _i_n_d_e_x or _p_a_g_e_r you will be prompted if
  postponed messages exist.  If multiple messages are currently
  postponed, the _p_o_s_t_p_o_n_e_d menu will pop up and you can select which
  message you would like to resume.

  NNoottee:: If you postpone a reply to a message, the reply setting of the
  message is only updated when you actually finish the message and send
  it.  Also, you must be in the same folder with the message you replied
  to for the status of the message to be updated.

  See also the ``$postpone'' quad-option.


  33..  CCoonnffiigguurraattiioonn


  While the default configuration (or ``preferences'') make Mutt usable
  right out of the box, it is often desirable to tailor Mutt to suit
  your own tastes.  When Mutt is first invoked, it will attempt to read
  the ``system'' configuration file (defaults set by your local system
  administrator), unless the ``-n'' ``command line'' option is
  specified.  This file is typically /usr/local/share/Muttrc or
  /usr/local/lib/Muttrc.  Next, it looks for a file in your home
  directory named .muttrc.  In this file is where you place ``commands''
  to configure Mutt.
  In addition, mutt supports version specific configuration files that
  are parsed instead of the default files as explained above.  For
  instance, if your system has a Muttrc-0.88 file in the system
  configuration directory, and you are running version 0.88 of mutt,
  this file will be sourced instead of the Muttrc file.  The same is
  true of the user configuration file, if you have a file .muttrc-0.88.6
  in your home directory, when you run mutt version 0.88.6, it will
  source this file instead of the default .muttrc file.  The version
  number is the same which is visible using the ``-v'' ``command line''
  switch or using the show-version key (default: V) from the index menu.


  33..11..  SSyynnttaaxx ooff IInniittiiaalliizzaattiioonn FFiilleess


  An initialization file consists of a series of ``commands''.  Each
  line of the file may contain one or more commands.  When multiple
  commands are used, they must be separated by a semicolon (;).


               set realname='Mutt user' ; ignore x-




  The hash mark, or pound sign (``#''), is used as a ``comment'' charac-
  ter. You can use it to annotate your initialization file. All text
  after the comment character to the end of the line is ignored. For
  example,



       my_hdr X-Disclaimer: Why are you listening to me? # This is a comment




  Single quotes (') and double quotes (") can be used to quote strings
  which contain spaces or other special characters.  The difference
  between the two types of quotes is similar to that of many popular
  shell programs, namely that a single quote is used to specify a
  literal string (one that is not interpreted for shell variables or
  quoting with a backslash [see next paragraph]), while double quotes
  indicate a string for which should be evaluated.  For example,
  backtics are evaluated inside of double quotes, but nnoott for single
  quotes.

  \ quotes the next character, just as in shells such as bash and zsh.
  For example, if want to put quotes ``"'' inside of a string, you can
  use ``\'' to force the next character to be a literal instead of
  interpreted character.


       set realname="Michael \"MuttDude\" Elkins"




  ``\\'' means to insert a literal ``\'' into the line.  ``\n'' and
  ``\r'' have their usual C meanings of linefeed and carriage-return,
  respectively.

  A \ at the end of a line can be used to split commands over multiple
  lines, provided that the split points don't appear in the middle of
  command names.

  It is also possible to substitute the output of a Unix command in an
  initialization file.  This is accomplished by enclosing the command in
  backquotes (``).  For example,


       my_hdr X-Operating-System: `uname -a`




  The output of the Unix command ``uname -a'' will be substituted before
  the line is parsed.  Note that since initialization files are line
  oriented, only the first line of output from the Unix command will be
  substituted.

  For a complete list of the commands understood by mutt, see the
  ``command reference''.


  33..22..  DDeeffiinniinngg//UUssiinngg aalliiaasseess


  Usage: alias _k_e_y _a_d_d_r_e_s_s [ , _a_d_d_r_e_s_s, ... ]

  It's usually very cumbersome to remember or type out the address of
  someone you are communicating with.  Mutt allows you to create
  ``aliases'' which map a short string to a full address.

  NNoottee:: if you want to create an alias for a group (by specifying more
  than one address), you mmuusstt separate the addresses with a comma
  (``,'').

  To remove an alias or aliases:

  unalias _a_d_d_r [ _a_d_d_r _._._. ]



       alias muttdude me@cs.hmc.edu (Michael Elkins)
       alias theguys manny, moe, jack




  Unlike other mailers, Mutt doesn't require aliases to be defined in a
  special file.  The alias command can appear anywhere in a
  configuration file, as long as this file is ``sourced''.
  Consequently, you can have multiple alias files, or you can have all
  aliases defined in your muttrc.

  On the other hand, the ``create-alias'' function can use only one
  file, the one pointed to by the ``$alias_file'' variable (which is
  ~/.muttrc by default). This file is not special either, in the sense
  that Mutt will happily append aliases to any file, but in order for
  the new aliases to take effect you need to explicitly ``source'' this
  file too.

  For example:



       source /usr/local/share/Mutt.aliases
       source ~/.mail_aliases
       set alias_file=~/.mail_aliases


  To use aliases, you merely use the alias at any place in mutt where
  mutt prompts for addresses, such as the _T_o_: or _C_c_: prompt.  You can
  also enter aliases in your editor at the appropriate headers if you
  have the ``$edit_headers'' variable set.

  In addition, at the various address prompts, you can use the tab
  character to expand a partial alias to the full alias.  If there are
  multiple matches, mutt will bring up a menu with the matching aliases.
  In order to be presented with the full list of aliases, you must hit
  tab with out a partial alias, such as at the beginning of the prompt
  or after a comma denoting multiple addresses.

  In the alias menu, you can select as many aliases as you want with the
  _s_e_l_e_c_t_-_e_n_t_r_y key (default: RET), and use the _e_x_i_t key (default: q) to
  return to the address prompt.


  33..33..  CChhaannggiinngg tthhee ddeeffaauulltt kkeeyy bbiinnddiinnggss

  Usage: bind _m_a_p _k_e_y _f_u_n_c_t_i_o_n

  This command allows you to change the default key bindings (operation
  invoked when pressing a key).

  _m_a_p specifies in which menu the binding belongs.  The currently
  defined maps are:


  +o  generic

  +o  alias

  +o  attach

  +o  browser

  +o  editor

  +o  index

  +o  compose

  +o  pager

  +o  pgp

  +o  url

  _k_e_y is the key (or key sequence) you wish to bind.  To specify a
  control character, use the sequence _\_C_x, where _x is the letter of the
  control character (for example, to specify control-A use ``\Ca'').
  Note that the case of _x as well as _\_C is ignored, so that _\_C_A_, _\_C_a_,
  _\_c_A and _\_c_a are all equivalent.  An alternative form is to specify the
  key as a three digit octal number prefixed with a ``\'' (for example
  _\_1_7_7 is equivalent to _\_c_?).

  In addition, _k_e_y may consist of:









  \t             tab
  \r             carriage return
  \n             newline
  \e             escape
  up              up arrow
  down            down arrow
  left            left arrow
  right           right arrow
  pageup          Page Up
  pagedown        Page Down
  backspace       Backspace
  delete          Delete
  insert          Insert
  enter           Enter
  home            Home
  end             End
  f1              function key 1
  f10             function key 10




  _k_e_y does not need to be enclosed in quotes unless it contains a space
  (`` '').

  _f_u_n_c_t_i_o_n specifies which action to take when _k_e_y is pressed.  For a
  complete list of functions, see the ``reference''.  The special
  function noop unbinds the specify key sequence.


  33..44..  SSeettttiinngg vvaarriiaabblleess bbaasseedd uuppoonn mmaaiillbbooxx

  Usage: folder-hook [!]_p_a_t_t_e_r_n _c_o_m_m_a_n_d

  It is often desirable to change settings based on which mailbox you
  are reading.  The folder-hook command provides a method by which you
  can execute any configuration command.  _p_a_t_t_e_r_n is a regular
  expression specifying in which mailboxes to execute _c_o_m_m_a_n_d before
  loading.  If a mailbox matches multiple folder-hook's, they are
  executed in the order given in the muttrc.

  NNoottee:: if you use the ``!'' shortcut for ``$spoolfile'' at the
  beginning of the pattern, you must place it inside of double or single
  quotes in order to distinguish it from the logical _n_o_t operator for
  the expression.

  Note that the settings are _n_o_t restored when you leave the mailbox.
  For example, a command action to perform is to change the sorting
  method based upon the mailbox being read:



       folder-hook mutt set sort=threads




  However, the sorting method is not restored to its previous value when
  reading a different mailbox.  To specify a _d_e_f_a_u_l_t command, use the
  pattern ``.'':




       folder-hook . set sort=date-sent

  33..55..  KKeeyybbooaarrdd mmaaccrrooss

  Usage: macro _m_e_n_u _k_e_y _s_e_q_u_e_n_c_e

  Macros are useful when you would like a single key to perform a series
  of actions.  When you press _k_e_y in menu _m_e_n_u, Mutt will behave as if
  you had typed _s_e_q_u_e_n_c_e.  So if you have a common sequence of commands
  you type, you can create a macro to execute those commands with a
  single key.

  _k_e_y and _s_e_q_u_e_n_c_e are expanded by the same rules as the ``key
  bindings'', with the addition that control characters in _s_e_q_u_e_n_c_e can
  also be specified as _^_x.  In order to get a caret (``^'') you need to
  use _^_^.

  NNoottee:: Macro definitions (if any) listed in the help screen(s), are
  silently truncated at the screen width, and are not wrapped.


  33..66..  UUssiinngg ccoolloorr aanndd mmoonnoo vviiddeeoo aattttrriibbuutteess

  Usage: color _o_b_j_e_c_t _f_o_r_e_g_r_o_u_n_d _b_a_c_k_g_r_o_u_n_d [ _r_e_g_e_x_p ]
  Usage: color index _f_o_r_e_g_r_o_u_n_d _b_a_c_k_g_r_o_u_n_d [ _p_a_t_t_e_r_n ]
  Usage: uncolor index _p_a_t_t_e_r_n [ _p_a_t_t_e_r_n ...  ]

  If your terminal supports color, you can spice up Mutt by creating
  your own color scheme.  To define the color of an object (type of
  information), you must specify both a foreground color aanndd a
  background color (it is not possible to only specify one or the
  other).

  _o_b_j_e_c_t can be one of:


  +o  attachment

  +o  body (match _r_e_g_e_x_p in the body of messages)

  +o  bold (hiliting bold patterns in the body of messages)

  +o  error (error messages printed by Mutt)

  +o  header (match _r_e_g_e_x_p in the message header)

  +o  hdrdefault (default color of the message header in the pager)

  +o  index (match _p_a_t_t_e_r_n in the message index)

  +o  indicator (arrow or bar used to indicate the current item in a
     menu)

  +o  markers (the ``+'' markers at the beginning of wrapped lines in the
     pager)

  +o  message (informational messages)

  +o  normal

  +o  quoted (text matching ``$quote_regexp'' in the body of a message)

  +o  quoted1, quoted2, ..., quotedNN (higher levels of quoting)

  +o  search (hiliting of words in the pager)

  +o  signature

  +o  status (mode lines used to display info about the mailbox or
     message)

  +o  tilde (the ``~'' used to pad blank lines in the pager)

  +o  tree (thread tree drawn in the message index and attachment menu)

  +o  underline (hiliting underlined patterns in the body of messages)

  _f_o_r_e_g_r_o_u_n_d and _b_a_c_k_g_r_o_u_n_d can be one of the following:


  +o  white

  +o  black

  +o  green

  +o  magenta

  +o  blue

  +o  cyan

  +o  yellow

  +o  red

  +o  default

  +o  color_x

  _f_o_r_e_g_r_o_u_n_d can optionally be prefixed with the keyword bright to make
  the foreground color boldfaced (e.g., brightred).

  If your terminal supports it, the special keyword _d_e_f_a_u_l_t can be used
  as a transparent color.  The value _b_r_i_g_h_t_d_e_f_a_u_l_t is also valid.  If
  Mutt is linked against the _S_-_L_a_n_g library, you also need to set the
  _C_O_L_O_R_F_G_B_G environment variable to the default colors of your terminal
  for this to work; for example (for Bourne-like shells):



       set COLORFGBG="green;black"
       export COLORFGBG




  NNoottee:: The _S_-_L_a_n_g library requires you to use the _l_i_g_h_t_g_r_a_y and _b_r_o_w_n
  keywords instead of _w_h_i_t_e and _y_e_l_l_o_w when setting this variable.

  NNoottee:: The uncolor command can be applied to the index object only.  It
  removes entries from the list. You mmuusstt specify the same pattern
  specified in the color command for it to be removed.  The pattern
  ``*'' is a special token which means to clear the color index list of
  all entries.

  Mutt also recognizes the keywords _c_o_l_o_r_0, _c_o_l_o_r_1, ..., _c_o_l_o_rNN--11 (NN
  being the number of colors supported by your terminal).  This is
  useful when you remap the colors for your display (for example by
  changing the color associated with _c_o_l_o_r_2 for your xterm), since color
  names may then lose their normal meaning.

  If your terminal does not support color, it is still possible change
  the video attributes through the use of the ``mono'' command:
  Usage: mono _<_o_b_j_e_c_t_> _<_a_t_t_r_i_b_u_t_e_> [ _r_e_g_e_x_p ]

  where _a_t_t_r_i_b_u_t_e is one of the following:


  +o  none

  +o  bold

  +o  underline

  +o  reverse

  +o  standout


  33..77..  IIggnnoorriinngg ((wweeeeddiinngg)) uunnwwaanntteedd mmeessssaaggee hheeaaddeerrss

  Usage: [un]ignore _p_a_t_t_e_r_n [ _p_a_t_t_e_r_n ... ]

  Messages often have many header fields added by automatic processing
  systems, or which may not seem useful to display on the screen.  This
  command allows you to specify header fields which you don't normally
  want to see.

  You do not need to specify the full header field name.  For example,
  ``ignore content-'' will ignore all header fields that begin with the
  pattern ``content-''.

  To remove a previously added token from the list, use the ``unignore''
  command.  Note that if you do ``ignore x-'' it is not possible to
  ``unignore x-mailer,'' for example.  The ``unignore'' command does nnoott
  make Mutt display headers with the given pattern.

  ``unignore *'' will remove all tokens from the ignore list.

  For example:


       # Sven's draconian header weeding
       ignore *
       unignore from date subject to cc
       unignore organization organisation x-mailer: x-newsreader: x-mailing-list:
       unignore posted-to:





  33..88..  MMaaiilliinngg lliissttss

  Usage: [un]lists _a_d_d_r_e_s_s [ _a_d_d_r_e_s_s ... ]

  Mutt has a few nice features for ``handling mailing lists''.  In order
  to take advantage of them, you must specify which addresses belong to
  mailing lists.

  It is important to note that you should nneevveerr specify the domain name
  ( the part after the ``@'') with the lists command.  You should only
  specify the ``mailbox'' portion of the address (the part before the
  ``@'').  For example, if you've subscribed to the Mutt mailing list,
  you will receive mail addressed to _m_u_t_t_-_u_s_e_r_s_@_c_s_._h_m_c_._e_d_u.  So, to tell
  Mutt that this is a mailing list, you would add ``lists mutt-users''
  to your initialization file.


  The ``unlists'' command is to remove a token from the list of mailing-
  lists.  Use ``unlists *'' to remove all tokens.


  33..99..  UUssiinngg MMuullttiippllee ssppooooll mmaaiillbbooxxeess

  Usage: mbox-hook [!]_p_a_t_t_e_r_n _m_a_i_l_b_o_x

  This command is used to move read messages from a specified mailbox to
  a different mailbox automatically when you quit or change folders.
  _p_a_t_t_e_r_n is a regular expression specifying the mailbox to treat as a
  ``spool'' mailbox and _m_a_i_l_b_o_x specifies where mail should be saved
  when read.

  Unlike some of the other _h_o_o_k commands, only the _f_i_r_s_t matching
  pattern is used (it is not possible to save read mail in more than a
  single mailbox).


  33..1100..  DDeeffiinniinngg mmaaiillbbooxxeess wwhhiicchh rreecceeiivvee mmaaiill

  Usage: mailboxes [!]_f_i_l_e_n_a_m_e [ _f_i_l_e_n_a_m_e ... ]

  This command specifies folders which can receive mail and which will
  be checked for new messages.  By default, the main menu status bar
  displays how many of these folders have new messages.

  When changing folders, pressing _s_p_a_c_e will cycle through folders with
  new mail.

  Pressing TAB in the directory browser will bring up a menu showing the
  files specified by the mailboxes command, and indicate which contain
  new messages.  Mutt will automatically enter this mode when invoked
  from the command line with the -y option.

  NNoottee:: new mail is detected by comparing the last modification time to
  the last access time.  Utilities like biff or frm or any other program
  which accesses the mailbox might cause Mutt to never detect new mail
  for that mailbox if they do not properly reset the access time.


  NNoottee:: the filenames in the mailboxes command are resolved when the
  command is executed, so if these names contain ``shortcut characters''
  (such as ``='' and ``!''), any variable definition that affect these
  characters (like ``$folder'' and ``$spool'') should be executed before
  the mailboxes command.


  33..1111..  UUsseerr ddeeffiinneedd hheeaaddeerrss

  Usage:
  my_hdr _s_t_r_i_n_g
  unmy_hdr _f_i_e_l_d [ _f_i_e_l_d ... ]

  The ``my_hdr'' command allows you to create your own header fields
  which will be added to every message you send.

  For example, if you would like to add an ``Organization:'' header
  field to all of your outgoing messages, you can put the command


       my_hdr Organization: A Really Big Company, Anytown, USA


  in your .muttrc.

  NNoottee::  space characters are _n_o_t allowed between the keyword and the
  colon (``:'').  The standard for electronic mail (RFC822) says that
  space is illegal there, so Mutt enforces the rule.

  If you would like to add a header field to a single message, you
  should either set the ``edit_headers'' variable, or use the _e_d_i_t_-
  _h_e_a_d_e_r_s function (default: ``E'') in the send-menu so that you can
  edit the header of your message along with the body.

  To remove user defined header fields, use the ``unmy_hdr'' command.
  You may specify an asterisk (``*'') to remove all header fields, or
  the fields to remove.  For example, to remove all ``To'' and ``Cc''
  header fields, you could use:


       unmy_hdr to cc



  33..1122..  DDeeffiinniinngg tthhee oorrddeerr ooff hheeaaddeerrss wwhheenn vviieewwiinngg mmeessssaaggeess

  Usage: hdr_order _h_e_a_d_e_r_1 _h_e_a_d_e_r_2 _h_e_a_d_e_r_3

  With this command, you can specify an order in which mutt will attempt
  to present headers to you when viewing messages.



       hdr_order From Date: From: To: Cc: Subject:





  33..1133..  SSppeecciiffyy ddeeffaauulltt ssaavvee ffiilleennaammee

  Usage: save-hook [!]_r_e_g_e_x_p _f_i_l_e_n_a_m_e

  This command is used to override the default filename used when saving
  messages.  _f_i_l_e_n_a_m_e will be used as the default filename if the
  message is _F_r_o_m_: an address matching _r_e_g_e_x_p or if you are the author
  and the message is addressed _t_o_: something matching _r_e_g_e_x_p.

  See ``matching messages'' for information on the exact format of
  _r_e_g_e_x_p.

  Examples:



       save-hook me@(turing\\.)?cs\\.hmc\\.edu$ +elkins
       save-hook aol\\.com$ +spam




  Also see the ``fcc-save-hook'' command.


  33..1144..  SSppeecciiffyy ddeeffaauulltt FFcccc:: mmaaiillbbooxx wwhheenn ccoommppoossiinngg

  Usage: fcc-hook [!]_r_e_g_e_x_p _m_a_i_l_b_o_x

  This command is used to save outgoing mail in a mailbox other than
  ``$record''.  Mutt searches the initial list of message recipients for
  the first matching _r_e_g_e_x_p and uses _m_a_i_l_b_o_x as the default Fcc:
  mailbox.  If no match is found the message will be saved to
  ``$record'' mailbox.

  See ``matching messages'' for information on the exact format of
  _r_e_g_e_x_p.

  Example: fcc-hook aol.com$ +spammers

  The above will save a copy of all messages going to the aol.com domain
  to the `+spammers' mailbox by default.  Also see the ``fcc-save-hook''
  command.


  33..1155..  SSppeecciiffyy ddeeffaauulltt ssaavvee ffiilleennaammee aanndd ddeeffaauulltt FFcccc:: mmaaiillbbooxx aatt oonnccee

  Usage: fcc-save-hook [!]_r_e_g_e_x_p _m_a_i_l_b_o_x

  This command is a shortcut, equivalent to doing both a ``fcc-hook''
  and a ``save-hook'' with its arguments.


  33..1166..  CChhaannggee sseettttiinnggss bbaasseedd uuppoonn mmeessssaaggee rreecciippiieennttss

  Usage: send-hook [!]_r_e_g_e_x_p _c_o_m_m_a_n_d

  This command can be used to execute arbitrary configuration commands
  based upon recipients of the message.  _r_e_g_e_x_p is a regular expression
  matching the desired address.  _c_o_m_m_a_n_d is executed when _r_e_g_e_x_p matches
  recipients of the message.  When multiple matches occur, commands are
  executed in the order they are specified in the muttrc.

  See ``matching messages'' for information on the exact format of
  _r_e_g_e_x_p.

  Example: send-hook mutt "set mime_forward signature=''"

  Another typical use for this command is to change the values of the
  ``$attribution'', ``$signature'' and ``$locale'' variables in order to
  change the language of the attributions and signatures based upon the
  recipients.

  NNoottee:: the send-hook's are only executed ONCE after getting the initial
  list of recipients.  Adding a recipient after replying or editing the
  message will NOT cause any send-hook to be executed.


  33..1177..  AAddddiinngg kkeeyy sseeqquueenncceess ttoo tthhee kkeeyybbooaarrdd bbuuffffeerr

  Usage: push _s_t_r_i_n_g

  This command adds the named string to the keyboard buffer.  You may
  use it to automatically run a sequence of commands at startup, or when
  entering certain folders.


  33..1188..  MMeessssaaggee SSccoorriinngg

  Usage: score _p_a_t_t_e_r_n _v_a_l_u_e
  Usage: unscore _p_a_t_t_e_r_n [ _p_a_t_t_e_r_n ... ]

  The score commands adds _v_a_l_u_e to a message's score if _p_a_t_t_e_r_n matches
  it.  _p_a_t_t_e_r_n is a string in the format described in the ``searching''
  section.  _v_a_l_u_e is a positive or negative integer.  A message's final
  score is the sum total of all matching score entries.  However, you
  may optionally prefix _v_a_l_u_e with an equal sign (=) to cause evaluation
  to stop at a particular entry if there is a match.  Negative final
  scores are rounded up to 0.

  The unscore command removes score entries from the list.  You mmuusstt
  specify the same pattern specified in the score command for it to be
  removed.  The pattern ``*'' is a special token which means to clear
  the list of all score entries.


  33..1199..  SSeettttiinngg vvaarriiaabblleess

  Usage: set [no|inv]_v_a_r_i_a_b_l_e[=_v_a_l_u_e] [ _v_a_r_i_a_b_l_e ... ]
  Usage: toggle _v_a_r_i_a_b_l_e [_v_a_r_i_a_b_l_e ... ]
  Usage: unset _v_a_r_i_a_b_l_e [_v_a_r_i_a_b_l_e ... ]
  Usage: reset _v_a_r_i_a_b_l_e [_v_a_r_i_a_b_l_e ... ]

  This command is used to set (and unset) ``configuration variables''.
  There are four basic types of variables: boolean, number, string and
  quadoption.  _b_o_o_l_e_a_n variables can be _s_e_t (true) or _u_n_s_e_t (false).
  _n_u_m_b_e_r variables can be assigned a positive integer value.

  _s_t_r_i_n_g variables consist of any number of printable characters.
  _s_t_r_i_n_g_s must be enclosed in quotes if they contain spaces or tabs.
  You may also use the ``C'' escape sequences \\nn and \\tt for newline and
  tab, respectively.

  _q_u_a_d_o_p_t_i_o_n variables are used to control whether or not to be prompted
  for certain actions, or to specify a default action.  A value of _y_e_s
  will cause the action to be carried out automatically as if you had
  answered yes to the question.  Similarly, a value of _n_o will cause the
  the action to be carried out as if you had answered ``no.''  A value
  of _a_s_k_-_y_e_s will cause a prompt with a default answer of ``yes'' and
  _a_s_k_-_n_o will provide a default answer of ``no.''

  Prefixing a variable with ``no'' will unset it.  Example: set
  noaskbcc.

  For _b_o_o_l_e_a_n variables, you may optionally prefix the variable name
  with inv to toggle the value (on or off).  This is useful when writing
  macros.  Example: set invsmart_wrap.

  The toggle command automatically prepends the inv prefix to all
  specified variables.

  The unset command automatically prepends the no prefix to all
  specified variables.

  Using the enter-command function in the _i_n_d_e_x menu, you can query the
  value of a variable by prefixing the name of the variable with a
  question mark:



       set ?allow_8bit




  The question mark is actually only required for boolean variables.

  The reset command resets all given variables to the compile time
  defaults (hopefully mentioned in this manual). If you use the command
  set and prefix the variable with ``&'' this has the same behavior as
  the reset command.

  With the reset command there exists the special variable ``all'',
  which allows you to reset all variables to their system defaults.
  33..2200..  RReeaaddiinngg iinniittiiaalliizzaattiioonn ccoommmmaannddss ffrroomm aannootthheerr ffiillee

  Usage: source _f_i_l_e_n_a_m_e

  This command allows the inclusion of initialization commands from
  other files.  For example, I place all of my aliases in
  ~/.mail_aliases so that I can make my ~/.muttrc readable and keep my
  aliases private.

  If the filename begins with a tilde (``~''), it will be expanded to
  the path of your home directory.

  If the filename ends with a vertical bar (|), then _f_i_l_e_n_a_m_e is
  considered to be an executable program from which to read input (eg.
  source ~bin/myscript|/.


  44..  AAddvvaanncceedd UUssaaggee

  44..11..  SSeeaarrcchhiinngg aanndd RReegguullaarr EExxpprreessssiioonnss

  All text patterns for searching and matching in Mutt must be specified
  as regular expressions (regexp) in the ``POSIX extended'' syntax
  (which is more or less the syntax used by egrep and GNU awk).  For
  your convenience, we have included below a brief description of this
  syntax.

  The search is case sensitive if the pattern contains at least one
  upper case letter, and case insensitive otherwise. Note that ``\''
  must be quoted if used for a regular expression in an initialization
  command: ``\\''.  For more information, see the section on
  ``searching'' below.


  44..11..11..  RReegguullaarr EExxpprreessssiioonnss

  A regular expression is a pattern that describes a set of strings.
  Regular expressions are constructed analogously to arithmetic
  expressions, by using various operators to combine smaller
  expressions.

  The fundamental building blocks are the regular expressions that match
  a single character.  Most characters, including all letters and
  digits, are regular expressions that match themselves.  Any
  metacharacter with special meaning may be quoted by preceding it with
  a backslash.

  The period ``.'' matches any single character.  The caret ``^'' and
  the dollar sign ``$'' are metacharacters that respectively match the
  empty string at the beginning and end of a line.

  A list of characters enclosed by ``['' and ``]'' matches any single
  character in that list; if the first character of the list is a caret
  ``^'' then it matches any character nnoott in the list.  For example, the
  regular expression [[00112233445566778899]] matches any single digit.  A range of
  ASCII characters may be specified by giving the first and last
  characters, separated by a hyphen ``-''.  Most metacharacters lose
  their special meaning inside lists.  To include a literal ``]'' place
  it first in the list.  Similarly, to include a literal ``^'' place it
  anywhere but first.  Finally, to include a literal hyphen ``-'' place
  it last.

  Certain named classes of characters are predefined.  Character classes
  consist of ``[:'', a keyword denoting the class, and ``:]''.  The
  following classes are defined by the POSIX standard:

     [[::aallnnuumm::]]
        Alphanumeric characters.

     [[::aallpphhaa::]]
        Alphabetic characters.

     [[::bbllaannkk::]]
        Space or tab characters.

     [[::ccnnttrrll::]]
        Control characters.

     [[::ddiiggiitt::]]
        Numeric characters.

     [[::ggrraapphh::]]
        Characters that are both printable and visible.  (A space is
        printable, but not visible, while an ``a'' is both.)

     [[::lloowweerr::]]
        Lower-case alphabetic characters.

     [[::pprriinntt::]]
        Printable characters (characters that are not control
        characters.)

     [[::ppuunncctt::]]
        Punctuation characters (characters that are not letter, digits,
        control characters, or space characters).

     [[::ssppaaccee::]]
        Space characters (such as space, tab and formfeed, to name a
        few).

     [[::uuppppeerr::]]
        Upper-case alphabetic characters.

     [[::xxddiiggiitt::]]
        Characters that are hexadecimal digits.

  A character class is only valid in a regular expression inside the
  brackets of a character list.  Note that the brackets in these class
  names are part of the symbolic names, and must be included in addition
  to the brackets delimiting the bracket list.  For example, [[[[::ddiiggiitt::]]]]
  is equivalent to [[00--99]].

  Two additional special sequences can appear in character lists.  These
  apply to non-ASCII character sets, which can have single symbols
  (called collating elements) that are represented with more than one
  character, as well as several characters that are equivalent for
  collating or sorting purposes:


     CCoollllaattiinngg SSyymmbboollss
        A collating symbols is a multi-character collating element
        enclosed in ``[.'' and ``.]''.  For example, if ``ch'' is a
        collating element, then [[[[..cchh..]]]] is a regexp that matches this
        collating element, while [[cchh]] is a regexp that matches either
        ``c'' or ``h''.

     EEqquuiivvaalleennccee CCllaasssseess
        An equivalence class is a locale-specific name for a list of
        characters that are equivalent. The name is enclosed in ``[=''
        and ``=]''.  For example, the name ``e'' might be used to
        represent all of ``e'' ``e'' and ``e''.  In this case, [[[[==ee==]]]]
        is a regexp that matches any of ``e'', ``e'' and ``e''.
  A regular expression matching a single character may be followed by
  one of several repetition operators:


     ??  The preceding item is optional and matched at most once.

     **  The preceding item will be matched zero or more times.

     ++  The preceding item will be matched one or more times.

     {{nn}}
        The preceding item is matched exactly _n times.

     {{nn,,}}
        The preceding item is matched _n or more times.

     {{,,mm}}
        The preceding item is matched at most _m times.

     {{nn,,mm}}
        The preceding item is matched at least _n times, but no more than
        _m times.

  Two regular expressions may be concatenated; the resulting regular
  expression matches any string formed by concatenating two substrings
  that respectively match the concatenated subexpressions.

  Two regular expressions may be joined by the infix operator ``|''; the
  resulting regular expression matches any string matching either
  subexpression.

  Repetition takes precedence over concatenation, which in turn takes
  precedence over alternation.  A whole subexpression may be enclosed in
  parentheses to override these precedence rules.

  NNoottee:: If you compile Mutt with the GNU _r_x package, the following
  operators may also be used in regular expressions:


     \\yy Matches the empty string at either the beginning or the end of a
        word.

     \\BB Matches the empty string within a word.

     \\<< Matches the empty string at the beginning of a word.

     \\>> Matches the empty string at the end of a word.

     \\ww Matches any word-constituent character (letter, digit, or
        underscore).

     \\WW Matches any character that is not word-constituent.

     \\`` Matches the empty string at the beginning of a buffer (string).

     \\'' Matches the empty string at the end of a buffer.

  Please note however that these operators are not defined by POSIX, so
  they may or may not be available in stock libraries on various
  systems.


  44..11..22..  SSeeaarrcchhiinngg

  Many of Mutt's commands allow you to specify a pattern to match
  (limit, tag-pattern, delete-pattern, etc.).  There are several ways to
  select messages:



       ~A              all messages
       ~b PATTERN      messages which contain PATTERN in the message body
       ~c USER         messages carbon-copied to USER
       ~C PATTERN      message is either to: or cc: PATTERN
       ~D              deleted messages
       ~d [MIN]-[MAX]  messages with ``date-sent'' in a Date range
       ~E              expired messages
       ~e PATTERN      message which contains PATTERN in the ``Sender'' field
       ~F              flagged messages
       ~f USER         messages originating from USER
       ~h PATTERN      messages which contain PATTERN in the message header
       ~i ID           message which match ID in the ``Message-ID'' field
       ~L PATTERN      message is either originated or received by PATTERN
       ~l              message is addressed to a known mailing list
       ~m [MIN]-[MAX]  message in the range MIN to MAX
       ~n [MIN]-[MAX]  messages with a score in the range MIN to MAX
       ~N              new messages
       ~O              old messages
       ~p              message is addressed to you (consults $alternates)
       ~P              message is from you (consults $alternates)
       ~Q              messages which have been replied to
       ~R              read messages
       ~r [MIN]-[MAX]  messages with ``date-received'' in a Date range
       ~S              superseded messages
       ~s SUBJECT      messages having SUBJECT in the ``Subject'' field.
       ~T              tagged messages
       ~t USER         messages addressed to USER
       ~U              unread messages
       ~x PATTERN      messages which contain PATTERN in the `References' field




  Where PATTERN, USER, ID, and SUBJECT are ``regular expressions''.


  44..11..33..  CCoommpplleexx SSeeaarrcchheess


  Logical AND is performed by specifying more than one criterion.  For
  example:



       ~t mutt ~f elkins




  would select messages which contain the word ``mutt'' in the list of
  recipients aanndd that have the word ``elkins'' in the ``From'' header
  field.

  Mutt also recognizes the following operators to create more complex
  search patterns:


  +o  ! -- logical NOT operator

  +o  | -- logical OR operator


  +o  () -- logical grouping operator

  Here is an example illustrating a complex search pattern.  This
  pattern will select all messages which do not contain ``mutt'' in the
  ``To'' or ``Cc'' field and which are from ``elkins''.



       !(~t mutt|~c mutt) ~f elkins





  44..11..44..  SSeeaarrcchhiinngg bbyy DDaattee

  Mutt supports two types of dates, _a_b_s_o_l_u_t_e and _r_e_l_a_t_i_v_e.

  AAbbssoolluuttee.  Dates mmuusstt be in DD/MM/YY format (month and year are
  optional, defaulting to the current month and year).  An example of a
  valid range of dates is:



       Limit to messages matching: ~d 20/1/95-31/10




  If you omit the minimum (first) date, and just specify ``-DD/MM/YY'',
  all messages _b_e_f_o_r_e the given date will be selected.  If you omit the
  maximum (second) date, and specify ``DD/MM/YY-'', all messages _a_f_t_e_r
  the given date will be selected.  If you specify a single date with no
  dash (``-''), only messages sent on the given date will be selected.

  RReellaattiivvee.  This type of date is relative to the current date, and may
  be specified as:

  +o  >_o_f_f_s_e_t (messages older than _o_f_f_s_e_t units)

  +o  <_o_f_f_s_e_t (messages newer than _o_f_f_s_e_t units)

  +o  =_o_f_f_s_e_t (messages exactly _o_f_f_s_e_t units old)

  _o_f_f_s_e_t is specified as a positive number with one of the following
  units:

  y       years
  m       months
  w       weeks
  d       days



  Example: to select messages less than 1 month old, you would use


       Limit to messages matching: ~d <1m




  NNoottee:: all dates used when searching are relative to the llooccaall time
  zone, so unless you change the setting of your ``$index_format'' to
  include a %[...] format, these are nnoott the dates shown in the main
  index.
  44..22..  UUssiinngg TTaaggss


  Sometimes it is desirable to perform an operation on a group of
  messages all at once rather than one at a time.  An example might be
  to save messages to a mailing list to a separate folder, or to delete
  all messages with a given subject.  To tag all messages matching a
  pattern, use the tag-pattern function, which is bound to ``control-T''
  by default.  Or you can select individual messages by hand using the
  ``tag-message'' function, which is bound to ``t'' by default.  See
  ``searching'' for Mutt's searching syntax.

  Once you have tagged the desired messages, you can use the ``tag-
  prefix'' operator, which is the ``;'' (semicolon) key by default.
  When the ``tag-prefix'' operator is used, the nneexxtt operation will be
  applied to all tagged messages if that operation can be used in that
  manner.  If the ``$auto_tag'' variable is set, the next operation
  applies to the tagged messages automatically, without requiring the
  ``tag-prefix''.


  44..33..  UUssiinngg HHooookkss

  A _h_o_o_k is a concept borrowed from the EMACS editor which allows you to
  execute arbitrary commands before performing some operation.  For
  example, you may wish to tailor your configuration based upon which
  mailbox you are reading, or to whom you are sending mail.  In the Mutt
  world, a _h_o_o_k consists of a ``regular expression'' along with a
  configuration option/command.  See

  +o  ``folder-hook''

  +o  ``send-hook''

  +o  ``save-hook''

  +o  ``mbox-hook''

  +o  ``fcc-hook''

  +o  ``fcc-save-hook''

     for specific details on each type of _h_o_o_k available.


  44..33..11..  MMeessssaaggee MMaattcchhiinngg iinn HHooookkss

  Hooks that act upon messages (send-hook, save-hook, fcc-hook) are
  evaluated in a slightly different manner.  For the other types of
  hooks, a ``regular expression''.  But in dealing with messages a finer
  grain of control is needed for matching since for different purposes
  you want to match different criteria.

  Mutt allows the use of the ``search pattern'' language for matching
  messages in hook commands.  This works in exactly the same way as it
  would when _l_i_m_i_t_i_n_g or _s_e_a_r_c_h_i_n_g the mailbox, except that you are
  restricted to those operators which match information from the
  envelope of the message (i.e.  from, to, cc, date, subject, etc.).

  For example, if you wanted to set your return address based upon
  sending mail to a specific address, you could do something like:


       send-hook '~t ^me@cs\.hmc\.edu$' 'my_hdr From: Mutt User <user@host>'


  which would execute the given command when sending mail to
  _m_e_@_c_s_._h_m_c_._e_d_u.

  However, it is not required that you write the pattern to match using
  the full searching language.  You can still specify a simple _r_e_g_u_l_a_r
  _e_x_p_r_e_s_s_i_o_n like the other hooks, in which case Mutt will translate
  your pattern into the full language, using the translation specified
  by the ``$dfault_hook'' variable.  The pattern is translated at the
  time the hook is declared, so the value of ``$dfault_hook'' that is in
  effect at that time will be used.


  44..44..  EExxtteerrnnaall AAddddrreessss QQuueerriieess

  Mutt supports connecting to external directory databases such as LDAP,
  ph/qi, bbdb, or NIS through a wrapper script which connects to mutt
  using a simple interface.  Using the ``$query_command'' variable, you
  specify the wrapper command to use.  For example:



       set query_command = "mutt_ldap_query.pl '%s'"




  The wrapper script should accept the query on the command-line.  It
  should return a one line message, than each matching response on a
  single line, each line containing a tab separated address then name
  then some other optional information.  On error, or if there are no
  matching addresses, return a non-zero exit code and a one line error
  message.

  An example multiple response output:


       Searching database ... 20 entries ... 3 matching:
       me@cs.hmc.edu   Michael Elkins  mutt dude
       blong@fiction.net       Brandon Long    mutt and more
       roessler@guug.de        Thomas Roessler mutt pgp




  There are two mechanisms for accessing the query function of mutt.
  One is to do a query from the index menu using the query function
  (default: Q).  This will prompt for a query, then bring up the query
  menu which will list the matching responses.  From the query menu, you
  can select addresses to create aliases, or to mail.  You can tag
  multiple messages to mail, start a new query, or have a new query
  appended to the current responses.

  The other mechanism for accessing the query function is for address
  completion, similar to the alias completion.  In any prompt for
  address entry, you can use the complete-query function (default: ^T)
  to run a query based on the current address you have typed.  Like
  aliases, mutt will look for what you have typed back to the last space
  or comma.  If there is a single response for that query, mutt will
  expand the address in place.  If there are multiple responses, mutt
  will activate the query menu.  At the query menu, you can select one
  or more addresses to be added to the prompt.





  44..55..  MMaaiillbbooxx FFoorrmmaattss

  Mutt supports reading and writing of four different mailbox formats:
  mbox, MMDF, MH and Maildir.  The mailbox type is autodetected, so
  there is no need to use a flag for different mailbox types.  When
  creating new mailboxes, Mutt uses the default specified with the
  ``$mbox_type'' variable.

  mmbbooxx.  This is the most widely used mailbox format for UNIX.  All
  messages are stored in a single file.  Each message has a line of the
  form:



       From me@cs.hmc.edu Fri, 11 Apr 1997 11:44:56 PST




  to denote the start of a new message (this is often referred to as the
  ``From_'' line).

  MMMMDDFF.  This is a variant of the _m_b_o_x format.  Each message is
  surrounded by lines containing ``^A^A^A^A'' (four control-A's).

  MMHH. A radical departure from _m_b_o_x and _M_M_D_F, a mailbox consists of a
  directory and each message is stored in a separate file.  The filename
  indicates the message number (however, this is may not correspond to
  the message number Mutt displays). Deleted messages are renamed with a
  comma (,) prepended to the filename. NNoottee:: Mutt detects this type of
  mailbox by looking for either .mh_sequences or .xmhcache (needed to
  distinguish normal directories from MH mailboxes). Mutt does not
  update these files, yet.

  MMaaiillddiirr.  The newest of the mailbox formats, used by the Qmail MTA (a
  replacement for sendmail).  Similar to _M_H, except that it adds three
  subdirectories of the mailbox: _t_m_p, _n_e_w and _c_u_r.  Filenames for the
  messages are chosen in such a way they are unique, even when two
  programs are writing the mailbox over NFS, which means that no file
  locking is needed.


  44..66..  MMaaiillbbooxx SShhoorrttccuuttss

  There are a number of built in shortcuts which refer to specific
  mailboxes.  These shortcuts can be used anywhere you are prompted for
  a file or mailbox path.


  +o  ! -- refers to your ``$spool'' (incoming) mailbox

  +o  > -- refers to your ``$mbox'' file

  +o  < -- refers to your ``$record'' file

  +o  - -- refers to the file you've last visited

  +o  ~ -- refers to your home directory

  +o  = or + -- refers to your ``$folder'' directory

  +o  @_a_l_i_a_s -- refers to the ``default save folder'' as determined by
     the address of the alias



  44..77..  HHaannddlliinngg MMaaiilliinngg LLiissttss


  Mutt has a few configuration options that make dealing with large
  amounts of mail easier.  The first thing you must do is to let Mutt
  know what addresses you consider to be mailing lists (technically this
  does not have to be a mailing list, but that is what it is most often
  used for).  This is accomplished through the use of the ``lists''
  command in your muttrc.

  Now that Mutt knows what your mailing lists are, it can do several
  things, the first of which is the ability to show the list name in the
  _i_n_d_e_x menu display.  This is useful to distinguish between personal
  and list mail in the same mailbox.  In the ``$index_format'' variable,
  the escape ``%L'' will return the string ``To <list>'' when ``list''
  appears in the ``To'' field, and ``Cc <list>'' when it appears in the
  ``Cc'' field (otherwise it returns the name of the author).

  Often times the ``To'' and ``Cc'' fields in mailing list messages tend
  to get quite large. Most people do not bother to remove the author of
  the message they are reply to from the list, resulting in two or more
  copies being sent to that person.  The ``list-reply'' function, which
  by default is bound to ``L'' in the _i_n_d_e_x menu and _p_a_g_e_r, helps reduce
  the clutter by only replying to the mailing list addresses instead of
  all recipients.

  The other method some mailing list admins use is to generate a
  ``Reply-To'' field which points back to the mailing list address
  rather than the author of the message.  This can create problems when
  trying to reply directly to the author in private, since most mail
  clients will automatically reply to the address given in the ``Reply-
  To'' field.  Mutt uses the ``$reply_to'' variable to help decide which
  address to use.  If set, you will be prompted as to whether or not you
  would like to use the address given in the ``Reply-To'' field, or
  reply directly to the address given in the ``From'' field.  When
  unset, the ``Reply-To'' field will be used when present.

  Lastly, Mutt has the ability to ``sort'' the mailbox into ``threads''.
  A thread is a group of messages which all relate to the same subject.
  This is usually organized into a tree-like structure where a message
  and all of its replies are represented graphically.  If you've ever
  used a threaded news client, this is the same concept.  It makes
  dealing with large volume mailing lists easier because you can easily
  delete uninteresting threads and quickly find topics of value.


  44..88..  DDeelliivveerryy SSttaattuuss NNoottiiffiiccaattiioonn ((DDSSNN)) SSuuppppoorrtt

  RFC1894 defines a set of MIME content types for relaying information
  about the status of electronic mail messages.  These can be thought of
  as ``return receipts.'' Berkeley sendmail 8.8.x currently has some
  command line options in which the mail client can make requests as to
  what type of status messages should be returned.

  To support this, there are two variables. ``$dsn_notify'' is used to
  request receipts for different results (such as failed message,
  message delivered, etc.).  ``$dsn_return'' requests how much of your
  message should be returned with the receipt (headers or full message).
  Refer to the man page on sendmail for more details on DSN.


  44..99..  PPOOPP33 SSuuppppoorrtt ((OOPPTTIIOONNAALL))


  If Mutt was compiled with POP3 support (by running the _c_o_n_f_i_g_u_r_e
  script with the _-_-_e_n_a_b_l_e_-_p_o_p flag), it has the ability to fetch your
  mail from a remote server for local browsing.  When you invoke the
  _f_e_t_c_h_-_m_a_i_l function (default: G), Mutt attempts to connect to
  ``pop_host'' and authenticate by logging in as ``pop_user''.  After
  the connection is established, you will be prompted for your password
  on the remote system.

  Once you have been authenticated, Mutt will fetch all your new mail
  and place it in the local ``spoolfile''.  After this point, Mutt runs
  exactly as if the mail had always been local.

  NNoottee:: The POP3 support is there only for convenience, and it's rather
  limited.  If you need more functionality you should consider using a
  specialized program, such as fetchmail


  55..  MMuutttt''ss MMIIMMEE SSuuppppoorrtt

  Quite a bit of effort has been made to make Mutt the premier text-mode
  MIME MUA.  Every effort has been made to provide the functionality
  that the discerning MIME user requires, and the conformance to the
  standards wherever possible.  When configuring Mutt for MIME, there
  are two extra types of configuration files which Mutt uses.  One is
  the mime.types file, which contains the mapping of file extensions to
  IANA MIME types.  The other is the mailcap file, which specifies the
  external commands to use for handling specific MIME types.


  55..11..  UUssiinngg MMIIMMEE iinn MMuutttt

  There are three areas/menus in Mutt which deal with MIME, they are the
  pager (while viewing a message), the attachment menu and the compose
  menu.


  55..11..11..  VViieewwiinngg MMIIMMEE mmeessssaaggeess iinn tthhee ppaaggeerr

  When you select a message from the index and view it in the pager,
  Mutt decodes the message to a text representation.  Mutt internally
  supports a number of MIME types, including text/plain, text/enriched,
  message/rfc822, and message/news.  In addition, the export controlled
  version of Mutt recognizes a variety of PGP MIME types, including
  PGP/MIME and application/pgp.

  Mutt will denote attachments with a couple lines describing them.
  These lines are of the form:


       [-- Attachment #1: Description --]
       [-- Type: text/plain, Encoding: 7bit, Size: 10000 --]




  Where the Description is the description or filename given for the
  attachment, and the Encoding is one of 7bit/8bit/quoted-print-
  able/base64/binary.

  If Mutt cannot deal with a MIME type, it will display a message like:


       [-- image/gif is unsupported (use 'v' to view this part) --]





  55..11..22..  TThhee AAttttaacchhmmeenntt MMeennuu

  The default binding for view-attachments is `v', which displays the
  attachment menu for a message.  The attachment menu displays a list of
  the attachments in a message.  From the attachment menu, you can save,
  print, pipe, delete, and view attachments.  You can apply these
  operations to a group of attachments at once, by tagging the
  attachments and by using the ``tag-prefix'' operator.  You can also
  reply to the current message from this menu, and only the current
  attachment (or the attachments tagged) will be quoted in your reply.
  You can view attachments as text, or view them using the mailcap
  viewer definition.  See the help on the attachment menu for more
  information.


  55..11..33..  TThhee CCoommppoossee MMeennuu

  The compose menu is the menu you see before you send a message.  It
  allows you to edit the recipient list, the subject, and other aspects
  of your message.  It also contains a list of the attachments of your
  message, including the main body.  From this menu, you can print,
  copy, filter, pipe, edit, compose, review, and rename an attachment or
  a list of tagged attachments.  You can also modifying the attachment
  information, notably the type, encoding and description.

  Attachments appear as follows:

  -   1 [text/plain, 7bit, 1K]             /tmp/mutt-euler-8082-0 <no description>
      2 [applica/x-gunzip, base64, 422K]   ~/src/mutt-0.85.tar.gz <no description>



  The '-' denotes that Mutt will delete the file after sending the
  message.  It can be toggled with the toggle-unlink command (default:
  u).  The next field is the MIME content-type, and can be changed with
  the edit-type command (default: ^T).  The next field is the encoding
  for the attachment, which allows a binary message to be encoded for
  transmission on 7bit links.  It can be changed with the edit-encoding
  command (default: ^E).  The next field is the size of the attachment,
  rounded to kilobytes or megabytes.  The next field is the filename,
  which can be changed with the rename-file command (default: R).  The
  final field is the description of the attachment, and can be changed
  with the edit-description command (default: d).


  55..22..  MMIIMMEE TTyyppee ccoonnffiigguurraattiioonn wwiitthh mmiimmee..ttyyppeess

  When you add an attachment to your mail message, Mutt searches your
  personal mime.types file at ${HOME}/.mime.types, and then the system
  mime.types file at SHAREDIR/mime.types.  SHAREDIR is defined at
  compilation time, and can be determined by typing mutt -v from the
  command line.

  The mime.types file consist of lines containing a MIME type and a
  space separated list of extensions.  For example:


       application/postscript          ps eps
       application/pgp                 pgp
       audio/x-aiff                    aif aifc aiff




  A sample mime.types file comes with the Mutt distribution, and should
  contain most of the MIME types you are likely to use.
  If Mutt can not determine the mime type by the extension of the file
  you attach, it will look at the file.  If the file is free of binary
  information, Mutt will assume that the file is plain text, and mark it
  as text/plain.  If the file contains binary information, then Mutt
  will mark it as application/octect-stream.  You can change the MIME
  type that Mutt assigns to an attachment by using the edit-type command
  from the compose menu (default: ^T).  When typing in the MIME type,
  Mutt requires that major type be one of the 5 types: application,
  text, image, video, or audio.  If you attempt to use a different major
  type, Mutt will abort the change.


  55..33..  MMIIMMEE VViieewweerr ccoonnffiigguurraattiioonn wwiitthh mmaaiillccaapp

  Mutt supports RFC 1524 MIME Configuration, in particular the Unix
  specific format specified in Appendix A of RFC 1524.  This file format
  is commonly referred to as the mailcap format.  Many MIME compliant
  programs utilize the mailcap format, allowing you to specify handling
  for all MIME types in one place for all programs.  Programs known to
  use this format include Netscape, XMosaic, lynx and metamail.

  In order to handle various MIME types that Mutt can not handle
  internally, Mutt parses a series of external configuration files to
  find an external handler.  The default search string for these files
  is a colon delimited list set to


       ${HOME}/.mailcap:SHAREDIR/mailcap:/etc/mailcap:/usr/etc/mailcap:/usr/local/etc/mailcap




  where $HOME is your home directory and SHAREDIR is the shared direc-
  tory defined at compile time (visible from mutt -v).

  In particular, the metamail distribution will install a mailcap file,
  usually as /usr/local/etc/mailcap, which contains some baseline
  entries.


  55..33..11..  TThhee BBaassiiccss ooff tthhee mmaaiillccaapp ffiillee

  A mailcap file consists of a series of lines which are comments,
  blank, or definitions.

  A comment line consists of a # character followed by anything you
  want.

  A blank line is blank.

  A definition line consists of a content type, a view command, and any
  number of optional fields.  Each field of a definition line is divided
  by a semicolon ';' character.

  The content type is specified in the MIME standard type/subtype
  method.  For example, text/plain, text/html, image/gif, etc.  In
  addition, the mailcap format includes two formats for wildcards, one
  using the special '*' subtype, the other is the implicit wild, where
  you only include the major type.  For example, image/*, or video, will
  match all image types and video types, respectively.

  The view command is a Unix command for viewing the type specified.
  There are two different types of commands supported. The default is to
  send the body of the MIME message to the command on stdin. You can
  change this behaviour by using %s as a parameter to your view command.
  This will cause Mutt to save the body of the MIME message to a
  temporary file, and then call the view command with the %s replaced by
  the name of the temporary file. In both cases, Mutt will turn over the
  terminal to the view program until the program quits, at which time
  Mutt will remove the temporary file if it exists.

  So, in the simplest form, you can send a text/plain message to the
  external pager more on stdin:


       text/plain; more




  Or, you could send the message as a file:


       text/plain; more %s




  Perhaps you would like to use lynx to interactively view a text/html
  message:


       text/html; lynx "%s"




  In this case, lynx does not support viewing a file from stdin, so you
  must use the %s syntax.  NNoottee:: _S_o_m_e _o_l_d_e_r _v_e_r_s_i_o_n_s _o_f _l_y_n_x _c_o_n_t_a_i_n _a
  _b_u_g _w_h_e_r_e _t_h_e_y _w_i_l_l _c_h_e_c_k _t_h_e _m_a_i_l_c_a_p _f_i_l_e _f_o_r _a _v_i_e_w_e_r _f_o_r _t_e_x_t_/_h_t_m_l_.
  _T_h_e_y _w_i_l_l _f_i_n_d _t_h_e _l_i_n_e _w_h_i_c_h _c_a_l_l_s _l_y_n_x_, _a_n_d _r_u_n _i_t_.  _T_h_i_s _c_a_u_s_e_s
  _l_y_n_x _t_o _c_o_n_t_i_n_u_o_u_s_l_y _s_p_a_w_n _i_t_s_e_l_f _t_o _v_i_e_w _t_h_e _o_b_j_e_c_t_.

  On the other hand, maybe you don't want to use lynx interactively, you
  just want to have it convert the text/html to text/plain, then you can
  use:


       text/html; lynx -dump "%s" | more




  Perhaps you wish to use lynx to view text/html files, and a pager on
  all other text formats, then you would use the following:


       text/html; lynx "%s"
       text/*; more




  This is the simplest form of a mailcap file.


  55..33..22..  AAddvvaanncceedd mmaaiillccaapp UUssaaggee





  55..33..22..11..  OOppttiioonnaall FFiieellddss

  In addition to the required content-type and view command fields, you
  can add semi-colon ';' separated fields to set flags and other
  options.  Mutt recognizes the following optional fields:

     ccooppiioouussoouuttppuutt
        This flag tells Mutt that the command passes possibly large
        amounts of text on stdout.  This causes Mutt to invoke a pager
        (either the internal pager or the external pager defined by the
        pager variable) on the output of the view command.  Without this
        flag, Mutt assumes that the command is interactive.  One could
        use this to replace the pipe to more in the lynx -dump example
        in the Basic section:


          text/html; lynx -dump %s ; copiousoutput




     This will cause lynx to format the text/html output as text/plain
     and Mutt will use your standard pager to display the results.

     nneeeeddsstteerrmmiinnaall
        Mutt uses this flag when viewing attachments with ``autoview'',
        in order to decide whether it should honor the setting of the
        ``$wait_key'' variable or not.  When an attachment is viewed
        using an interactive program, and the corresponding mailcap
        entry has a _n_e_e_d_s_t_e_r_m_i_n_a_l flag, Mutt will use ``$wait_key'' and
        the exit status of the program to decide if it will ask you to
        press a key after the external program has exited.  In all other
        situations it will not prompt you for a key.

     ccoommppoossee==<<ccoommmmaanndd>>
        This flag specifies the command to use to create a new
        attachment of a specific MIME type.  Mutt supports this from the
        compose menu.

     ccoommppoosseettyyppeedd==<<ccoommmmaanndd>>
        This flag specifies the command to use to create a new
        attachment of a specific MIME type.  This command differs from
        the compose command in that mutt will expect standard MIME
        headers on the data.  This can be used to specify parameters,
        filename, description, etc. for a new attachment.   Mutt
        supports this from the compose menu.

     pprriinntt==<<ccoommmmaanndd>>
        This flag specifies the command to use to print a specific MIME
        type.  Mutt supports this from the attachment and compose menus.

     eeddiitt==<<ccoommmmaanndd>>
        This flag specifies the command to use to edit a specific MIME
        type.  Mutt supports this from the compose menu, and also uses
        it to compose new attachments.  Mutt will default to the defined
        editor for text attachments.

     nnaammeetteemmppllaattee==<<tteemmppllaattee>>
        This field specifies the format for the file denoted by %s in
        the command fields.  Certain programs will require a certain
        file extension, for instance, to correctly view a file.  For
        instance, lynx will only interpret a file as text/html if the
        file ends in .html.  So, you would specify lynx as a text/html
        viewer with a line in the mailcap file like:


     text/html; lynx %s; nametemplate=%s.html




     tteesstt==<<ccoommmmaanndd>>
        This field specifies a command to run to test whether this
        mailcap entry should be used.  The command is defined with the
        command expansion rules defined in the next section.  If the
        command returns 0, then the test passed, and Mutt uses this
        entry.  If the command returns non-zero, then the test failed,
        and Mutt continues searching for the right entry.  NNoottee:: _t_h_e
        _c_o_n_t_e_n_t_-_t_y_p_e _m_u_s_t _m_a_t_c_h _b_e_f_o_r_e _M_u_t_t _p_e_r_f_o_r_m_s _t_h_e _t_e_s_t_.  For
        example:


          text/html; netscape -remote 'openURL(%s)' ; test=RunningX
          text/html; lynx %s




     In this example, Mutt will run the program RunningX which will
     return 0 if the X Window manager is running, and non-zero if it
     isn't.  If RunningX returns 0, then Mutt will call netscape to dis-
     play the text/html object.  If RunningX doesn't return 0, then Mutt
     will go on to the next entry and use lynx to display the text/html
     object.


  55..33..22..22..  SSeeaarrcchh OOrrddeerr

  When searching for an entry in the mailcap file, Mutt will search for
  the most useful entry for its purpose.  For instance, if you are
  attempting to print an image/gif, and you have the following entries
  in your mailcap file, Mutt will search for an entry with the print
  command:


       image/*;        xv %s
       image/gif;      ; print= anytopnm %s | pnmtops | lpr; \
                       nametemplate=%s.gif




  Mutt will skip the image/* entry and use the image/gif entry with the
  print command.

  In addition, you can use this with ``Autoview'' to denote two commands
  for viewing an attachment, one to be viewed automatically, the other
  to be viewed interactively from the attachment menu.  In addition, you
  can then use the test feature to determine which viewer to use
  interactively depending on your environment.


       text/html;      netscape -remote 'openURL(%s)' ; test=RunningX
       text/html;      lynx %s; nametemplate=%s.html
       text/html;      lynx -dump %s; nametemplate=%s.html; copiousoutput




  For ``Autoview'', Mutt will choose the third entry because of the
  copiousoutput tag.  For interactive viewing, Mutt will run the program
  RunningX to determine if it should use the first entry.  If the
  program returns non-zero, Mutt will use the second entry for interac-
  tive viewing.


  55..33..22..33..  CCoommmmaanndd EExxppaannssiioonn

  The various commands defined in the mailcap files are passed to the
  /bin/sh shell using the system() function.  Before the command is
  passed to /bin/sh -c, it is parsed to expand various special
  parameters with information from Mutt.  The keywords Mutt expands are:

     %%ss As seen in the basic mailcap section, this variable is expanded
        to a filename specified by the calling program.  This file
        contains the body of the message to view/print/edit or where the
        composing program should place the results of composition.  In
        addition, the use of this keyword causes Mutt to not pass the
        body of the message to the view/print/edit program on stdin.

     %%tt Mutt will expand %t to the text representation of the content
        type of the message in the same form as the first parameter of
        the mailcap definition line, ie text/html or image/gif.

     %%{{<<ppaarraammeetteerr>>}}
        Mutt will expand this to the value of the specified parameter
        from the Content-Type: line of the mail message.  For instance,
        if Your mail message contains:


          Content-Type: text/plain; charset=iso-8859-1




     then Mutt will expand %{charset} to iso-8859-1.  The default meta-
     mail mailcap file uses this feature to test the charset to spawn an
     xterm using the right charset to view the message.

     %%  This will be replaced by a %

  Mutt does not currently support the %F and %n keywords specified in
  RFC 1524.  The main purpose of these parameters is for multipart mes-
  sages, which is handled internally by Mutt.


  55..33..33..  EExxaammppllee mmaaiillccaapp ffiilleess

  This mailcap file is fairly simple and standard:

  ______________________________________________________________________
  # I'm always running X :)
  video/*;        xanim %s > /dev/null
  image/*;        xv %s > /dev/null

  # I'm always running netscape (if my computer had more memory, maybe)
  text/html;      netscape -remote 'openURL(%s)'
  ______________________________________________________________________



  This mailcap file shows quite a number of examples:






  ______________________________________________________________________
  # Use xanim to view all videos   Xanim produces a header on startup,
  # send that to /dev/null so I don't see it
  video/*;        xanim %s > /dev/null

  # Send html to a running netscape by remote
  text/html;      netscape -remote 'openURL(%s)'; test=RunningNetscape

  # If I'm not running netscape but I am running X, start netscape on the
  # object
  text/html;      netscape %s; test=RunningX

  # Else use lynx to view it as text
  text/html;      lynx %s

  # This version would convert the text/html to text/plain
  text/html;      lynx -dump %s; copiousoutput

  # enriched.sh converts text/enriched to text/html and then uses
  # lynx -dump to convert it to text/plain
  text/enriched;  enriched.sh ; copiousoutput

  # I use enscript to print text in two columns to a page
  text/*;         more %s; print=enscript -2Gr %s

  # Netscape adds a flag to tell itself to view jpegs internally
  image/jpeg;xv %s; x-mozilla-flags=internal

  # Use xv to view images if I'm running X
  # In addition, this uses the \ to extend the line and set my editor
  # for images
  image/*;xv %s; test=RunningX; \
          edit=xpaint %s

  # Convert images to text using the netpbm tools
  image/*;  (anytopnm %s | pnmscale -xysize 80 46 | ppmtopgm | pgmtopbm |
  pbmtoascii -1x2 ) 2>&1 ; copiousoutput

  # Send excel spreadsheets to my NT box
  application/ms-excel; open.pl %s
  ______________________________________________________________________




  55..44..  MMIIMMEE AAuuttoovviieeww

  In addition to explicitly telling Mutt to view an attachment with the
  MIME viewer defined in the mailcap file, Mutt has support for
  automatically viewing MIME attachments while in the pager.

  To work, you must define a viewer in the mailcap file which uses the
  copiousoutput option to denote that it is non-interactive.  Usually,
  you also use the entry to convert the attachment to a text
  representation which you can view in the pager.

  You then use the auto_view muttrc command to list the content-types
  that you wish to view automatically.

  For instance, if you set auto_view to:


       auto_view text/html text/enriched application/x-gunzip application/postscript image/gif application/x-tar-gz



  Mutt could use the following mailcap entries to automatically view
  attachments of these types.


       text/html;      lynx -dump %s; copiousoutput; nametemplate=%s.html
       text/enriched;  enriched.sh  ; copiousoutput
       image/*;        anytopnm %s | pnmscale -xsize 80 -ysize 50 | ppmtopgm | pgmtopbm | pbmtoascii ; copiousoutput
       application/x-gunzip;   gzcat; copiousoutput
       application/x-tar-gz; gunzip -c %s | tar -tf - ; copiousoutput
       application/postscript; ps2ascii %s; copiousoutput




  55..55..  MMIIMMEE MMuullttiippaarrtt//AAlltteerrnnaattiivvee

  Mutt has some heuristics for determining which attachment of a
  multipart/alternative type to display.  First, mutt will check the
  alternative_order list to determine if one of the available types is
  preferred.  The alternative_order list consists of a number of
  mimetypes in order, including support for implicit and explicit
  wildcards, for example:


       alternative_order text/enriched text/plain text application/postscript image/*




  Next, mutt will check if any of the types have a defined
  ``auto_view'', and use that.  Failing that, Mutt will look for any
  text type.  As a last attempt, mutt will look for any type it knows
  how to handle.


  66..  RReeffeerreennccee

  66..11..  CCoommmmaanndd lliinnee ooppttiioonnss

  Running mutt with no arguments will make Mutt attempt to read your
  spool mailbox.  However, it is possible to read other mailboxes and to
  send messages from the command line as well.



       -a      attach a file to a message
       -c      specify a carbon-copy (Cc) address
       -e      specify a config command to be run after initilization files are read
       -F      specify an alternate file to read initialization commands
       -f      specify a mailbox to load
       -h      print help on command line options
       -H      specify a draft file from which to read a header and body
       -i      specify a file to include in a message composition
       -n      do not read the system Muttrc
       -m      specify a default mailbox type
       -p      recall a postponed message
       -R      open mailbox in read-only mode
       -s      specify a subject (enclose in quotes if it contains spaces)
       -v      show version number and compile-time definitions
       -x      simulate the mailx(1) compose mode
       -y      show a menu containing the files specified by the mailboxes command
       -z      exit immediately if there are no messages in the mailbox
       -Z      open the first folder with new message,exit immediately if none



  To read messages in a mailbox

  mutt [ -nz ] [ -F _m_u_t_t_r_c ] [ -m _t_y_p_e ] [ -f _m_a_i_l_b_o_x ]

  To compose a new message

  mutt [ -n ] [ -F _m_u_t_t_r_c ] [ -a _f_i_l_e ] [ -c _a_d_d_r_e_s_s ] [ -i _f_i_l_e_n_a_m_e ] [
  -s _s_u_b_j_e_c_t ] _a_d_d_r_e_s_s [ _a_d_d_r_e_s_s ... ]

  Mutt also supports a ``batch'' mode to send prepared messages.  Simply
  redirect input from the file you wish to send.  For example,

  mutt -s "data set for run #2" professor@bigschool.edu < ~/run2.dat

  This command will send a message to ``professor@bigschool.edu'' with a
  subject of ``data set for run #2''.  In the body of the message will
  be the contents of the file ``~/run2.dat''.


  66..22..  CCoonnffiigguurraattiioonn CCoommmmaannddss

  The following are the commands understood by mutt.


  +o  ``alias'' _k_e_y _a_d_d_r_e_s_s [ , _a_d_d_r_e_s_s, ... ]

  +o  ``unalias'' _k_e_y _a_d_d_r_e_s_s [ , _a_d_d_r_e_s_s, ... ]

  +o  ``alternative_order'' _m_i_m_e_t_y_p_e [ _m_i_m_e_t_y_p_e ... ]

  +o  ``auto_view'' _m_i_m_e_t_y_p_e [ _m_i_m_e_t_y_p_e ... ]

  +o  ``bind'' _m_a_p _k_e_y _f_u_n_c_t_i_o_n

  +o  ``color'' _o_b_j_e_c_t _f_o_r_e_g_r_o_u_n_d _b_a_c_k_g_r_o_u_n_d [ _r_e_g_e_x_p ]

  +o  ``folder-hook'' _p_a_t_t_e_r_n _c_o_m_m_a_n_d

  +o  ``ignore'' _p_a_t_t_e_r_n [ _p_a_t_t_e_r_n ... ]

  +o  ``unignore'' _p_a_t_t_e_r_n [ _p_a_t_t_e_r_n ... ]

  +o  ``hdr_order'' _h_e_a_d_e_r [ _h_e_a_d_e_r ... ]

  +o  ``lists'' _a_d_d_r_e_s_s [ _a_d_d_r_e_s_s ... ]

  +o  ``unlists'' _a_d_d_r_e_s_s [ _a_d_d_r_e_s_s ... ]

  +o  ``macro'' _m_e_n_u _k_e_y _s_e_q_u_e_n_c_e

  +o  ``mailboxes'' _f_i_l_e_n_a_m_e [ _f_i_l_e_n_a_m_e ... ]

  +o  ``mono'' _o_b_j_e_c_t _a_t_t_r_i_b_u_t_e [ _r_e_g_e_x_p ]

  +o  ``mbox-hook'' _p_a_t_t_e_r_n _m_a_i_l_b_o_x

  +o  ``my_hdr'' _s_t_r_i_n_g

  +o  ``unmy_hdr'' _f_i_e_l_d [ _f_i_e_l_d ... ]

  +o  ``push'' _s_t_r_i_n_g

  +o  ``save-hook'' _r_e_g_e_x_p _f_i_l_e_n_a_m_e

  +o  ``send-hook'' _r_e_g_e_x_p _c_o_m_m_a_n_d

  +o  ``set'' [no|inv]_v_a_r_i_a_b_l_e[=_v_a_l_u_e] [ _v_a_r_i_a_b_l_e ... ]

  +o  ``toggle'' _v_a_r_i_a_b_l_e [_v_a_r_i_a_b_l_e ... ]

  +o  ``unset'' _v_a_r_i_a_b_l_e [_v_a_r_i_a_b_l_e ... ]

  +o  ``source'' _f_i_l_e_n_a_m_e


  66..33..  CCoonnffiigguurraattiioonn vvaarriiaabblleess



  66..33..11..  aabboorrtt__nnoossuubbjjeecctt

  Type: quadoption
  Default: ask-yes

  If set to _y_e_s, when composing messages and no subject is given at the
  subject prompt, composition will be aborted.  If set to _n_o, composing
  messages with no subject given at the subject prompt will never be
  aborted.


  66..33..22..  aabboorrtt__uunnmmooddiiffiieedd

  Type: quadoption
  Default: yes

  If set to _y_e_s, composition will automatically abort after editing the
  message body if no changes are made to the file (this check only
  happens after the _f_i_r_s_t edit of the file).  When set to _n_o,
  composition will never be aborted.


  66..33..33..  aalliiaass__ffiillee

  Type: string
  Default: ~/.muttrc

  The default file in which to save aliases created by the ``create-
  alias'' function.

  NNoottee:: Mutt will not automatically source this file; you must
  explicitly use the ``source'' command for it to be executed.


  66..33..44..  aalliiaass__ffoorrmmaatt

  Type: string
  Default: "%2n %t %-10a   %r"

  Specifies the format of the data displayed for the `alias' menu.  The
  following printf(3)-style sequences are available.


  %a      alias name
  %n      index number
  %r      address which alias expands to
  %t      character which indicates if the alias is tagged for inclusion (*/ )






  66..33..55..  aallllooww__88bbiitt

  Type: boolean
  Default: set

  Controls whether 8-bit data is converted to 7-bit using either Quoted-
  Printable or Base64 encoding when sending mail.


  66..33..66..  aalltteerrnnaatteess

  Type: string
  Default: none

  A regexp that allows you to specify _a_l_t_e_r_n_a_t_e addresses where you
  receive mail.  This affects Mutt's idea about messages from you and
  addressed to you.


  66..33..77..  aarrrrooww__ccuurrssoorr

  Type: boolean
  Default: unset

  When set, an arrow (``->'') will be used to indicate the current entry
  in menus instead of hiliting the whole line.  On slow network or modem
  links this will make response faster because there is less that has to
  be redrawn on the screen when moving to the next or previous entries
  in the menu.


  66..33..88..  aasscciiii__cchhaarrss

  Type: boolean
  Default: unset

  If set, Mutt will use plain ASCII characters when displaying thread
  and attachment trees, instead of the default _A_C_S characters.


  66..33..99..  aasskkbbcccc

  Type: boolean
  Default: unset

  If set, Mutt will prompt you for blind-carbon-copy (Bcc) recipients
  before editing an outgoing message.


  66..33..1100..  aasskkcccc

  Type: boolean
  Default: unset

  If set, Mutt will prompt you for carbon-copy (Cc) recipients before
  editing the body of an outgoing message.


  66..33..1111..  aattttrriibbuuttiioonn

  Type: format string
  Default: "On %d, %n wrote:"

  This is the string that will precede a message which has been included
  in a reply.  For a full listing of defined escape sequences see the
  section on ``$index_format''.
  66..33..1122..  aauuttooeeddiitt

  Type: boolean
  Default: unset

  When set, Mutt will skip the initial send-menu and allow you to
  immediately begin editing the body of your message when replying to
  another message.  The send-menu may still be accessed once you have
  finished editing the body of your message.

  If the ``$edit_headers'' variable is also set, the initial prompts in
  the send-menu are always skipped, even when composing a new message.


  66..33..1133..  aauuttoo__ttaagg

  Type: boolean
  Default: unset

  When set, functions in the _i_n_d_e_x menu which affect a message will be
  applied to all tagged messages (if there are any).  When unset, you
  must first use the tag-prefix function (default: ";") to make the next
  function apply to all tagged messages.


  66..33..1144..  bbeeeepp

  Type: boolean
  Default: set

  When this variable is set, mutt will beep when an error occurs.


  66..33..1155..  bbeeeepp__nneeww

  Type boolean
  Default: unset

  When this variable is set, mutt will beep whenever it prints a message
  notifying you of new mail.  This is independent of the setting of the
  ``beep'' variable.


  66..33..1166..  cchhaarrsseett

  Type: string
  Default: iso-8859-1

  Character set your terminal uses to display and enter textual data.
  This information is required to properly label outgoing messages which
  contain 8-bit characters so that receiving parties can display your
  messages in the correct character set.


  66..33..1177..  cchheecckk__nneeww

  Type: boolean
  Default: set

  NNoottee:: this option only affects _m_a_i_l_d_i_r and _M_H style mailboxes.

  When _s_e_t, Mutt will check for new mail delivered while the mailbox is
  open.  Especially with MH mailboxes, this operation can take quite
  some time since it involves scanning the directory and checking each
  file to see if it has already been looked at.  If _c_h_e_c_k___n_e_w is _u_n_s_e_t,
  no check for new mail is performed while the mailbox is open.
  66..33..1188..  ccoonnffiirrmmaappppeenndd

  Type: boolean
  Default: set

  When set, Mutt will prompt for confirmation when appending messages to
  an existing mailbox.


  66..33..1199..  ccoonnffiirrmmccrreeaattee

  Type: boolean
  Default: set

  When set, Mutt will prompt for confirmation when saving messages to a
  mailbox which does not yet exist before creating it.


  66..33..2200..  ccooppyy

  Type: quadoption
  Default: yes

  This variable controls whether or not copies of your outgoing messages
  will be saved for later references.  Also see ``record'',
  ``save_name'', ``force_name'' and ``fcc-hook''.


  66..33..2211..  ddaattee__ffoorrmmaatt

  Type: string
  Default: "!%a, %b %d, %Y at %I:%M:%S%p %Z"

  This variable controls the format of the date printed by the ``%d''
  sequence in ``$index_format''.  This is passed to the _s_t_r_f_t_i_m_e call to
  process the date. See the man page for _s_t_r_f_t_i_m_e_(_3_) for the proper
  syntax.

  Unless the first character in the string is a bang (``!''), the month
  and week day names are expanded according to the locale specified in
  the variable ``locale''. If the first character in the string is a
  bang, the bang is discarded, and the month and week day names in the
  rest of the string are expanded in the _C locale (that is in US
  English).


  66..33..2222..  ddeeffaauulltt__hhooookk

  Type: string
  Default: "~f %s | (~P (~c %s | ~t %s))"

  This variable controls how send-hooks, save-hooks, and fcc-hooks will
  be interpreted if they are specified with only a simple regexp,
  instead of a matching pattern.  The hooks are expanded when they are
  declared, so a hook will be interpreted according to the value of this
  variable at the time the hook is declared.  The default value matches
  if the message is either from a user matching the regular expression
  given, or if it is from you (if the from address matches
  ``alternates'') and is to or cc'ed to a user matching the given
  regular expression.


  66..33..2233..  ddeelleettee

  Type: quadoption
  Default: ask-yes
  Controls whether or not messages are really deleted when closing or
  synchronizing a mailbox.  If set to _y_e_s, messages marked for deleting
  will automatically be purged without prompting.  If set to _n_o,
  messages marked for deletion will be kept in the mailbox.


  66..33..2244..  ddeelleettee__ffoorrmmaatt

  Type: string
  Default: "[-- Attachment from %u deleted on %<%D> --]"

  This variable controls the format of the message used to replace an
  attachment when the attachment is deleted.  It uses the same format
  sequences as the ``$index_format'' variable.


  66..33..2255..  ddssnn__nnoottiiffyy

  Type: string
  Default: none

  NNoottee:: you should not enable this unless you are using Sendmail 8.8.x
  or greater.

  This variable sets the request for when notification is returned.  The
  string consists of a comma separated list (no spaces!) of one or more
  of the following: _n_e_v_e_r, to never request notification, _f_a_i_l_u_r_e, to
  request notification on transmission failure, _d_e_l_a_y, to be notified of
  message delays, _s_u_c_c_e_s_s, to be notified of successful transmission.

  Example: set dsn_notify="failure,delay"


  66..33..2266..  ddssnn__rreettuurrnn

  Type: string Default: none

  NNoottee:: you should not enable this unless you are using Sendmail 8.8.x
  or greater.

  This variable controls how much of your message is returned in DSN
  messages.  It may be set to either _h_d_r_s to return just the message
  header, or _f_u_l_l to return the full message.

  Example: set dsn_return=hdrs


  66..33..2277..  eeddiitt__hheeaaddeerrss

  Type: boolean
  Default: unset

  This option allows you to edit the header of your outgoing messages
  along with the body of your message.


  66..33..2288..  eeddiittoorr

  Type: String
  Default: value of environment variable $VISUAL, $EDITOR, or "vi"

  This variable specifies which editor to use when composing messages.




  66..33..2299..  eessccaappee

  Type: string
  Default: ~

  Escape character to use for functions in the builtin editor.


  66..33..3300..  ffaasstt__rreeppllyy

  Type: boolean
  Default: unset

  When set, the initial prompt for recipients and subject are skipped
  when replying to messages, and the initial prompt for subject is
  skipped when forwarding messages.

  NNoottee:: this variable has no effect when the ``$autoedit'' variable is
  set.


  66..33..3311..  ffcccc__aattttaacchh

  Type: boolean
  Default: set

  This variable controls whether or not attachments on outgoing messages
  are saved along with the main body of your message.


  66..33..3322..  ffoollddeerr

  Type: String
  Default: ~/Mail

  Specifies the default location of your mailboxes.  A `+' or `=' at the
  beginning of a pathname will be expanded to the value of this
  variable.  Note that if you change this variable from the default
  value you need to make sure that the assignment occurs _b_e_f_o_r_e you use
  `+' or `=' for any other variables since expansion takes place during
  the `set' command.


  66..33..3333..  ffoolllloowwuupp__ttoo

  Type: boolean
  Default: set

  Controls whether or not the _M_a_i_l_-_F_o_l_l_o_w_u_p_-_T_o header field is generated
  when sending mail.  When _s_e_t, Mutt will generate this field when you
  are replying to a known mailing ``lists''.

  The purpose of this field is to prevent you from receiving duplicate
  copies of replies to messages which you send by specifying that you
  will receive a copy of the message if it is addressed to the mailing
  list (and thus there is no need to also include your address in a
  group reply).


  66..33..3344..  ffoorrccee__nnaammee

  Type: boolean
  Default: unset

  This variable is similar to ``$save_name'', except that Mutt will
  store a copy of your outgoing message by the username of the address
  you are sending to even if that mailbox does not exist.

  Also see the ``$record'' variable.


  66..33..3355..  ffoorrwwaarrdd__ddeeccooddee

  Type: boolean
  Default: set

  Controls the decoding of complex MIME messages into text/plain when
  forwarding a message and the message header is also RFC2047 decoded.
  This variable is only used, if ``mime_forward'' is _u_n_s_e_t, otherwise
  ``mime_forward_decode'' is used instead.


  66..33..3366..  ffoorrwwaarrdd__ffoorrmmaatt

  Type: format string
  Default: "[%a: %s]"

  This variable controls the default subject when forwarding a message.
  It uses the same format sequences as the ``$index_format'' variable.


  66..33..3377..  ffoorrwwaarrdd__qquuoottee

  Type: boolean
  Default: unset

  When _s_e_t forwarded messages included in the main body of the message
  (when ``mime_forward'' is _u_n_s_e_t) will be quoted using
  ``indent_string''.


  66..33..3388..  iinnddeexx__ffoorrmmaatt

  Type: format string
  Default: "%4C %Z %{%b %d} %-15.15L (%4l) %s"

  This variable allows you to customize the message index display to
  your personal taste.

  ``Format strings'' are similar to the strings used in the ``C''
  function printf to format output (see the man page for more detail).
  The following sequences are defined in Mutt:




















  %a      address of the author
  %b      filename of the original message folder (think mailBox)
  %B      the list to which the letter was sent, or else the folder name (%b).
  %c      number of characters (bytes) in the message
  %C      current message number
  %d      date and time of the message in the format specified by
          ``date_format''
  %f      entire From: line (address + real name)
  %F      author name, or recipient name if the message is from you
  %i      message-id of the current message
  %l      number of lines in the message
  %L      list-from function
  %m      total number of message in the mailbox
  %N      message score
  %n      author's real name (or address if missing)
  %O       (_O_riginal save folder)  Where mutt would formerly have stashed the
          message: list name or recipient name if no list
  %s      subject of the message
  %S      status of the message (N/D/d/!/*/r)
  %t      `to:' field (recipients)
  %T      the appropriate character from the $to_chars string
  %u      user (login) name of the author
  %Z      message status flags

  %{fmt}  the date and time of the message is converted to sender's
          time zone, and ``fmt'' is expanded by the system call
          ``strftime''; a leading bang disables locales
  %[fmt]  the date and time of the message is converted to the local
          time zone, and ``fmt'' is expanded by the system call
          ``strftime''; a leading bang disables locales
  %(fmt)  the local date and time when the message was received.
          ``fmt'' is expanded by the system call ``strftime'';
          a leading bang disables locales
  %<fmt>  the current local time. ``fmt'' is expanded by the system
          call ``strftime''; a leading bang disables locales.

  %>X     right justify the rest of the string and pad with character "X"
  %|X     pad to the end of the line with character "X"




  See also: ``$to_chars''.


  66..33..3399..  hhddrrss

  Type: boolean
  Default: set

  When unset, the header fields normally added by the ``my_hdr'' command
  are not created.  This variable _m_u_s_t be unset before composing a new
  message or replying in order to take effect.  If set, the user defined
  header fields are added to every new message.


  66..33..4400..  hheeaaddeerr

  Type: boolean
  Default: unset

  When set, this variable causes Mutt to include the _f_u_l_l header of the
  message you are replying to into the edit buffer.



  66..33..4411..  hheellpp

  Type: boolean
  Default: set

  When set, help lines describing the bindings for the major functions
  provided by each menu are displayed on the first line of the screen.

  NNoottee:: The binding will not be displayed correctly if the function is
  bound to a sequence rather than a single keystroke.  Also, the help
  line may not be updated if a binding is changed while Mutt is running.
  Since this variable is primarily aimed at new users, neither of these
  should present a major problem.


  66..33..4422..  hhiissttoorryy

  Type: number
  Default: 10

  This variable controls the size (in number of strings remembered) of
  the string history buffer. The buffer is cleared each time the
  variable is set.


  66..33..4433..  hhoossttnnaammee

  Type: string
  Default: varies

  Specifies the hostname to use after the ``@'' in local e-mail
  addresses.  This overrides the compile time definition obtained from
  /etc/resolv.conf.


  66..33..4444..  iiggnnoorree__lliisstt__rreeppllyy__ttoo

  Type: boolean
  Default: unset

  Affects the behaviour of the _r_e_p_l_y function when replying to messages
  from mailing lists.  When set, if the ``Reply-To:'' field is set to
  the same value as the ``To:'' field, Mutt assumes that the ``Reply-
  To:'' field was set by the mailing list to automate responses to the
  list, and will ignore this field.  To direct a response to the mailing
  list when this option is set, use the _l_i_s_t_-_r_e_p_l_y function; _g_r_o_u_p_-_r_e_p_l_y
  will reply to both the sender and the list.


  66..33..4455..  iinn__rreeppllyy__ttoo

  Type: format string
  Default: "%i; from \"%n\" on %{!%a, %b %d, %Y at %I:%M:%S%p}"

  This specifies the format of the In-Reply-To: header field added when
  replying to a message. For a full listing of defined escape sequences
  see the section on ``$index_format''.


  66..33..4466..  iinncclluuddee

  Type: quadoption
  Default: ask-yes

  Controls whether or not a copy of the message(s) you are replying to
  is included in your reply.
  66..33..4477..  iinnddeenntt__ssttrriinngg

  Type: format string
  Default: "> "

  Specifies the string to prepend to each line of text quoted in a
  message to which you are replying.  You are strongly encouraged not to
  change this value, as it tends to agitate the more fanatical netizens.


  66..33..4488..  iissppeellll

  Type: string
  Default: "ispell"

  How to invoke ispell (GNU's spell-checking software).


  66..33..4499..  llooccaallee

  Type: string
  Default: "C"

  The locale used by _s_t_r_f_t_i_m_e_(_3_) to format dates. Legal values are the
  strings your system accepts for the locale variable _L_C___T_I_M_E.


  66..33..5500..  mmaaiillccaapp__ppaatthh

  Type: string
  Default: $MAILCAPS or
  ~/.mailcap:/usr/local/share/mailcap:/etc/mailcap:/usr/etc/mailcap:/usr/local/etc/mailcap

  This variable specifies which files to consult when attempting to
  display MIME bodies not directly supported by Mutt.


  66..33..5511..  mmaarrkk__oolldd

  Type: Boolean
  Default: set

  Controls whether or not Mutt makes the distinction between _n_e_w
  messages and _o_l_d uunnrreeaadd messages.  By default, Mutt will mark new
  messages as old if you exit a mailbox without reading them.  The next
  time you start Mutt, the messages will show up with an "O" next to
  them in the index menu, indicating that they are old.  In order to
  make Mutt treat all unread messages as new only, you can unset this
  variable.


  66..33..5522..  mmaarrkkeerrss

  Type: boolean
  Default: set

  Controls the display of wrapped lines in the internal pager. If set, a
  ``+'' marker is displayed at the beginning of wrapped lines. Also see
  the ``$smart_wrap'' variable.


  66..33..5533..  mmaasskk

  Type: string
  Default: "^(\.\.$|[^.])"

  A regular expression used in the file browser. Files whose names don't
  match this mask will not be shown.


  66..33..5544..  mmbbooxx

  Type: String
  Default: +inbox

  This specifies the folder into which read mail in your ``spoolfile''
  folder will be appended.


  66..33..5555..  mmbbooxx__ttyyppee

  Type: String
  Default: mbox

  The default mailbox type used when creating new folders. May be any of
  mbox, MMDF, MH and Maildir.


  66..33..5566..  mmeettoooo

  Type: boolean
  Default: unset

  If unset, Mutt will remove your address from the list of recipients
  when replying to a message.  If you are replying to a message sent by
  you, Mutt will also assume that you want to reply to the recipients of
  that message rather than to yourself.


  66..33..5577..  mmeennuu__ssccrroollll

  Type: boolean
  Default: unset

  When _s_e_t, menus will be scrolled up or down one line when you attempt
  to move across a screen boundary.  If _u_n_s_e_t, the screen is cleared and
  the next or previous page of the menu is displayed (useful for slow
  links to avoid many redraws).


  66..33..5588..  mmeettaa__kkeeyy

  Type: Boolean
  Default: unset

  If set, forces Mutt to interpret keystrokes with the high bit (bit 8)
  set as if the user had pressed the ESC key and whatever key remains
  after having the high bit removed.  For example, if the key pressed
  has an ASCII value of 0xf4, then this is treated as if the user had
  pressed ESC then ``x''.  This is because the result of removing the
  high bit from ``0xf4'' is ``0x74'', which is the ASCII character
  ``x''.


  66..33..5599..  mmiimmee__ffoorrwwaarrdd

  Type: boolean
  Default: unset

  When set, the message you are forwarding will be attached as a
  separate MIME part instead of included in the main body of the
  message.  This is useful for forwarding MIME messages so the receiver
  can properly view the message as it was delivered to you.

  Also see ``forward_decode'' and ``mime_forward_decode''.


  66..33..6600..  mmiimmee__ffoorrwwaarrdd__ddeeccooddee

  Type: boolean
  Default: unset

  Controls the decoding of complex MIME messages into text/plain when
  forwarding a message while ``mime_forward'' is _s_e_t. Otherwise
  ``forward_decode'' is used instead.


  66..33..6611..  mmoovvee

  Type: quadoption
  Default: ask-no

  Controls whether you will be asked to confirm moving read messages
  from your spool mailbox to your ``$mbox'' mailbox, or as a result of a
  ``mbox-hook'' command.


  66..33..6622..  mmeessssaaggee__ffoorrmmaatt

  Type: string
  Default: "%s"

  This is the string displayed in the ``attachment'' menu for
  attachments of type _m_e_s_s_a_g_e_/_r_f_c_8_2_2.  For a full listing of defined
  escape sequences see the section on ``index_format''.


  66..33..6633..  ppaaggeerr

  Type: string
  Default: builtin

  This variable specifies which pager you would like to use to view
  messages.  builtin means to use the builtin pager, otherwise this
  variable should specify the pathname of the external pager you would
  like to use.


  66..33..6644..  ppaaggeerr__ccoonntteexxtt

  Type: number
  Default: 0

  This variable controls the number of lines of context that are given
  when displaying the next or previous page in the internal pager.  By
  default, Mutt will display the line after the last one on the screen
  at the top of the next page (0 lines of context).


  66..33..6655..  ppaaggeerr__ffoorrmmaatt

  Type: format string
  Default: "-%S- %C/%m: %-20.20n   %s"

  This variable controls the format of the one-line message ``status''
  displayed before each message in either the internal or an external
  pager.  The valid sequences are listed in the ``index_format''
  section.
  66..33..6666..  ppaaggeerr__iinnddeexx__lliinneess

  Type: number
  Default: 0

  Determines the number of lines of a mini-index which is shown when in
  the pager.  The current message, unless near the top or bottom of the
  folder, will be roughly one third of the way down this mini-index,
  giving the reader the context of a few messages before and after the
  message.  This is useful, for example, to determine how many messages
  remain to be read in the current thread.  One of the lines is reserved
  for the status bar from the index, so a _p_a_g_e_r___i_n_d_e_x___l_i_n_e_s of 6 will
  only show 5 lines of the actual index.  A value of 0 results in no
  index being shown.  If the number of messages in the current folder is
  less than _p_a_g_e_r___i_n_d_e_x___l_i_n_e_s, then the index will only use as many
  lines as it needs.


  66..33..6677..  ppaaggeerr__ssttoopp

  Type: boolean
  Default: unset

  When set, the internal-pager will nnoott move to the next message when
  you are at the end of a message and invoke the _n_e_x_t_-_p_a_g_e function.


  66..33..6688..  ppggpp__aauuttooeennccrryypptt

  Type: boolean
  Default: unset

  Setting this variable will cause Mutt to always attempt to PGP/MIME
  encrypt outgoing messages.  This is probably only useful in connection
  to the _s_e_n_d_-_h_o_o_k command.  It can be overridden by use of the _p_g_p_-
  _m_e_n_u, when encryption is not required or signing is requested as well.


  66..33..6699..  ppggpp__aauuttoossiiggnn

  Type: boolean
  Default: unset

  Setting this variable will cause Mutt to always attempt to PGP/MIME
  sign outgoing messages.  This can be overridden by use of the _p_g_p_-
  _m_e_n_u, when signing is not required or encryption is requested as well.


  66..33..7700..  ppggpp__ddeeffaauulltt__vveerrssiioonn

  Type: string
  Default: pgp2 (or pgp5, if PGP 2.* is not installed)

  Set this to pgp2 (PGP 2.*), or pgp5 (PGP 5.*) depending on the
  version, you are using primary. This variable is directly used, but it
  is the default for the variables ``$pgp_receive_version'',
  ``$pgp_send_version'', and ``$pgp_key_version''.


  66..33..7711..  ppggpp__eennccrryyppttsseellff

  Type: boolean
  Default: set

  If set, the PGP _+_e_n_c_r_y_p_t_t_o_s_e_l_f flag is used when encrypting messages.

  66..33..7722..  ppggpp__kkeeyy__vveerrssiioonn

  Type: string
  Default: ``default''

  This variable determines, which PGP version used for key ring
  operations like extracting keys from messages and extracting keys from
  your keyring. If you set this to default, the default defined in
  ``$pgp_default_version'' is used. Set this to pgp2 (PGP 2.*), or pgp5
  (PGP 5.*) if you want a different PGP version for key operations.


  66..33..7733..  ppggpp__lloonngg__iiddss

  Type: boolean
  Default: unset

  If set, use 64 bit PGP key IDs. Unset uses the normal 32 bit Key IDs.


  66..33..7744..  ppggpp__rreecceeiivvee__vveerrssiioonn

  Type: string
  Default: ``default''

  This variable determines, which PGP version used for decrypting
  messages and verifying signatures. If you set this to default, the
  default defined in ``$pgp_default_version'' will be used. Set this to
  pgp2 (PGP 2.*), or pgp5 (PGP 5.*) if you want a different PGP version
  for receiving operations.


  66..33..7755..  ppggpp__rreeppllyyeennccrryypptt

  Type: boolean
  Default: unset

  If set, automatically PGP encrypt replies to messages which are
  encrypted.


  66..33..7766..  ppggpp__rreeppllyyssiiggnn

  Type: boolean
  Default: unset

  If set, automatically PGP sign replies to messages which are signed.

  NNoottee:: this does not work on messages, that are encrypted aanndd signed!


  66..33..7777..  ppggpp__sseenndd__vveerrssiioonn

  Type: string
  Default: ``default''

  This variable determines, which PGP version used for composing new
  messages like encrypting and signing. If you set this to default, the
  default defined in ``$pgp_default_version'' will be used. Set this to
  pgp2 (PGP 2.*), or pgp5 (PGP 5.*) if you want a different PGP version
  for sending operations.





  66..33..7788..  ppggpp__ssiiggnn__aass

  Type: string
  Default: unset

  If you have more than one key pair, this option allows you to specify
  which of your private keys to use.  It is recommended that you use the
  keyid form to specify your key (e.g., ``0xABCDEFGH'').


  66..33..7799..  ppggpp__ssiiggnn__mmiiccaallgg

  Type: string
  Default: pgp-md5

  This variable contains the default message integrity check algorithm.
  Valid values are ``pgp-md5'', ``pgp-sha1'', and ``pgp-rmd160''. If you
  select a signing key using the sign as option on the compose menu,
  mutt will automagically figure out the correct value to insert here,
  but it does not know about the user's default key.

  So if you are using an RSA key for signing, set this variable to
  ``pgp-md5'', if you use a PGP 5 DSS key for signing, say ``pgp-sha1''
  here. The value of this variable will show up in the micalg parameter
  of MIME headers when creating RFC 2015 signatures.


  66..33..8800..  ppggpp__ssttrriicctt__eenncc

  Type: boolean
  Default: set

  If set, Mutt will automatically encode PGP/MIME signed messages as
  _q_u_o_t_e_d_-_p_r_i_n_t_a_b_l_e.  Please note that unsetting this variable may lead
  to problems with non-verifyable PGP signatures, so only change this if
  you know what you are doing.


  66..33..8811..  ppggpp__ttiimmeeoouutt

  Type: number
  Default: 300

  The number of seconds after which a cached passphrase will expire if
  not used.


  66..33..8822..  ppggpp__vv22

  Type: string
  Default: system dependent

  This variable allows you to override the compile time definition of
  where the PGP 2.* binary resides on your system.


  66..33..8833..  ppggpp__vv22__llaanngguuaaggee

  Type: string
  Default: en

  Sets the language, which PGP 2.* should use. If you use language.txt
  from the mutt doc directory, you can try the languages "mutt"
  (English) or "muttde" (German) to reduce the noise produced by pgp.


  66..33..8844..  ppggpp__vv22__ppuubbrriinngg

  Type: string
  Default: $PGPPATH/pubring.pgp or ~/.pgp/pubring.pgp if $PGPPATH isn't
  set.

  Points to the PGP 2.* public keyring.


  66..33..8855..  ppggpp__vv22__sseeccrriinngg

  Type: string
  Default: $PGPPATH/secring.pgp or ~/.pgp/secring.pgp if $PGPPATH isn't
  set.

  Points to the PGP 2.* secret keyring.


  66..33..8866..  ppggpp__vv55

  Type: string
  Default: system dependent

  This variable allows you to override the compile time definition of
  where the PGP 5.* binary resides on your system.


  66..33..8877..  ppggpp__vv55__llaanngguuaaggee

  Type: string
  Default: en

  Sets the language, which PGP 5.* should use. If you use language50.txt
  from the mutt doc directory, you can try the languages "mutt"
  (English) to reduce the noise produced by pgp.


  66..33..8888..  ppggpp__vv55__ppuubbrriinngg

  Type: string
  Default: $PGPPATH/pubring.pkr or ~/.pgp/pubring.pkr if $PGPPATH isn't
  set.

  Points to the PGP 5.* public keyring.


  66..33..8899..  ppggpp__vv55__sseeccrriinngg

  Type: string
  Default: $PGPPATH/secring.skr or ~/.pgp/secring.skr if $PGPPATH isn't
  set.

  Points to the PGP 5.* secret keyring.


  66..33..9900..  ppiippee__ddeeccooddee

  Type: boolean
  Default: unset

  Used in connection with the _p_i_p_e_-_m_e_s_s_a_g_e command.  When unset, Mutt
  will pipe the messages without any preprocessing. When set, Mutt will
  weed headers and will attempt to PGP/MIME decode the messages first.



  66..33..9911..  ppiippee__sseepp

  Type: string
  Default: newline

  The separator to add between messages when piping a list of tagged
  messages to an external Unix command.


  66..33..9922..  ppiippee__sspplliitt

  Type: boolean
  Default: unset

  Used in connection with the _p_i_p_e_-_m_e_s_s_a_g_e command and the ``tag-
  prefix'' operator.  If this variable is unset, when piping a list of
  tagged messages Mutt will concatenate the messages and will pipe them
  as a single folder.  When set, Mutt will pipe the messages one by one.
  In both cases the the messages are piped in the current sorted order,
  and the ``$pipe_sep'' separator is added after each message.


  66..33..9933..  ppoopp__ddeelleettee

  Type: boolean
  Default: unset

  If set, Mutt will delete successfully downloaded messages from the POP
  server when using the fetch-mail function.  When unset, Mutt will
  download messages but also leave them on the POP server.


  66..33..9944..  ppoopp__hhoosstt

  Type: string
  Default: none

  The name or address of your POP3 server.


  66..33..9955..  ppoopp__ppaassss

  Type: string
  Default: unset

  Specifies the password for you POP account.  If unset, Mutt will
  prompt you for your password when you invoke the fetch-mail function.
  WWaarrnniinngg: you should only use this option when you are on a fairly
  secure machine, because the superuser can read your muttrc even if you
  are the only one who can read the file.


  66..33..9966..  ppoopp__ppoorrtt

  Type: number
  Default: 110

  This variable specifies which port your POP server is listening on.


  66..33..9977..  ppoopp__uusseerr

  Type: string
  Default: login name on local system


  Your login name on the POP3 server.


  66..33..9988..  ppoosstt__iinnddeenntt__ssttrriinngg

  Type: format string
  Default: none

  Similar to the ``$attribution'' variable, Mutt will append this string
  after the inclusion of a message which is being replied to.


  66..33..9999..  ppoossttppoonnee

  Type: quadoption
  Default: ask-yes

  Controls whether or not messages are saved in the ``$postponed''
  mailbox when you elect not to send immediately.


  66..33..110000..  ppoossttppoonneedd

  Type: string
  Default: ~/postponed

  Mutt allows you to indefinitely ``postpone sending a message'' which
  you are editing.  When you choose to postpone a message, Mutt saves it
  in the folder specified by this variable.  Also see the ``$postpone''
  variable.


  66..33..110011..  pprriinntt

  Type: quadoption
  Default: ask-no

  Controls whether or not Mutt asks for confirmation before printing.
  This is useful for people (like me) who accidentally hit ``p'' often.


  66..33..110022..  pprriinntt__ccoommmmaanndd

  Type: string
  Default: lpr

  This specifies the command pipe that should be used to print messages.


  66..33..110033..  pprroommpptt__aafftteerr

  Type: boolean
  Default: set

  If you use an _e_x_t_e_r_n_a_l ``pager'', setting this variable will cause
  Mutt to prompt you for a command when the pager exits rather than
  returning to the index menu.  If unset, Mutt will return to the index
  menu when the external pager exits.


  66..33..110044..  qquueerryy__ccoommmmaanndd

  Type: string
  Default: null


  This specifies the command that mutt will use to make external address
  queries.  The string should contain a %s, which will be substituted
  with the query string the user types.  See ``query'' for more
  information.


  66..33..110055..  qquuiitt

  Type: quadoption
  Default: yes

  This variable controls whether ``quit'' and ``exit'' actually quit
  from mutt.  If it set to yes, they do quit, if it is set to no, they
  have no effect, and if it is set to ask-yes or ask-no, you are
  prompted for confirmation when you try to quit.


  66..33..110066..  qquuoottee__rreeggeexxpp

  Type: string
  Default: "^([ \t]*[>|#:}])+"

  A regular expression used in the internal-pager to determine quoted
  sections of text in the body of a message.

  NNoottee:: In order to use the _q_u_o_t_e_dxx patterns in the internal pager, you
  need to set this to a regular expression that matches _e_x_a_c_t_l_y the
  quote characters at the beginning of quoted lines.


  66..33..110077..  rreeaadd__iinncc

  Type: number
  Default: 10

  If set to a value greater than 0, Mutt will display which message it
  is currently on when reading a mailbox.  The message is printed after
  _r_e_a_d___i_n_c messages have been read (e.g., if set to 25, Mutt will print
  a message when it reads message 25, and then again when it gets to
  message 50).  This variable is meant to indicate progress when reading
  large mailboxes which may take some time.

  When set to 0, only a single message will appear before the reading
  the mailbox.

  Also see the ``$write_inc'' variable.


  66..33..110088..  rreeaadd__oonnllyy

  Type: boolean
  Default: unset

  If set, all folders are opened in read-only mode.


  66..33..110099..  rreeaallnnaammee

  Type: string
  Default: GCOS field from /etc/passwd

  This variable specifies what "real" or "personal" name should be used
  when sending messages.



  66..33..111100..  rreeccaallll

  Type: quadoption
  Default: ask-yes

  Controls whether or not you are prompted to recall postponed messages
  when composing a new message.  Also see ``postponed''


  66..33..111111..  rreeccoorrdd

  Type: string
  Default: none

  This specifies the file into which your outgoing messages should be
  appended.  (This is meant as the primary method for saving a copy of
  your messages, but another way to do this is using the ``my_hdr''
  command to create a _B_c_c_: field with your email address in it.)

  The value of _$_r_e_c_o_r_d is overridden by the ``$force_name'' and
  ``$save_name'' variables, and the ``fcc-hook'' command.


  66..33..111122..  rreeppllyy__rreeggeexxpp

  Type: string
  Default: "^(re|aw):[ \t]*"

  A regular expression used to recognize reply messages when threading
  and replying. The default value corresponds to the English "Re:" and
  the German "Aw:".


  66..33..111133..  rreeppllyy__ttoo

  Type: quadoption
  Default: ask-yes

  If set, Mutt will ask you if you want to use the address listed in the
  Reply-To: header field when replying to a message.  If you answer no,
  it will use the address in the From: header field instead.  This
  option is useful for reading a mailing list that sets the Reply-To:
  header field to the list address and you want to send a private
  message to the author of a message.


  66..33..111144..  rreessoollvvee

  Type: boolean
  Default: set

  When set, the cursor will be automatically advanced to the next
  (possibly undeleted) message whenever a command that modifies the
  current message is executed.


  66..33..111155..  rreevveerrssee__aalliiaass

  Type: boolean
  Default: unset

  This variable controls whether or not Mutt will display the "personal"
  name from your aliases in the index menu if it finds an alias that
  matches the message's sender.  For example, if you have the following
  alias:

       alias juser abd30425@somewhere.net (Joe User)




  and then you receive mail which contains the following header:



       From: abd30425@somewhere.net




  It would be displayed in the index menu as ``Joe User'' instead of
  ``abd30425@somewhere.net.''  This is useful when the person's e-mail
  address is not human friendly (like Compu$erve addresses).


  66..33..111166..  rreevveerrssee__nnaammee

  Type: boolean
  Default: unset

  It may sometimes arrive that you receive mail to a certain machine,
  move the messages to another machine, and reply to some the messages
  from there.  If this variable is set, the default _F_r_o_m_: line of the
  reply messages is built using the address where you received the
  messages you are replying to.  If the variable is unset, the _F_r_o_m_:
  line will use your address on the current machine.


  66..33..111177..  ssaavvee__aaddddrreessss

  Type: boolean
  Default: unset

  If set, mutt will take the sender's full address when choosing a
  default folder for saving a mail. If ``save_name'' or ``force_name''
  is set too, the selection of the fcc folder will be changed as well.


  66..33..111188..  ssaavvee__eemmppttyy

  Type: boolean
  Default: set

  When unset, mailboxes which contain no saved messages will be removed
  when closed (the exception is ``spoolfile'' which is never removed).
  If set, mailboxes are never removed.

  NNoottee:: This only applies to mbox and MMDF folders, Mutt does not delete
  MH and Maildir directories.


  66..33..111199..  ssaavvee__nnaammee

  Type: boolean
  Default: unset

  This variable controls how copies of outgoing messages are saved.
  When set, a check is made to see if a mailbox specified by the
  recipient address exists (this is done by searching for a mailbox in
  the ``folder'' directory with the _u_s_e_r_n_a_m_e part of the recipient
  address).  If the mailbox exists, the outgoing message will be saved
  to that mailbox, otherwise the message is saved to the ``record''
  mailbox.

  Also see the ``$force_name'' variable.


  66..33..112200..  sseennddmmaaiill

  Type: string
  Default: /usr/lib/sendmail -oi -oem

  Specifies the program and arguments used to deliver mail sent by Mutt.
  Mutt expects that the specified program will read the message header
  for recipients.


  66..33..112211..  sseennddmmaaiill__wwaaiitt

  Type: number
  Default: 0

  Specifies the number of seconds to wait for the ``sendmail'' process
  to finish before giving up and putting delivery in the background.

  Mutt interprets the value of this variable as follows:

  >0      number of seconds to wait for sendmail to finish before continuing
  0       wait forever for sendmail to finish
  <0      always put sendmail in the background without waiting



  Note that if you specify a value other than 0, the output of the child
  process will be put in a temporary file.  If there is some error, you
  will be informed as to where to find the output.


  66..33..112222..  sshheellll

  Type: string
  Default: retrieved from passwd file

  Command to use when spawning a subshell.


  66..33..112233..  ssiigg__ddaasshheess

  Type: boolean
  Default: set

  If set, a line containing ``-- '' will be inserted before your
  ``signature''.  It is ssttrroonnggllyy recommended that you not unset this
  variable unless your ``signature'' contains just your name.  The
  reason for this is because many software packages use ``-- \n'' to
  detect your signature.  For example, Mutt has the ability to highlight
  the signature in a different color in the builtin pager.


  66..33..112244..  ssiiggnnaattuurree

  Type: string
  Default: ~/.signature

  Specifies the filename of your signature, which is appended to all
  outgoing messages.   If the filename ends with a pipe (``|''), it is
  assumed that filename is a shell command and input should be read from
  its stdout.
  66..33..112255..  ssiimmppllee__sseeaarrcchh

  Type: string
  Default: "~f %s | ~s %s"

  Specifies how Mutt should expand a simple search into a real search
  pattern.  A simple search is one that does not contain any of the ~
  operators.  See ``searching'' for more information on search patterns.

  For example, if you simply type joe at a search or limit prompt, Mutt
  will automatically expand it to the value specified by this variable.
  For the default value it would be:

  ~f joe | ~s joe


  66..33..112266..  ssmmaarrtt__wwrraapp

  Type: boolean
  Default: set

  Controls the display of lines longer then the screen width in the
  internal pager. If set, long lines are wrapped at a word boundary.  If
  unset, lines are simply wrapped at the screen edge. Also see the
  ``$markers'' variable.


  66..33..112277..  ssoorrtt

  Type: string
  Default: date-sent

  Specifies how to sort messages in the _i_n_d_e_x menu.  Valid values are


  +o  date-sent

  +o  date-received

  +o  from

  +o  mailbox-order (unsorted)

  +o  score

  +o  subject

  +o  threads

  +o  to

  You may optionally use the reverse- prefix to specify reverse sorting
  order (example: set sort=reverse-date-sent).


  66..33..112288..  ssoorrtt__aalliiaass

  Type: string
  Default: alias

  Specifies how the entries in the `alias' menu are sorted.  The
  following are legal values:




  alias           sort alphabetically by alias name
  address         sort alphabetically by email address
  unsorted        leave in order specified in .muttrc




  66..33..112299..  ssoorrtt__aauuxx

  Type: string
  Default: date-sent

  When sorting by threads, this variable controls how threads are sorted
  in relation to other threads, and how the branches of the thread trees
  are sorted.  This can be set to any value that ``sort'' can, except
  threads (in that case, mutt will just use date-sent).  You can also
  specify the last- prefix in addition to the reverse- prefix, but last-
  must come after reverse-.  The last- prefix causes messages to be
  sorted against its siblings by which has the last descendant, using
  the rest of sort_aux as an ordering.  For instance, set sort_aux=last-
  date-received would mean that if a new message is received in a
  thread, that thread becomes the last one displayed (or the first, if
  you have set sort=reverse-threads.)


  66..33..113300..  ssoorrtt__bbrroowwsseerr

  Type: string

  Specifies how to sort entries in the file browser.  By default, the
  entries are sorted alphabetically.  Valid values:


  +o  date

  +o  alpha (alphabetically)

  You may optionally use the reverse- prefix to specify reverse sorting
  order (example: set sort_browser=reverse-date).


  66..33..113311..  ssppoooollffiillee

  Type: string
  Default: most likely /var/mail/$USER or /usr/spool/mail/$USER

  If your spool mailbox is in a non-default place where Mutt cannot find
  it, you can specify its location with this variable.  Mutt will
  automatically set this variable to the value of the environment
  variable $MAIL if it is not set.


  66..33..113322..  ssoorrtt__rree

  Type: boolean Default: set

  This variable is only useful when sorting by threads with
  ``strict_threads'' unset.  In that case, it changes the heuristic mutt
  uses to thread messages by subject.  With sort_re set, mutt will only
  attach a message as the child of another message by subject if the
  subject of the child message starts with a substring matching the
  setting of ``reply_regexp''.  With sort_re unset, mutt will attach the
  message whether or not this is the case, as long as the
  non-``reply_regexp'' parts of both messages are identical.


  66..33..113333..  ssttaattuuss__cchhaarrss

  Type: string
  Default: "-*%"

  Controls the characters used by the "%r" indicator in
  ``status_format''. The first character is used when the mailbox is
  unchanged. The second is used when the mailbox has been changed, and
  it needs to be resynchronized. The third is used if the mailbox is in
  read-only mode, or if the mailbox will not be written when exiting
  that mailbox (You can toggle whether to write changes to a mailbox
  with the toggle-write operation, bound by default to "%").


  66..33..113344..  ssttaattuuss__ffoorrmmaatt

  Type: string
  Default: "-%r-Mutt: %f [Msgs:%?M?%M/?%m%?n? New:%n?%?o? Old:%o?%?d?
  Del:%d?%?F? Flag:%F?%?t? Tag:%t?%?p? Post:%p?%?b? Inc:%b? %?l?
  %l?]---(%s/%S)-%>-(%P)---"

  Controls the format of the status line displayed in the _i_n_d_e_x menu.
  This string is similar to ``$index_format'', but has its own set of
  printf()-like sequences:



       %b      number of mailboxes with new mail *
       %d      number of deleted messages *
       %h      local hostname
       %f      the full pathname of the current mailbox
       %F      number of flagged messages *
       %l      size (in bytes) of the current mailbox *
       %L      size (in bytes) of the messages shown (i.e., which match the current limit) *
       %m      the number of messages in the mailbox *
       %M      the number of messages shown (i.e., which match the current limit) *
       %n      number of new messages in the mailbox *
       %o      number of old unread messages
       %p      number of postponed messages *
       %P      percentage of the way through the index
       %r      modified/read-only/won't-write indicator, according to $status_chars
       %s      current sorting mode ($sort)
       %S      current aux sorting method ($sort_aux)
       %t      number of tagged messages *
       %u      number of unread messages *
       %v      Mutt version string
       %V      currently active limit pattern, if any *

       %>X     right justify the rest of the string and pad with "X"
       %|X     pad to the end of the line with "X"

       * = can be optionally printed if nonzero




  Some of the above sequences can be used to optionally print a string
  if their value is nonzero.  For example, you may only want to see the
  number of flagged messages if such messages exist, since zero is not
  particularly meaningful.  To optionally print a string based upon one
  of the above sequences, the following construct is used



               %?<sequence_char>?<optional_string>?

  where _s_e_q_u_e_n_c_e___c_h_a_r is a character from the table above, and
  _o_p_t_i_o_n_a_l___s_t_r_i_n_g is the string you would like printed if _s_t_a_t_u_s___c_h_a_r is
  nonzero.  _o_p_t_i_o_n_a_l___s_t_r_i_n_g mmaayy contain other sequence as well as normal
  text, but you may nnoott nest optional strings.

  Here is an example illustrating how to optionally print the number of
  new messages in a mailbox:



               %?n?%n new messages.?





  66..33..113355..  ssttaattuuss__oonn__ttoopp

  Type: boolean
  Default: unset

  Setting this variable causes the ``status bar'' to be displayed on the
  first line of the screen rather than near the bottom.


  66..33..113366..  ssttrriicctt__tthhrreeaaddss

  Type: boolean
  Default: unset

  If set, threading will only make use of the ``In-Reply-To'' and
  ``References'' fields when ``sorting'' by message threads.  By
  default, messages with the same subject are grouped together in
  ``pseudo threads.''  This may not always be desirable, such as in a
  personal mailbox where you might have several unrelated messages with
  the subject ``hi'' which will get grouped together.


  66..33..113377..  ssuussppeenndd

  Type: boolean
  Default: set

  When _u_n_s_e_t, mutt won't stop when the user presses the terminal's _s_u_s_p
  key, usually ``control-Z''. This is useful if you run mutt inside an
  xterm using a command like xterm -e mutt.


  66..33..113388..  tthhoorroouugghh__sseeaarrcchh

  Type: boolean
  Default: unset

  Affects the _~_b and _~_h search operations described in section
  ``Searching'' above.  If set, the headers and attachments of messages
  to be searched are decoded before searching.  If unset, messages are
  searched as they appear in the folder.


  66..33..113399..  ttiillddee

  Type: boolean
  Default: unset

  When set, the internal-pager will pad blank lines to the bottom of the
  screen with a tilde (~).
  66..33..114400..  ttiimmeeoouutt

  Type: number
  Default: 600

  This variable controls the _n_u_m_b_e_r _o_f _s_e_c_o_n_d_s Mutt will wait for a key
  to be pressed in the main menu before timing out and checking for new
  mail.  A value of zero or less will cause Mutt not to ever time out.


  66..33..114411..  ttmmppddiirr

  Type: string
  Default: /tmp

  This variable allows you to specify where Mutt will place its
  temporary files needed for displaying and composing messages.


  66..33..114422..  ttoo__cchhaarrss

  Type: string
  Default: " +TCF"

  Controls the character used to indicate mail addressed to you.  The
  first character is the one used when the mail is NOT addressed to your
  address (default: space).  The second is used when you are the only
  recipient of the message (default: +).  The third is when your address
  appears in the TO header field, but you are not the only recipient of
  the message (default: T).  The fourth character is used when your
  address is specified in the CC header field, but you are not the only
  recipient.  The fifth character is used to indicate mail that was sent
  by _y_o_u.


  66..33..114433..  uussee__88bbiittmmiimmee

  Type: boolean
  Default: unset

  WWaarrnniinngg:: do not set this variable unless you are using a version of
  sendmail which supports the -B8BITMIME flag (such as sendmail 8.8.x)
  or you may not be able to send mail.

  When _s_e_t, Mutt will invoke ``$sendmail'' with the -B8BITMIME flag when
  sending 8-bit messages to enable ESMTP negotiation.


  66..33..114444..  uussee__ddoommaaiinn

  Type: boolean
  Default: set

  When set, Mutt will qualify all local addresses (ones without the
  @host portion) with the value of ``$hostname''.  If _u_n_s_e_t, no
  addresses will be qualified.


  66..33..114455..  uussee__ffrroomm

  Type: boolean
  Default: set

  When _s_e_t, Mutt will generate the `From:' header field when sending
  messages.  If _u_n_s_e_t, no `From:' header field will be generated unless
  the user explicitly sets one using the ``my_hdr'' command.
  66..33..114466..  uussee__mmaaiillccaapp

  Type: quad-option
  Default: ask

  If set to ``yes'', always try to use a mailcap entry to display a MIME
  part that Mutt can't understand what to do with.  If ``ask'', prompt
  as to whether to display as text or to use a mailcap entry.  If
  ``no'', always view unsupported MIME types as text.

  NNoottee:: For compatibility with mmeettaammaaiill, Mutt will also look at the
  environment variable _M_M___N_O_A_S_K.  Setting this to 11 is equivalent to
  setting _u_s_e___m_a_i_l_c_a_p to ``yes''.  Otherwise, the value of _M_M___N_O_A_S_K is
  interpreted as a comma-separated list of type names (without white
  space) for which the corresponding mailcap entries will be used to
  display MIME parts without prompting the user for confirmation.


  66..33..114477..  ppggpp__vveerriiffyy__ssiigg

  Type: quad-option
  Default: yes

  If ``yes'', always attempt to verify PGP/MIME signatures.  If ``ask'',
  ask whether or not to verify the signature.  If ``no'', never attempt
  to verify PGP/MIME signatures.


  66..33..114488..  vviissuuaall

  Type: string
  Default: $VISUAL

  Specifies the visual editor to invoke when the _~_v command is given in
  the builtin editor.


  66..33..114499..  wwaaiitt__kkeeyy

  Type: boolean
  Default: set

  Controls whether Mutt will ask you to press a key after _s_h_e_l_l_-_e_s_c_a_p_e,
  _p_i_p_e_-_m_e_s_s_a_g_e, _p_i_p_e_-_e_n_t_r_y, _p_r_i_n_t_-_m_e_s_s_a_g_e, and _p_r_i_n_t_-_e_n_t_r_y commands.

  It is also used when viewing attachments with ``autoview'', provided
  that the corresponding mailcap entry has a _n_e_e_d_s_t_e_r_m_i_n_a_l flag, and the
  external program is interactive.

  When set, Mutt will always ask for a key. When unset, Mutt will wait
  for a key only if the external command returned a non-zero status.


  66..33..115500..  wwrraapp__sseeaarrcchh

  Type: boolean
  Default: set

  Controls whether searches wrap around the end of the mailbox.

  When set, searches will wrap around the first (or last) message. When
  unset, searches will not wrap.




  66..33..115511..  wwrriittee__iinncc

  Type: number
  Default: 10

  When writing a mailbox, a message will be printed every _w_r_i_t_e___i_n_c
  messages to indicate progress.  If set to 0, only a single message
  will be displayed before writing a mailbox.

  Also see the ``$read_inc'' variable.


  66..44..  FFuunnccttiioonnss

  The following is the list of available functions listed by the mapping
  in which they are available.  The default key setting is given, and an
  explanation of what the function does.  The key bindings of these
  functions can be changed with the ``bind'' command.


  66..44..11..  ggeenneerriicc


  The _g_e_n_e_r_i_c menu is not a real menu, but specifies common functions
  (such as movement) available in all menus except for _p_a_g_e_r and _e_d_i_t_o_r.
  Changing settings for this menu will affect the default bindings for
  all menus (except as noted).


  bottom-page                L   move to the bottom of the page
  current-bottom     not bound   move current entry to bottom of page
  current-middle     not bound   move current entry to middle of page
  current-top        not bound   move current entry to top of page
  enter-command              :   enter a muttrc command
  exit                       q   exit this menu
  first-entry                =   move to the first entry
  half-down                  ]   scroll down 1/2 page
  half-up                    [   scroll up 1/2 page
  help                       ?   this screen
  jump                  number   jump to an index number
  last-entry                 *   move to the last entry
  middle-page                M   move to the middle of the page
  next-entry                 j   move to the next entry
  next-line                  >   scroll down one line
  next-page                  z   move to the next page
  previous-entry             k   move to the previous entry
  previous-line              <   scroll up one line
  previous-page              Z   move to the previous page
  refresh                   ^L   clear and redraw the screen
  search                     /   search for a regular expression
  search-next                n   search for next match
  search-opposite    not bound   search for next match in opposite direction
  search-reverse         ESC /   search backwards for a regular expression
  select-entry             RET   select the current entry
  shell-escape               !   run a program in a subshell
  tag-entry                  t   toggle the tag on the current entry
  tag-prefix                 ;   apply next command to tagged entries
  top-page                   H   move to the top of the page



  66..44..22..  iinnddeexx




  bounce-message             b   remail a message to another user
  change-folder              c   open a different folder
  change-folder-readonly ESC c   open a different folder in read only mode
  clear-flag                 W   clear a status flag from a message
  copy-message               C   copy a message to a file/mailbox
  create-alias               a   create an alias from a message sender
  decode-copy            ESC C   decode a message and copy it to a file/mailbox
  decode-save            ESC s   decode a message and save it to a file/mailbox
  delete-message             d   delete the current entry
  delete-pattern             D   delete messages matching a pattern
  delete-subthread       ESC d   delete all messages in subthread
  delete-thread             ^D   delete all messages in thread
  display-address            @   display full address of sender
  display-headers            h   display message with full headers
  display-message          RET   display a message
  exit                       x   exit without saving changes
  extract-keys              ^K   extract PGP public keys
  fetch-mail                 G   retrieve mail from POP server
  flag-message               F   toggle a message's 'important' flag
  forget-passphrase         ^F   wipe PGP passphrase from memory
  forward-message            f   forward a message with comments
  group-reply                g   reply to all recipients
  limit                      l   show only messages matching a pattern
  list-reply                 L   reply to specified mailing list
  mail                       m   compose a new mail message
  mail-key               ESC k   mail a PGP public key
  next-new                 TAB   jump to the next new message
  next-subthread         ESC n   jump to the next subthread
  next-thread               ^N   jump to the next thread
  next-undeleted             j   move to the next undeleted message
  next-unread        not bound   jump to the next unread message
  pipe-message               |   pipe message/attachment to a shell command
  previous-new         ESC TAB   jump to the previous new message
  previous-page              Z   move to the previous page
  previous-subthread     ESC p   jump to previous subthread
  previous-thread           ^P   jump to previous thread
  previous-undeleted         k   move to the last undelete message
  previous-unread    not bound   jump to the previous unread message
  print-message              p   print the current entry
  query                      Q   query external program for addresses
  quit                       q   save changes to mailbox and quit
  read-subthread         ESC r   mark the current subthread as read
  read-thread               ^R   mark the current thread as read
  recall-message             R   recall a postponed message
  reply                      r   reply to a message
  save-message               s   save message/attachment to a file
  set-flag                   w   set a status flag on a message
  show-version               V   show the Mutt version number and date
  show-limit             ESC l   show currently active limit pattern, if any
  sort-mailbox               o   sort messages
  sort-reverse               O   sort messages in reverse order
  sync-mailbox               $   save changes to mailbox
  tag-pattern                T   tag messages matching a pattern
  tag-thread             ESC t   tag/untag all messages in the current thread
  toggle-new                 N   toggle a message's 'new' flag
  toggle-write               %   toggle whether the mailbox will be rewritten
  undelete-message           u   undelete the current entry
  undelete-pattern           U   undelete messages matching a pattern
  undelete-subthread     ESC u   undelete all messages in subthread
  undelete-thread           ^U   undelete all messages in thread
  untag-pattern             ^T   untag messages matching a pattern
  view-attachments           v   show MIME attachments




  66..44..33..  ppaaggeerr

































































  bottom                     $   jump to the bottom of the message
  bounce-message             b   remail a message to another user
  change-folder              c   open a different folder
  change-folder-readonly ESC c   open a different folder in read only mode
  copy-message               C   copy a message to a file/mailbox
  create-alias               a   create an alias from a message sender
  decode-copy            ESC C   decode a message and copy it to a file/mailbox
  decode-save            ESC s   decode a message and save it to a file/mailbox
  delete-message             d   delete the current entry
  delete-subthread       ESC d   delete all messages in subthread
  delete-thread             ^D   delete all messages in thread
  display-address            @   display full address of sender
  display-headers            h   display message with full headers
  enter-command              :   enter a muttrc command
  exit                       i   return to the main-menu
  extract-keys              ^K   extract PGP public keys
  flag-message               F   toggle a message's 'important' flag
  forget-passphrase         ^F   wipe PGP passphrase from memory
  forward-message            f   forward a message with comments
  group-reply                g   reply to all recipients
  half-up            not bound   move up one-half page
  half-down          not bound   move down one-half page
  help                       ?   this screen
  list-reply                 L   reply to specified mailing list
  mail                       m   compose a new mail message
  mail-key               ESC k   mail a PGP public key
  mark-as-new                N   toggle a message's 'new' flag
  next-line                RET   scroll down one line
  next-message               J   move to the next entry
  next-new                 TAB   jump to the next new message
  next-page                      move to the next page
  next-subthread         ESC n   jump to the next subthread
  next-thread               ^N   jump to the next thread
  next-undeleted             j   move to the next undeleted message
  next-unread        not bound   jump to the next unread message
  pipe-message               |   pipe message/attachment to a shell command
  previous-line      BackSpace   scroll up one line
  previous-message           K   move to the previous entry
  previous-new       not bound   jump to the previous new message
  previous-page              -   move to the previous page
  previous-subthread     ESC p   jump to previous subthread
  previous-thread           ^P   jump to previous thread
  previous-undeleted         k   move to the last undelete message
  previous-unread    not bound   jump to the previous unread message
  print-message              p   print the current entry
  quit                       Q   save changes to mailbox and quit
  read-subthread         ESC r   mark the current subthread as read
  read-thread               ^R   mark the current thread as read
  recall-message             R   recall a postponed message
  redraw-screen             ^L   clear and redraw the screen
  reply                      r   reply to a message
  save-message               s   save message/attachment to a file
  search                     /   search for a regular expression
  search-next                n   search for next match
  search-opposite    not bound   search for next match in opposite direction
  search-reverse         ESC /   search backwards for a regular expression
  search-toggle              \   toggle search pattern coloring
  shell-escape               !   invoke a command in a subshell
  show-version               V   show the Mutt version number and date
  skip-quoted                S   skip beyond quoted text
  tag-message                t   tag a message
  toggle-quoted              T   toggle display of quoted text
  top                        ^   jump to the top of the message
  undelete-message           u   undelete the current entry
  undelete-subthread     ESC u   undelete all messages in subthread
  undelete-thread           ^U   undelete all messages in thread
  view-attachments           v   show MIME attachments



  66..44..44..  aalliiaass


  search                     /   search for a regular expression
  search-next                n   search for next match
  search-reverse         ESC /   search backwards for a regular expression



  66..44..55..  qquueerryy


  create-alias               a   create an alias from a message sender
  mail                       m   compose a new mail message
  query                      Q   query external program for addresses
  query-append               A   append new query results to current results
  search                     /   search for a regular expression
  search-next                n   search for next match
  search-opposite    not bound   search for next match in opposite direction
  search-reverse         ESC /   search backwards for a regular expression



  66..44..66..  aattttaacchh


  bounce-message             b   remail a message to another user
  decode-copy            ESC C   decode a message and copy it to a file/mailbox
  decode-save            ESC s   decode a message and save it to a file/mailbox
  delete-entry               d   delete the current entry
  display-headers            h   display message with full headers
  extract-keys              ^K   extract PGP public keys
  forward-message            f   forward a message with comments
  group-reply                g   reply to all recipients
  list-reply                 L   reply to specified mailing list
  pipe-entry                 |   pipe message/attachment to a shell command
  print-entry                p   print the current entry
  reply                      r   reply to a message
  save-entry                 s   save message/attachment to a file
  undelete-entry             u   undelete the current entry
  view-attach              RET   view attachment using mailcap entry if necessary
  view-mailcap               m   force viewing of attachment using mailcap
  view-text                  T   view attachment as text



  66..44..77..  ccoommppoossee















  attach-file                a   attach a file(s) to this message
  attach-key             ESC k   attach a PGP public key
  copy-file                  C   save message/attachment to a file
  detach-file                D   delete the current entry
  display-headers            h   display message with full headers
  edit-bcc                   b   edit the BCC list
  edit-cc                    c   edit the CC list
  edit-description           d   edit attachment description
  edit-encoding             ^E   edit attachment trasfer-encoding
  edit-fcc                   f   enter a file to save a copy of this message in
  edit-from              ESC f   edit the from: field
  edit-file               ^X e   edit the file to be attached
  edit-headers               E   edit the message with headers
  edit-message               e   edit the message
  edit-mime                  m   edit attachment using mailcap entry
  edit-reply-to              r   edit the Reply-To field
  edit-subject               s   edit the subject of this message
  edit-to                    t   edit the TO list
  edit-type                 ^T   edit attachment type
  filter-entry               F   filter attachment through a shell command
  forget-passphrase         ^F   wipe PGP passphrase from memory
  ispell                     i   run ispell on the message
  new-mime                   n   compose new attachment using mailcap entry
  pgp-menu                   p   show PGP options
  pipe-entry                 |   pipe message/attachment to a shell command
  postpone-message           P   save this message to send later
  print-entry                l   print the current entry
  rename-file                R   rename/move an attached file
  send-message               y   send the message
  toggle-unlink              u   toggle whether to delete file after sending it
  view-attach              RET   view attachment using mailcap entry if necessary



  66..44..88..  ppoossttppoonneedd


  delete-entry               d   delete the current entry
  undelete-entry             u   undelete the current entry



  66..44..99..  bbrroowwsseerr


  change-dir                 c   change directories
  check-new                TAB   check mailboxes for new mail
  enter-mask                 m   enter a file mask
  search                     /   search for a regular expression
  search-next                n   search for next match
  search-reverse         ESC /   search backwards for a regular expression
  select-new                 N   select a new file in this directory
  sort                       o   sort messages
  sort-reverse               O   sort messages in reverse order



  66..44..1100..  ppggpp


  view-name                  %   view the key's user id
  verify-key                 c   verify a PGP public key




  66..44..1111..  eeddiittoorr


  backspace          BackSpace   delete the char in front of the cursor
  backward-char             ^B   move the cursor one character to the left
  bol                       ^A   jump to the beginning of the line
  buffy-cycle            Space   cycle among incoming mailboxes
  complete                 TAB   complete filename or alias
  complete-query            ^T   complete address with query
  delete-char               ^D   delete the char under the cursor
  eol                       ^E   jump to the end of the line
  forward-char              ^F   move the cursor one character to the right
  history-down       not bound   scroll up through the history list
  history-up         not bound   scroll up through the history list
  kill-eol                  ^K   delete chars from cursor to end of line
  kill-line                 ^U   delete all chars on the line
  kill-word                 ^W   delete the word in front of the cursor
  quote-char                ^V   quote the next typed key




  77..  MMiisscceellllaannyy



  77..11..  AAcckknnoowwlleeddggeemmeennttss

  Kari Hurrta <kari.hurtta@fmi.fi> co-developed the original MIME
  parsing code back in the ELM-ME days.

  The following people have been very helpful to the development of
  Mutt:

  Francois Berjon <Francois.Berjon@aar.alcatel-alsthom.fr>,
  Aric Blumer <aric@fore.com>,
  John Capo <jc@irbs.com>,
  Liviu Daia <daia@stoilow.imar.ro>,
  David DeSimone <fox@convex.hp.com>,
  Nickolay N. Dudorov <nnd@wint.itfs.nsk.su>,
  Michael Finken <finken@conware.de>,
  Sven Guckes <guckes@math.fu-berlin.de>,
  Mark Holloman <holloman@nando.net>,
  Andreas Holzmann <holzmann@fmi.uni-passau.de>,
  David Jeske <jeske@igcom.net>,
  Christophe Kalt <kalt@hugo.int-evry.fr>,
  Felix von Leitner (a.k.a ``Fefe'') <leitner@math.fu-berlin.de>,
  Brandon Long <blong@fiction.net>,
  Lars Marowsky-Bree <lmb@pointer.in-minden.de>,
  Thomas ``Mike'' Michlmayr <mike@cosy.sbg.ac.at>,
  David O'Brien <obrien@Nuxi.cs.ucdavis.edu>,
  Clint Olsen <olsenc@ichips.intel.com>,
  Park Myeong Seok <pms@romance.kaist.ac.kr>,
  Thomas Parmelan <tom@ankh.fr.eu.org>,
  Ollivier Robert <roberto@keltia.freenix.fr>,
  Thomas Roessler <roessler@guug.de>,
  Allain Thivillon <Allain.Thivillon@alma.fr>,
  Ken Weinert <kenw@ihs.com>


  77..22..  AAbboouutt tthhiiss ddooccuummeenntt

  This document was written in SGML, and then rendered using the sgml-
  tools package.




































































