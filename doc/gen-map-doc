#!/usr/bin/perl -w

use strict;

my (%OPS, %MAP, $map);

my $functions_h = shift @ARGV;

open F, "cat @ARGV |" or die "OPS*: $!";
while (<F>) {
  /(\w+) "(.+)"/ or die "$.: parse error";
  $OPS{$1} = $2;
}
close F;

open F, $functions_h or die "$functions_h: $!";
while (<F>) {
  if (/^struct binding_t Op.*{ \/\* map: (.*) \*\//) {
    $map = $1;
  }
  if ($map and /{\s*"(.+)"\s*,\s*(\w+)\s*,\s*(?:"([^"]+)"|(\w+))\s*}/) {
    my ($function, $op, $binding) = ($1, $2, $3 || $4);
    $binding =~ s/ /Space/;
    $binding =~ s/^\\033/ESC /;
    $binding =~ s/^\\010/Backspace/;
    $binding =~ s/^\\(0\d+)$/'^'.chr(64+oct($1))/e;
    $binding =~ s/^\\(0\d+)(.)/'^'.chr(64+oct($1)) ." $2"/e;
    $binding =~ s/<(.+)>/$1/;
    $binding =~ s/&/&amp;/;
    $binding =~ s/</&lt;/;
    $binding =~ s/>/&gt;/;
    $binding =~ s/\\t/TAB/;
    $binding =~ s/M_ENTER_S/RET/;
    $binding =~ s/NULL/not bound/;
    die "unknown key $binding" if $binding =~ /\\[^\\]|<|>/;
    die "unknown OP $op" unless $OPS{$op};
    $MAP{$map} .= "<row><entry>$function</entry><entry>$binding</entry><entry>$OPS{$op}</entry></row>\n";
  }
  if ($map and /^}/) {
    undef $map;
  }
}
close F;

while (<STDIN>) {
  if (/__print_map\((.*)\)/) {
    die "map $1 undefined" unless $MAP{$1};
    print $MAP{$1};
    delete $MAP{$1};
  } else {
    print;
  }
}

die "unprinted maps: ". join(" ", keys %MAP) if %MAP;
