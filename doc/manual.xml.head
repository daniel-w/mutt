<?xml version="1.0" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>

<bookinfo>
<title>The Mutt E-Mail Client</title>
<author>
<firstname>Michael</firstname><surname>Elkins</surname>
<email>me@cs.hmc.edu</email>
</author>
<releaseinfo>version @VERSION@</releaseinfo>

<abstract>
<para>
<quote>All mail clients suck.  This one just sucks less.</quote> -me, circa 1995
</para>
</abstract>
</bookinfo>

<chapter id="intro">
<title>Introduction</title>

<para>
<emphasis role="bold">Mutt</emphasis> is a small but very powerful text-based MIME mail client.  Mutt is
highly configurable, and is well suited to the mail power user with advanced
features like key bindings, keyboard macros, mail threading, regular
expression searches and a powerful pattern matching language for selecting
groups of messages.
</para>

<sect1 id="homepage">
<title>Mutt Home Page</title>

<para>
The official homepage can be found at
<ulink url="http://www.mutt.org/">http://www.mutt.org/</ulink>.
</para>

</sect1>

<sect1 id="muttlists">
<title>Mailing Lists</title>

<para>
To subscribe to one of the following mailing lists, send a message with the
word <emphasis>subscribe</emphasis> in the body to
<literal>list-name</literal><emphasis>-request</emphasis><literal>@mutt.org</literal>.
</para>

<itemizedlist>
<listitem>

<para>
<email>mutt-announce-request@mutt.org</email> -- low traffic list for announcements
</para>
</listitem>
<listitem>

<para>
<email>mutt-users-request@mutt.org</email> -- help, bug reports and feature requests
</para>
</listitem>
<listitem>

<para>
<email>mutt-dev-request@mutt.org</email> -- development mailing list
</para>
</listitem>

</itemizedlist>

<note>
<para>
All messages posted to
<emphasis>mutt-announce</emphasis> are automatically forwarded to
<emphasis>mutt-users</emphasis>, so you do not need to be subscribed to
both lists.
</para>
</note>

</sect1>

<sect1 id="distribution">
<title>Software Distribution Sites</title>

<para>
Mutt releases can be downloaded from
<ulink url="ftp://ftp.mutt.org/mutt/">ftp://ftp.mutt.org/mutt/</ulink>.
For a list of mirror sites, please refer to
<ulink url="http://www.mutt.org/download.html">http://www.mutt.org/download.html</ulink>.
</para>

</sect1>

<sect1 id="irc">
<title>Mutt online resources</title>

<variablelist>

<varlistentry>
<term>Bug Tracking System</term>
<listitem>
<para>
The official mutt bug tracking system can be found at
<ulink url="http://dev.mutt.org/">http://dev.mutt.org/</ulink>
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Wiki</term>
<listitem>
<para>
An (unofficial) wiki can be found
at <ulink url="http://wiki.mutt.org/">http://wiki.mutt.org/</ulink>.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>IRC</term>
<listitem>
<para>
For the IRC user community, visit channel <emphasis>&num;mutt</emphasis> on
<ulink url="http://www.freenode.net/">irc.freenode.net</ulink>.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>USENET</term>
<listitem>
<para>
For USENET, see the newsgroup <ulink url="news:comp.mail.mutt">comp.mail.mutt</ulink>.
</para>
</listitem>
</varlistentry>

</variablelist>

</sect1>

<sect1 id="contrib">
<title>Contributing to Mutt</title>

<para>
There are various ways to contribute to the Mutt project.
</para>

<para>
Especially for new users it may be helpful to meet other new and
experienced users to chat about Mutt, talk about problems and share
tricks.
</para>

<para>
Since translations of Mutt into other languages are highly appreciated,
the mutt developers always look for skilled translators that help
improve and continue to maintain stale translations.
</para>

<para>
For contributing code patches for new features and bug fixes, please
refer to the developer pages at
<ulink url="http://dev.mutt.org/">http://dev.mutt.org/</ulink> for more details.
</para>

</sect1>

<sect1 id="typo">
<title>Typograhical conventions</title>

<para>
This section lists typographical conventions followed throughout this
manual. See table <xref linkend="tab-typo"/> for typographical
conventions for special terms.
</para>

<table id="tab-typo">
<title>Typographical conventions for special terms</title>
<tgroup cols="2">
<thead>
<row><entry>Item</entry><entry>Refers to...</entry></row>
</thead>
<tbody>
<row><entry><literal>printf(3)</literal></entry><entry>UNIX manual pages, execute <literal>man 3 printf</literal></entry></row>
<row><entry><literal>&lt;PageUp&gt;</literal></entry><entry>named keys</entry></row>
<row><entry><literal>&lt;create-alias&gt;</literal></entry><entry>named Mutt function</entry></row>
<row><entry><literal>&circ;G</literal></entry><entry>Control+G key combination</entry></row>
<row><entry><literal>&dollar;mail&lowbar;check</literal></entry><entry>Mutt configuration option</entry></row>
<row><entry><literal>&dollar;HOME</literal></entry><entry>environment variable</entry></row>
</tbody>
</tgroup>
</table>

<para>
Examples are presented as:
</para>

<screen>
mutt -v
</screen>

<para>
Within command synopsis, curly brackets (<quote>&lcub;&rcub;</quote>) denote a set
of options of which one is mandatory, square brackets
(<quote>&lsqb;&rsqb;</quote>) denote optional arguments, three dots
denote that the argument may be repeated arbitrary times.
</para>

</sect1>

<sect1 id="copyright">
<title>Copyright</title>

<para>
Mutt is Copyright (C) 1996-2009 Michael R. Elkins
<email>me@mutt.org</email> and others.
</para>

<para>
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
</para>

<para>
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
</para>

<para>
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
</para>

</sect1>

</chapter>

<chapter id="gettingstarted">
<title>Getting Started</title>

<para>
This section is intended as a brief overview of how to use Mutt.  There are
many other features which are described elsewhere in the manual.  There
is even more information available in the Mutt FAQ and various web
pages. See the <ulink url="http://www.mutt.org/">Mutt homepage</ulink> for more details.
</para>

<para>
The keybindings described in this section are the defaults as distributed.
Your local system administrator may have altered the defaults for your site.
You can always type <quote>?</quote> in any menu to display the current bindings.
</para>

<para>
The first thing you need to do is invoke mutt, simply by typing <literal>mutt</literal>
at the command line.  There are various command-line options, see
either the mutt man page or the <link linkend="commandline">reference</link>.
</para>

<sect1 id="core-concepts">
<title>Core concepts</title>

<para>
Mutt is a text-based application which interacts with users through
different menus which are mostly line-/entry-based or page-based. A
line-based menu is the so-called <quote>index</quote> menu (listing all messages of
the currently opened folder) or the <quote>alias</quote> menu (allowing you to
select recipients from a list). Examples for page-based menus are the
<quote>pager</quote> (showing one message at a time) or the <quote>help</quote> menu listing
all available key bindings.
</para>

<para>
The user interface consists of a context sensitive help line at the top,
the menu's contents followed by a context sensitive status line and
finally the command line. The command line is used to display
informational and error messages as well as for prompts and for entering
interactive commands.
</para>

<para>
Mutt is configured through variables which, if the user wants to
permanently use a non-default value, are written to configuration
files. Mutt supports a rich config file syntax to make even complex
configuration files readable and commentable.
</para>

<para>
Because Mutt allows for customizing almost all key bindings, there are
so-called <quote>functions</quote> which can be executed manually (using the
command line) or in macros. Macros allow the user to bind a sequence of
commands to a single key or a short key sequence instead of repeating a
sequence of actions over and over.
</para>

<para>
Many commands (such as saving or copying a message to another folder)
can be applied to a single message or a set of messages (so-called
<quote>tagged</quote> messages). To help selecting messages, Mutt provides a rich
set of message patterns (such as recipients, sender, body contents, date
sent/received, etc.) which can be combined into complex expressions
using the boolean <emphasis>and</emphasis> and <emphasis>or</emphasis>
operations as well as negating. These patterns can also be used to (for
example) search for messages or to limit the index to show only matching
messages.
</para>

<para>
Mutt supports a <quote>hook</quote> concept which allows the user to execute
arbitrary configuration commands and functions in certain situations
such as entering a folder, starting a new message or replying to an
existing one. These hooks can be used to highly customize Mutt's
behaviour including managing multiple identities, customizing the
display for a folder or even implementing auto-archiving based on a
per-folder basis and much more.
</para>

</sect1>

<sect1 id="menus">
<title>Moving Around in Menus</title>

<para>
The most important navigation keys common to all menus are shown in
<xref linkend="tab-keys-nav"/>.
</para>

<table id="tab-keys-nav">
<title>Most common navigation keys</title>
<tgroup cols="3">
<thead>
<row><entry>Key</entry><entry>Function</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>j or &lt;Down&gt;</entry><entry><literal>&lt;next-entry&gt;</literal></entry><entry>move to the next entry</entry></row>
<row><entry>k or &lt;Up&gt;</entry><entry><literal>&lt;previous-entry&gt;</literal></entry><entry>move to the previous entry</entry></row>
<row><entry>z or &lt;PageDn&gt;</entry><entry><literal>&lt;page-down&gt;</literal></entry><entry>go to the next page</entry></row>
<row><entry>Z or &lt;PageUp&gt;</entry><entry><literal>&lt;page-up&gt;</literal></entry><entry>go to the previous page</entry></row>
<row><entry>= or &lt;Home&gt;</entry><entry><literal>&lt;first-entry&gt;</literal></entry><entry>jump to the first entry</entry></row>
<row><entry>* or &lt;End&gt;</entry><entry><literal>&lt;last-entry&gt;</literal></entry><entry>jump to the last entry</entry></row>
<row><entry>q</entry><entry><literal>&lt;quit&gt;</literal></entry><entry>exit the current menu</entry></row>
<row><entry>?</entry><entry><literal>&lt;help&gt;</literal></entry><entry>list all keybindings for the current menu</entry></row>
</tbody>
</tgroup>
</table>

</sect1>

<sect1 id="editing">
<title>Editing Input Fields</title>

<sect2 id="editing-intro">
<title>Introduction</title>

<para>
Mutt has a built-in line editor for inputting text, e.g. email
addresses or filenames. The keys used to manipulate text input are
very similar to those of Emacs. See <xref linkend="tab-keys-editor"/> for a full
reference of available functions, their default key bindings, and
short descriptions.
</para>

<table id="tab-keys-editor">
<title>Most common line editor keys</title>
<tgroup cols="3">
<thead>
<row><entry>Key</entry><entry>Function</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>&circ;A or &lt;Home&gt;</entry><entry><literal>&lt;bol&gt;</literal></entry><entry>move to the start of the line</entry></row>
<row><entry>&circ;B or &lt;Left&gt;</entry><entry><literal>&lt;backward-char&gt;</literal></entry><entry>move back one char</entry></row>
<row><entry>Esc B</entry><entry><literal>&lt;backward-word&gt;</literal></entry><entry>move back one word</entry></row>
<row><entry>&circ;D or &lt;Delete&gt;</entry><entry><literal>&lt;delete-char&gt;</literal></entry><entry>delete the char under the cursor</entry></row>
<row><entry>&circ;E or &lt;End&gt;</entry><entry><literal>&lt;eol&gt;</literal></entry><entry>move to the end of the line</entry></row>
<row><entry>&circ;F or &lt;Right&gt;</entry><entry><literal>&lt;forward-char&gt;</literal></entry><entry>move forward one char</entry></row>
<row><entry>Esc F</entry><entry><literal>&lt;forward-word&gt;</literal></entry><entry>move forward one word</entry></row>
<row><entry>&lt;Tab&gt;</entry><entry><literal>&lt;complete&gt;</literal></entry><entry>complete filename or alias</entry></row>
<row><entry>&circ;T</entry><entry><literal>&lt;complete-query&gt;</literal></entry><entry>complete address with query</entry></row>
<row><entry>&circ;K</entry><entry><literal>&lt;kill-eol&gt;</literal></entry><entry>delete to the end of the line</entry></row>
<row><entry>Esc d</entry><entry><literal>&lt;kill-eow&gt;</literal></entry><entry>delete to the end of the word</entry></row>
<row><entry>&circ;W</entry><entry><literal>&lt;kill-word&gt;</literal></entry><entry>kill the word in front of the cursor</entry></row>
<row><entry>&circ;U</entry><entry><literal>&lt;kill-line&gt;</literal></entry><entry>delete entire line</entry></row>
<row><entry>&circ;V</entry><entry><literal>&lt;quote-char&gt;</literal></entry><entry>quote the next typed key</entry></row>
<row><entry>&lt;Up&gt;</entry><entry><literal>&lt;history-up&gt;</literal></entry><entry>recall previous string from history</entry></row>
<row><entry>&lt;Down&gt;</entry><entry><literal>&lt;history-down&gt;</literal></entry><entry>recall next string from history</entry></row>
<row><entry>&lt;BackSpace&gt;</entry><entry><literal>&lt;backspace&gt;</literal></entry><entry>kill the char in front of the cursor</entry></row>
<row><entry>Esc u</entry><entry><literal>&lt;upcase-word&gt;</literal></entry><entry>convert word to upper case</entry></row>
<row><entry>Esc l</entry><entry><literal>&lt;downcase-word&gt;</literal></entry><entry>convert word to lower case</entry></row>
<row><entry>Esc c</entry><entry><literal>&lt;capitalize-word&gt;</literal></entry><entry>capitalize the word</entry></row>
<row><entry>&circ;G</entry><entry>n/a</entry><entry>abort</entry></row>
<row><entry>&lt;Return&gt;</entry><entry>n/a</entry><entry>finish editing</entry></row>
</tbody>
</tgroup>
</table>

<para>
You can remap the <emphasis>editor</emphasis> functions using the
<link linkend="bind">bind</link> command.  For example, to make
the &lt;Delete&gt; key delete the character in front of
the cursor rather than under, you could use:
</para>

<screen>
bind editor &lt;delete&gt; backspace
</screen>

</sect2>

<sect2 id="editing-history">
<title>History</title>

<para>
Mutt maintains a history for the built-in editor.  The number of items
is controlled by the <link linkend="history">&dollar;history</link>
variable and can be made persistent using an external file specified
using <link linkend="history-file">&dollar;history&lowbar;file</link>.
You may cycle through them at an editor prompt by using the
<literal>&lt;history-up&gt;</literal> and/or
<literal>&lt;history-down&gt;</literal> commands. But notice that Mutt
does not remember the currently entered text, it only cycles through
history and wraps around at the end or beginning.
</para>

<para>
Mutt maintains several distinct history lists, one for each of the
following categories:
</para>

<itemizedlist>
<listitem><para>muttrc commands</para></listitem>
<listitem><para>addresses and aliases</para></listitem>
<listitem><para>shell commands</para></listitem>
<listitem><para>filenames</para></listitem>
<listitem><para>patterns</para></listitem>
<listitem><para>everything else</para></listitem>
</itemizedlist>

<para>
Mutt automatically filters out consecutively repeated items from the history. It
also mimics the behavior of some shells by ignoring items starting
with a space. The latter feature can be useful in macros to not clobber
the history's valuable entries with unwanted entries.
</para>

</sect2>

</sect1>

<sect1 id="reading">
<title>Reading Mail - The Index and Pager</title>

<para>
Similar to many other mail clients, there are two modes in which mail is
read in Mutt.  The first is a list of messages in the mailbox, which is
called the <quote>index</quote> menu in Mutt.  The second mode is the display of the
message contents.  This is called the <quote>pager.</quote>
</para>

<para>
The next few sections describe the functions provided in each of these
modes.
</para>

<sect2 id="index-menu">
<title>The Message Index</title>

<para>
Common keys used to navigate through and manage messages in the index
are shown in <xref linkend="tab-key-index"/>. How messages are presented
in the index menu can be customized using the
<link linkend="index-format">&dollar;index&lowbar;format</link> variable.
</para>

<table id="tab-key-index">
<title>Most common message index keys</title>
<tgroup cols="2">
<thead>
<row><entry>Key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>c</entry><entry>change to a different mailbox</entry></row>
<row><entry>Esc c</entry><entry>change to a folder in read-only mode</entry></row>
<row><entry>C</entry><entry>copy the current message to another mailbox</entry></row>
<row><entry>Esc C</entry><entry>decode a message and copy it to a folder</entry></row>
<row><entry>Esc s</entry><entry>decode a message and save it to a folder</entry></row>
<row><entry>D</entry><entry>delete messages matching a pattern</entry></row>
<row><entry>d</entry><entry>delete the current message</entry></row>
<row><entry>F</entry><entry>mark as important</entry></row>
<row><entry>l</entry><entry>show messages matching a pattern</entry></row>
<row><entry>N</entry><entry>mark message as new</entry></row>
<row><entry>o</entry><entry>change the current sort method</entry></row>
<row><entry>O</entry><entry>reverse sort the mailbox</entry></row>
<row><entry>q</entry><entry>save changes and exit</entry></row>
<row><entry>s</entry><entry>save-message</entry></row>
<row><entry>T</entry><entry>tag messages matching a pattern</entry></row>
<row><entry>t</entry><entry>toggle the tag on a message</entry></row>
<row><entry>Esc t</entry><entry>toggle tag on entire message thread</entry></row>
<row><entry>U</entry><entry>undelete messages matching a pattern</entry></row>
<row><entry>u</entry><entry>undelete-message</entry></row>
<row><entry>v</entry><entry>view-attachments</entry></row>
<row><entry>x</entry><entry>abort changes and exit</entry></row>
<row><entry>&lt;Return&gt;</entry><entry>display-message</entry></row>
<row><entry>&lt;Tab&gt;</entry><entry>jump to the next new or unread message</entry></row>
<row><entry>@</entry><entry>show the author's full e-mail address</entry></row>
<row><entry>$</entry><entry>save changes to mailbox</entry></row>
<row><entry>/</entry><entry>search</entry></row>
<row><entry>Esc /</entry><entry>search-reverse</entry></row>
<row><entry>&circ;L</entry><entry>clear and redraw the screen</entry></row>
<row><entry>&circ;T</entry><entry>untag messages matching a pattern</entry></row>
</tbody>
</tgroup>
</table>

<para>
In addition to who sent the message and the subject, a short summary of
the disposition of each message is printed beside the message number.
Zero or more of the <quote>flags</quote> in <xref linkend="tab-msg-status-flags"/>
may appear, some of which can be turned on or off using these functions:
<literal>&lt;set-flag&gt;</literal> and
<literal>&lt;clear-flag&gt;</literal>
bound by default to <quote>w</quote> and <quote>W</quote> respectively.
</para>

<para>
Furthermore, the flags in <xref linkend="tab-msg-recip-flags"/> reflect
who the message is addressed to. They can be customized with the
<link linkend="to-chars">&dollar;to&lowbar;chars</link> variable.
</para>

<table id="tab-msg-status-flags">
<title>Message status flags</title>
<tgroup cols="2">
<thead>
<row><entry>Flag</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>D</entry><entry>message is deleted (is marked for deletion)</entry></row>
<row><entry>d</entry><entry>message has attachments marked for deletion</entry></row>
<row><entry>K</entry><entry>contains a PGP public key</entry></row>
<row><entry>N</entry><entry>message is new</entry></row>
<row><entry>O</entry><entry>message is old</entry></row>
<row><entry>P</entry><entry>message is PGP encrypted</entry></row>
<row><entry>r</entry><entry>message has been replied to</entry></row>
<row><entry>S</entry><entry>message is signed, and the signature is successfully verified</entry></row>
<row><entry>s</entry><entry>message is signed</entry></row>
<row><entry>!</entry><entry>message is flagged</entry></row>
<row><entry>*</entry><entry>message is tagged</entry></row>
</tbody>
</tgroup>
</table>

<table id="tab-msg-recip-flags">
<title>Message recipient flags</title>
<tgroup cols="2">
<thead>
<row><entry>Flag</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>+</entry><entry>message is to you and you only</entry></row>
<row><entry>T</entry><entry>message is to you, but also to or cc'ed to others</entry></row>
<row><entry>C</entry><entry>message is cc'ed to you</entry></row>
<row><entry>F</entry><entry>message is from you</entry></row>
<row><entry>L</entry><entry>message is sent to a subscribed mailing list</entry></row>
</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="pager-menu">
<title>The Pager</title>

<para>
By default, Mutt uses its builtin pager to display the contents of
messages (an external pager such as <literal>less(1)</literal> can be
configured, see <link linkend="pager">&dollar;pager</link> variable).
The pager is very similar to the Unix program <literal>less(1)</literal>
though not nearly as featureful.
</para>

<table id="tab-key-pager">
<title>Most common pager keys</title>
<tgroup cols="2">
<thead>
<row><entry>Key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>&lt;Return&gt;</entry><entry>go down one line</entry></row>
<row><entry>&lt;Space&gt;</entry><entry>display the next page (or next message if at the end of a message)</entry></row>
<row><entry>-</entry><entry>go back to the previous page</entry></row>
<row><entry>n</entry><entry>search for next match</entry></row>
<row><entry>S</entry><entry>skip beyond quoted text</entry></row>
<row><entry>T</entry><entry>toggle display of quoted text</entry></row>
<row><entry>?</entry><entry>show keybindings</entry></row>
<row><entry>/</entry><entry>regular expression search</entry></row>
<row><entry>Esc /</entry><entry>backward regular expression search</entry></row>
<row><entry>&bsol;</entry><entry>toggle highlighting of search matches</entry></row>
<row><entry>&circ;</entry><entry>jump to the top of the message</entry></row>
</tbody>
</tgroup>
</table>

<para>
In addition to key bindings in <xref linkend="tab-key-pager"/>,
many of the functions from the index menu are also available in
the pager, such as <literal>&lt;delete-message&gt;</literal> or <literal>&lt;copy-message&gt;</literal>
(this is one advantage over using an external pager to view messages).
</para>

<para>
Also, the internal pager supports a couple other advanced features. For
one, it will accept and translate the <quote>standard</quote> nroff sequences for
bold and underline. These sequences are a series of either the letter,
backspace (&circ;H), the letter again for bold or the letter, backspace,
<quote>&lowbar;</quote> for denoting underline. Mutt will attempt to display these
in bold and underline respectively if your terminal supports them. If
not, you can use the bold and underline <link linkend="color">color</link>
objects to specify a color or mono attribute for them.
</para>

<para>
Additionally, the internal pager supports the ANSI escape sequences for
character attributes.  Mutt translates them into the correct color and
character settings.  The sequences Mutt supports are:
</para>

<screen>
&bsol;e&lsqb;<emphasis>Ps</emphasis>;<emphasis>Ps</emphasis>;..<emphasis>Ps</emphasis>;m
</screen>

<para>
where <emphasis>Ps</emphasis> can be one of the codes shown in
<xref linkend="tab-ansi-esc"/>.
</para>

<table id="tab-ansi-esc">
<title>ANSI escape sequences</title>
<tgroup cols="2">
<thead>
<row><entry>Escape code</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>0</entry><entry>All attributes off</entry></row>
<row><entry>1</entry><entry>Bold on</entry></row>
<row><entry>4</entry><entry>Underline on</entry></row>
<row><entry>5</entry><entry>Blink on</entry></row>
<row><entry>7</entry><entry>Reverse video on</entry></row>
<row><entry>3<emphasis>&lt;color&gt;</emphasis></entry><entry>Foreground color is <emphasis>&lt;color&gt;</emphasis> (see <xref linkend="tab-color"/>)</entry></row>
<row><entry>4<emphasis>&lt;color&gt;</emphasis></entry><entry>Background color is <emphasis>&lt;color&gt;</emphasis> (see <xref linkend="tab-color"/>)</entry></row>
</tbody>
</tgroup>
</table>

<table id="tab-color">
<title>Color sequences</title>
<tgroup cols="2">
<thead>
<row><entry>Color code</entry><entry>Color</entry></row>
</thead>
<tbody>
<row><entry>0</entry><entry>Black</entry></row>
<row><entry>1</entry><entry>Red</entry></row>
<row><entry>2</entry><entry>Green</entry></row>
<row><entry>3</entry><entry>Yellow</entry></row>
<row><entry>4</entry><entry>Blue</entry></row>
<row><entry>5</entry><entry>Magenta</entry></row>
<row><entry>6</entry><entry>Cyan</entry></row>
<row><entry>7</entry><entry>White</entry></row>
</tbody>
</tgroup>
</table>

<para>
Mutt uses these attributes for handling <literal>text/enriched</literal>
messages, and they can also be used by an external
<link linkend="auto-view">autoview</link> script for highlighting
purposes.
</para>

<note>
<para>
If you change the colors for your
display, for example by changing the color associated with color2 for
your xterm, then that color will be used instead of green.
</para>
</note>

<note>
<para>
Note that the search commands in the pager take regular expressions,
which are not quite the same as the more
complex <link linkend="patterns">patterns</link> used by the search
command in the index. This is because patterns are used to select messages by
criteria whereas the pager already displays a selected message.
</para>
</note>

</sect2>

<sect2 id="threads">
<title>Threaded Mode</title>

<para>
So-called <quote>threads</quote> provide a hierarchy of messages where
replies are linked to their parent message(s). This organizational form
is extremely useful in mailing lists where different parts of the
discussion diverge. Mutt displays threads as a tree structure.
</para>

<para>
In Mutt, when a mailbox is <link linkend="sort">sorted</link>
by <emphasis>threads</emphasis>, there are a few additional functions
available in the <emphasis>index</emphasis>
and <emphasis>pager</emphasis> modes as shown in
<xref linkend="tab-key-threads"/>.
</para>

<table id="tab-key-threads">
<title>Most common thread mode keys</title>
<tgroup cols="3">
<thead>
<row><entry>Key</entry><entry>Function</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>&circ;D</entry><entry><literal>&lt;delete-thread&gt;</literal></entry><entry>delete all messages in the current thread</entry></row>
<row><entry>&circ;U</entry><entry><literal>&lt;undelete-thread&gt;</literal></entry><entry>undelete all messages in the current thread</entry></row>
<row><entry>&circ;N</entry><entry><literal>&lt;next-thread&gt;</literal></entry><entry>jump to the start of the next thread</entry></row>
<row><entry>&circ;P</entry><entry><literal>&lt;previous-thread&gt;</literal></entry><entry>jump to the start of the previous thread</entry></row>
<row><entry>&circ;R</entry><entry><literal>&lt;read-thread&gt;</literal></entry><entry>mark the current thread as read</entry></row>
<row><entry>Esc d</entry><entry><literal>&lt;delete-subthread&gt;</literal></entry><entry>delete all messages in the current subthread</entry></row>
<row><entry>Esc u</entry><entry><literal>&lt;undelete-subthread&gt;</literal></entry><entry>undelete all messages in the current subthread</entry></row>
<row><entry>Esc n</entry><entry><literal>&lt;next-subthread&gt;</literal></entry><entry>jump to the start of the next subthread</entry></row>
<row><entry>Esc p</entry><entry><literal>&lt;previous-subthread&gt;</literal></entry><entry>jump to the start of the previous subthread</entry></row>
<row><entry>Esc r</entry><entry><literal>&lt;read-subthread&gt;</literal></entry><entry>mark the current subthread as read</entry></row>
<row><entry>Esc t</entry><entry><literal>&lt;tag-thread&gt;</literal></entry><entry>toggle the tag on the current thread</entry></row>
<row><entry>Esc v</entry><entry><literal>&lt;collapse-thread&gt;</literal></entry><entry>toggle collapse for the current thread</entry></row>
<row><entry>Esc V</entry><entry><literal>&lt;collapse-all&gt;</literal></entry><entry>toggle collapse for all threads</entry></row>
<row><entry>P</entry><entry><literal>&lt;parent-message&gt;</literal></entry><entry>jump to parent message in thread</entry></row>
</tbody>
</tgroup>
</table>

<para>
Collapsing a thread displays only the first message
in the thread and hides the others. This is useful when threads
contain so many messages that you can only see a handful of threads on
the screen. See &percnt;M in <link linkend="index-format">&dollar;index&lowbar;format</link>.
For example, you could use <quote>&percnt;?M?(&num;&percnt;03M)&amp;(&percnt;4l)?</quote> in <link linkend="index-format">&dollar;index&lowbar;format</link> to optionally
display the number of hidden messages if the thread is
collapsed. The <literal>&percnt;?&lt;char&gt;?&lt;if-part&gt;&amp;&lt;else-part&gt;?</literal>
syntax is explained in detail in
<link linkend="formatstrings-conditionals">format string conditionals</link>.
</para>

<para>
Technically, every reply should contain a list of its parent messages in
the thread tree, but not all do. In these cases, Mutt groups them by
subject which can be controlled using the
<link linkend="strict-threads">&dollar;strict&lowbar;threads</link> variable.
</para>

</sect2>

<sect2 id="reading-misc">
<title>Miscellaneous Functions</title>

<para>
In addition, the <emphasis>index</emphasis> and <emphasis>pager</emphasis>
menus have these interesting functions:
</para>

<variablelist>

<varlistentry>
<term>
<literal>&lt;create-alias&gt;</literal><anchor id="create-alias"/> (default: a)
</term>
<listitem>
<para>
Creates a new alias based upon the current message (or prompts for a
new one).  Once editing is complete, an <link linkend="alias">alias</link>
command is added to the file specified by
the <link linkend="alias-file">&dollar;alias&lowbar;file</link> variable
for future use
</para>

<note>
<para>
Mutt does not read the <link linkend="alias-file">&dollar;alias&lowbar;file</link>
upon startup so you must explicitly <link linkend="source">source</link> the file.
</para>
</note>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;check-traditional-pgp&gt;</literal><anchor id="check-traditional-pgp"/> (default: Esc P)
</term>
<listitem>
<para>
This function will search the current message for content signed or
encrypted with PGP the <quote>traditional</quote> way, that is, without proper
MIME tagging.  Technically, this function will temporarily change
the MIME content types of the body parts containing PGP data; this
is similar to the <link linkend="edit-type"><literal>&lt;edit-type&gt;</literal></link> function's
effect.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;edit&gt;</literal><anchor id="edit"/> (default: e)
</term>
<listitem>
<para>
This command (available in the index and pager) allows you to
edit the raw current message as it's present in the mail folder.
After you have finished editing, the changed message will be
appended to the current folder, and the original message will be
marked for deletion; if the message is unchanged it won't be replaced.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;edit-type&gt;</literal><anchor id="edit-type"/> (default:
&circ;E on the attachment menu, and in the pager and index menus;
&circ;T on the compose menu)
</term>
<listitem>
<para>
This command is used to temporarily edit an attachment's content
type to fix, for instance, bogus character set parameters.  When
invoked from the index or from the pager, you'll have the
opportunity to edit the top-level attachment's content type.  On the
<link linkend="attach-menu">attachment menu</link>, you can change any
attachment's content type. These changes are not persistent, and get
lost upon changing folders.
</para>

<para>
Note that this command is also available on the <link linkend="compose-menu">compose
menu</link>.  There, it's used to fine-tune the properties of attachments you are going
to send.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;enter-command&gt;</literal><anchor id="enter-command"/> (default: <quote>:</quote>)
</term>
<listitem>
<para>
This command is used to execute any command you would normally put in a
configuration file.  A common use is to check the settings of variables, or
in conjunction with <link linkend="macro">macros</link> to change settings on the
fly.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;extract-keys&gt;</literal><anchor id="extract-keys"/> (default: &circ;K)
</term>
<listitem>
<para>
This command extracts PGP public keys from the current or tagged
message(s) and adds them to your PGP public key ring.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;forget-passphrase&gt;</literal><anchor id="forget-passphrase"/> (default:
&circ;F)
</term>
<listitem>
<para>
This command wipes the passphrase(s) from memory. It is useful, if
you misspelled the passphrase.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;list-reply&gt;</literal><anchor id="list-reply"/> (default: L)
</term>
<listitem>
<para>
Reply to the current or tagged message(s) by extracting any addresses which
match the regular expressions given by the <link linkend="lists">lists or subscribe</link>
commands, but also honor any <literal>Mail-Followup-To</literal> header(s) if the
<link linkend="honor-followup-to">&dollar;honor&lowbar;followup&lowbar;to</link>
configuration variable is set.  Using this when replying to messages posted
to mailing lists helps avoid duplicate copies being sent to the author of
the message you are replying to.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;pipe-message&gt;</literal><anchor id="pipe-message"/> (default: &verbar;)
</term>
<listitem>
<para>
Asks for an external Unix command and pipes the current or
tagged message(s) to it.  The variables <link linkend="pipe-decode">&dollar;pipe&lowbar;decode</link>, <link linkend="pipe-split">&dollar;pipe&lowbar;split</link>,
<link linkend="pipe-sep">&dollar;pipe&lowbar;sep</link> and <link linkend="wait-key">&dollar;wait&lowbar;key</link> control the exact behavior of this function.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;resend-message&gt;</literal><anchor id="resend-message"/> (default: Esc e)
</term>
<listitem>
<para>
Mutt takes the current message as a template for a
new message.  This function is best described as "recall from arbitrary
folders".  It can conveniently be used to forward MIME messages while
preserving the original mail structure. Note that the amount of headers
included here depends on the value of the <link linkend="weed">&dollar;weed</link>
variable.
</para>

<para>
This function is also available from the attachment menu. You can use this
to easily resend a message which was included with a bounce message
as a <literal>message/rfc822</literal> body part.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;shell-escape&gt;</literal><anchor id="shell-escape"/> (default: !)
</term>
<listitem>
<para>
Asks for an external Unix command and executes it.  The <link linkend="wait-key">&dollar;wait&lowbar;key</link> can be used to control
whether Mutt will wait for a key to be pressed when the command returns
(presumably to let the user read the output of the command), based on
the return status of the named command. If no command is given, an
interactive shell is executed.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;toggle-quoted&gt;</literal><anchor id="toggle-quoted"/> (default: T)
</term>
<listitem>
<para>
The pager uses the <link linkend="quote-regexp">&dollar;quote&lowbar;regexp</link> variable to detect quoted text when
displaying the body of the message.  This function toggles the display
of the quoted material in the message.  It is particularly useful when
being interested in just the response and there is a large amount of
quoted text in the way.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;skip-quoted&gt;</literal><anchor id="skip-quoted"/> (default: S)
</term>
<listitem>
<para>
This function will go to the next line of non-quoted text which comes
after a line of quoted text in the internal pager.
</para>
</listitem>
</varlistentry>

</variablelist>

</sect2>

</sect1>

<sect1 id="sending">
<title>Sending Mail</title>

<sect2 id="sending-intro">
<title>Introduction</title>

<para>
The bindings shown in <xref linkend="tab-key-send"/> are available in the
<emphasis>index</emphasis> and <emphasis>pager</emphasis> to start a new message.
</para>

<table id="tab-key-send">
<title>Most common mail sending keys</title>
<tgroup cols="3">
<thead>
<row><entry>Key</entry><entry>Function</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>m</entry><entry><literal>&lt;compose&gt;</literal></entry><entry>compose a new message</entry></row>
<row><entry>r</entry><entry><literal>&lt;reply&gt;</literal></entry><entry>reply to sender</entry></row>
<row><entry>g</entry><entry><literal>&lt;group-reply&gt;</literal></entry><entry>reply to all recipients</entry></row>
<row><entry>L</entry><entry><literal>&lt;list-reply&gt;</literal></entry><entry>reply to mailing list address</entry></row>
<row><entry>f</entry><entry><literal>&lt;forward&gt;</literal></entry><entry>forward message</entry></row>
<row><entry>b</entry><entry><literal>&lt;bounce&gt;</literal></entry><entry>bounce (remail) message</entry></row>
<row><entry>Esc k</entry><entry><literal>&lt;mail-key&gt;</literal></entry><entry>mail a PGP public key to someone</entry></row>
</tbody>
</tgroup>
</table>

<para>
<emphasis>Bouncing</emphasis> a message sends the message as-is to the recipient you
specify.  <emphasis>Forwarding</emphasis> a message allows you to add comments or
modify the message you are forwarding.  These items are discussed
in greater detail in the next section <quote><link linkend="forwarding-mail">Forwarding
and Bouncing Mail</link>.</quote>
</para>

<para>
Mutt will then enter the <emphasis>compose</emphasis> menu and prompt you for the
recipients to place on the <quote>To:</quote> header field.  Next, it will ask
you for the <quote>Subject:</quote> field for the message, providing a default if
you are replying to or forwarding a message. You again
have the chance to adjust recipients, subject, and security settings
right before actually sending the message. See also
<link linkend="askcc">&dollar;askcc</link>,
<link linkend="askbcc">&dollar;askbcc</link>,
<link linkend="autoedit">&dollar;autoedit</link>,
<link linkend="bounce">&dollar;bounce</link>,
<link linkend="fast-reply">&dollar;fast&lowbar;reply</link>,
and <link linkend="include">&dollar;include</link>
for changing how and if Mutt asks these questions.
</para>

<para>
Mutt will then automatically start your <link linkend="editor">&dollar;editor</link>
on the message body. If the <link linkend="edit-headers">&dollar;edit&lowbar;headers</link>
variable is set, the headers will be at the top of the message in your editor.
Any messages you are replying to will be added in sort order to the message,
with appropriate <link linkend="attribution">&dollar;attribution</link>,
<link linkend="indent-string">&dollar;indent&lowbar;string</link> and
<link linkend="post-indent-string">&dollar;post&lowbar;indent&lowbar;string</link>.
When forwarding a message, if the <link linkend="mime-forward">&dollar;mime&lowbar;forward</link>
variable is unset, a copy of the forwarded message will be included.  If
you have specified a <link linkend="signature">&dollar;signature</link>, it
will be appended to the message.
</para>

<para>
Once you have finished editing the body of your mail message, you are
returned to the <emphasis>compose</emphasis> menu providing the functions
shown in <xref linkend="tab-func-compose"/> to modify, send or postpone the
message.
</para>

<table id="tab-func-compose">
<title>Most common compose menu keys</title>
<tgroup cols="3">
<thead>
<row><entry>Key</entry><entry>Function</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>a</entry><entry><literal>&lt;attach-file&gt;</literal></entry><entry>attach a file</entry></row>
<row><entry>A</entry><entry><literal>&lt;attach-message&gt;</literal></entry><entry>attach message(s) to the message</entry></row>
<row><entry>Esc k</entry><entry><literal>&lt;attach-key&gt;</literal></entry><entry>attach a PGP public key</entry></row>
<row><entry>d</entry><entry><literal>&lt;edit-description&gt;</literal></entry><entry>edit description on attachment</entry></row>
<row><entry>D</entry><entry><literal>&lt;detach-file&gt;</literal></entry><entry>detach a file</entry></row>
<row><entry>t</entry><entry><literal>&lt;edit-to&gt;</literal></entry><entry>edit the To field</entry></row>
<row><entry>Esc f</entry><entry><literal>&lt;edit-from&gt;</literal></entry><entry>edit the From field</entry></row>
<row><entry>r</entry><entry><literal>&lt;edit-reply-to&gt;</literal></entry><entry>edit the Reply-To field</entry></row>
<row><entry>c</entry><entry><literal>&lt;edit-cc&gt;</literal></entry><entry>edit the Cc field</entry></row>
<row><entry>b</entry><entry><literal>&lt;edit-bcc&gt;</literal></entry><entry>edit the Bcc field</entry></row>
<row><entry>y</entry><entry><literal>&lt;send-message&gt;</literal></entry><entry>send the message</entry></row>
<row><entry>s</entry><entry><literal>&lt;edit-subject&gt;</literal></entry><entry>edit the Subject</entry></row>
<row><entry>S</entry><entry><literal>&lt;smime-menu&gt;</literal></entry><entry>select S/MIME options</entry></row>
<row><entry>f</entry><entry><literal>&lt;edit-fcc&gt;</literal></entry><entry>specify an <quote>Fcc</quote> mailbox</entry></row>
<row><entry>p</entry><entry><literal>&lt;pgp-menu&gt;</literal></entry><entry>select PGP options</entry></row>
<row><entry>P</entry><entry><literal>&lt;postpone-message&gt;</literal></entry><entry>postpone this message until later</entry></row>
<row><entry>q</entry><entry><literal>&lt;quit&gt;</literal></entry><entry>quit (abort) sending the message</entry></row>
<row><entry>w</entry><entry><literal>&lt;write-fcc&gt;</literal></entry><entry>write the message to a folder</entry></row>
<row><entry>i</entry><entry><literal>&lt;ispell&gt;</literal></entry><entry>check spelling (if available on your system)</entry></row>
<row><entry>&circ;F</entry><entry><literal>&lt;forget-passphrase&gt;</literal></entry><entry>wipe passphrase(s) from memory</entry></row>
</tbody>
</tgroup>
</table>

<para>
The compose menu is also used to edit the attachments for a message which can be either files
or other messages. The <literal>&lt;attach-message&gt;</literal> function to will prompt you for a folder to
attach messages from. You can now tag messages in that folder and they
will be attached to the message you are sending.
</para>

<note>
<para>
Note that certain
operations like composing a new mail, replying, forwarding, etc. are
not permitted when you are in that folder. The &percnt;r in
<link linkend="status-format">&dollar;status&lowbar;format</link> will change to
a <quote>A</quote> to indicate that you are in attach-message mode.
</para>
</note>

</sect2>

<sect2 id="edit-header">
<title>Editing the message header</title>

<para>
When editing the header because of <link linkend="edit-headers">&dollar;edit&lowbar;headers</link>
being set, there are a several pseudo headers available which
will not be included in sent messages but trigger special Mutt behavior.
</para>

<sect3 id="fcc-header">
<title>Fcc: pseudo header</title>

<para>
If you specify
</para>

<para>
<literal>Fcc:</literal> <emphasis>filename</emphasis>
</para>

<para>
as a header, Mutt will pick up <emphasis>filename</emphasis>
just as if you had used the <literal>&lt;edit-fcc&gt;</literal> function in the <emphasis>compose</emphasis> menu.
</para>

</sect3>

<sect3 id="attach-header">
<title>Attach: pseudo header</title>

<para>
You can also attach files to your message by specifying
</para>

<para>
<literal>Attach:</literal> <emphasis>filename</emphasis>
&lsqb; <emphasis>description</emphasis> &rsqb;
</para>

<para>
where <emphasis>filename</emphasis> is the file to attach and <emphasis>description</emphasis> is an
optional string to use as the description of the attached file. Spaces
in filenames have to be escaped using backslash (<quote>&bsol;</quote>).
</para>

</sect3>

<sect3 id="pgp-header">
<title>Pgp: pseudo header</title>

<para>
If you want to use PGP, you can specify
</para>

<para>
<literal>Pgp:</literal> &lsqb; <literal>E</literal> &verbar; <literal>S</literal> &verbar; <literal>S</literal><emphasis>&lt;id&gt;</emphasis> &rsqb;

</para>

<para>
<quote>E</quote> selects encryption, <quote>S</quote> selects signing and
<quote>S&lt;id&gt;</quote> selects signing with the given key, setting
<link linkend="pgp-sign-as">&dollar;pgp&lowbar;sign&lowbar;as</link>
permanently.
</para>

</sect3>

<sect3 id="in-reply-to-header">
<title>In-Reply-To: header</title>

<para>
When replying to messages, the <emphasis>In-Reply-To:</emphasis> header contains the
Message-Id of the message(s) you reply to. If you remove its value, Mutt will not generate a
<emphasis>References:</emphasis> field, which allows you to create a new message thread, for example
to create a new message to a mailing list without having to enter the mailing list's address.
</para>

</sect3>

</sect2>

<sect2 id="sending-crypto">
<title>Sending cryptographically signed/encrypted messages</title>

<para>
If you have told mutt to PGP or S/MIME encrypt a message, it will guide you
through a key selection process when you try to send the message.
Mutt will not ask you any questions about keys which have a
certified user ID matching one of the message recipients' mail
addresses.  However, there may be situations in which there are
several keys, weakly certified user ID fields, or where no matching
keys can be found.
</para>

<para>
In these cases, you are dropped into a menu with a list of keys from
which you can select one.  When you quit this menu, or mutt can't
find any matching keys, you are prompted for a user ID.  You can, as
usually, abort this prompt using <literal>&circ;G</literal>.  When you do so, mutt will
return to the compose screen.
</para>

<para>
Once you have successfully finished the key selection, the message
will be encrypted using the selected public keys when sent out.
</para>

<para>
Most fields of the entries in the key selection menu (see also <link linkend="pgp-entry-format">&dollar;pgp&lowbar;entry&lowbar;format</link>)
have obvious meanings.  But some explanations on the capabilities, flags,
and validity fields are in order.
</para>

<para>
The flags sequence (&percnt;f) will expand to one of the flags in
<xref linkend="tab-pgp-menuflags"/>.
</para>

<table id="tab-pgp-menuflags">
<title>PGP key menu flags</title>
<tgroup cols="2">
<thead>
<row><entry>Flag</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>R</entry><entry>The key has been revoked and can't be used.</entry></row>
<row><entry>X</entry><entry>The key is expired and can't be used.</entry></row>
<row><entry>d</entry><entry>You have marked the key as disabled.</entry></row>
<row><entry>c</entry><entry>There are unknown critical self-signature packets.</entry></row>
</tbody>
</tgroup>
</table>

<para>
The capabilities field (&percnt;c) expands to a two-character sequence
representing a key's capabilities.  The first character gives
the key's encryption capabilities: A minus sign (<quote>-</quote>) means
that the key cannot be used for encryption.  A dot (<quote>.</quote>) means that
it's marked as a signature key in one of the user IDs, but may
also be used for encryption.  The letter <quote>e</quote> indicates that
this key can be used for encryption.
</para>

<para>
The second character indicates the key's signing capabilities.  Once
again, a <quote>-</quote> implies <quote>not for signing</quote>, <quote>.</quote> implies
that the key is marked as an encryption key in one of the user-ids, and
<quote>s</quote> denotes a key which can be used for signing.
</para>

<para>
Finally, the validity field (&percnt;t) indicates how well-certified a user-id
is.  A question mark (<quote>?</quote>) indicates undefined validity, a minus
character (<quote>-</quote>) marks an untrusted association, a space character
means a partially trusted association, and a plus character (<quote>+</quote>)
indicates complete validity.
</para>

</sect2>

<sect2 id="sending-mixmaster">
<title>Sending anonymous messages via mixmaster</title>

<para>
You may also have compiled mutt to co-operate with Mixmaster, an
anonymous remailer.  Mixmaster permits you to send your messages
anonymously using a chain of remailers. Mixmaster support in mutt is for
mixmaster version 2.04 (beta 45 appears to be the latest) and 2.03.
It does not support earlier versions or the later so-called version 3 betas,
of which the latest appears to be called 2.9b23.
</para>

<para>
To use it, you'll have to obey certain restrictions.  Most
important, you cannot use the <literal>Cc</literal> and <literal>Bcc</literal> headers.  To tell
Mutt to use mixmaster, you have to select a remailer chain, using
the mix function on the compose menu.
</para>

<para>
The chain selection screen is divided into two parts.  In the
(larger) upper part, you get a list of remailers you may use.  In
the lower part, you see the currently selected chain of remailers.
</para>

<para>
You can navigate in the chain using the <literal>&lt;chain-prev&gt;</literal> and
<literal>&lt;chain-next&gt;</literal> functions, which are by default bound to the left
and right arrows and to the <literal>h</literal> and <literal>l</literal> keys (think vi
keyboard bindings).  To insert a remailer at the current chain
position, use the <literal>&lt;insert&gt;</literal> function.  To append a remailer behind
the current chain position, use <literal>&lt;select-entry&gt;</literal> or <literal>&lt;append&gt;</literal>.
You can also delete entries from the chain, using the corresponding
function.  Finally, to abandon your changes, leave the menu, or
<literal>&lt;accept&gt;</literal> them pressing (by default) the <literal>Return</literal> key.
</para>

<para>
Note that different remailers do have different capabilities,
indicated in the &percnt;c entry of the remailer menu lines (see
<link linkend="mix-entry-format">&dollar;mix&lowbar;entry&lowbar;format</link>).  Most important is
the <quote>middleman</quote> capability, indicated by a capital <quote>M</quote>: This
means that the remailer in question cannot be used as the final
element of a chain, but will only forward messages to other
mixmaster remailers.  For details on the other capabilities, please
have a look at the mixmaster documentation.
</para>

</sect2>

<sect2 id="ff">
<title>Sending format=flowed messages</title>

<sect3 id="ff-concept">
<title>Concept</title>

<para>
<literal>format=flowed</literal>-style messages (or <literal>f=f</literal>
for short) are <literal>text/plain</literal> messages that consist of paragraphs which a receiver's
mail client may reformat to its own needs which mostly means to
customize line lengths regardless of what the sender sent. Technically this is
achieved by letting lines of a <quote>flowable</quote> paragraph end in spaces
except for the last line.
</para>

<para>
While for text-mode clients like mutt it's the best way to assume only a
standard 80x25 character cell terminal, it may be desired to let the
receiver decide completely how to view a message.
</para>

</sect3>

<sect3 id="ff-support">
<title>Mutt support</title>

<para>
Mutt only supports setting the required <literal>format=flowed</literal>
MIME parameter on outgoing messages if the <link
linkend="text-flowed">&dollar;text&lowbar;flowed</link>
variable is set, specifically it does not add the
trailing spaces.
</para>

<para>
After editing the initial message text and before entering
the compose menu, mutt properly space-stuffes the message.
<emphasis>Space-stuffing</emphasis> is required by RfC3676 defining
<literal>format=flowed</literal> and means to prepend a space to:
</para>

<itemizedlist>
<listitem><para>all lines starting with a space</para></listitem>
<listitem><para>lines starting with the word <quote><literal>From</literal></quote>
followed by space</para></listitem>
<listitem><para>all lines starting with <quote><literal>&gt;</literal></quote> which
is not intended to be a quote character</para></listitem>
</itemizedlist>

<note>
<para>
Mutt only supports space-stuffing
for the first two types of lines but not for the third: It is impossible to
safely detect whether a leading <literal>&gt;</literal> character starts a
quote or not. Furthermore, Mutt only applies space-stuffing
<emphasis>once</emphasis> after the initial edit is finished.
</para>
</note>

<para>
All leading spaces are to be removed by receiving clients to restore
the original message prior to further processing.
</para>

</sect3>

<sect3 id="ff-editor">
<title>Editor considerations</title>

<para>
As mutt provides no additional features to compose <literal>f=f</literal>
messages, it's completely up to the user and his editor to produce
proper messages. Please consider your editor's documentation if you
intend to send <literal>f=f</literal> messages.
</para>

<para>
Please note that when editing messages from the compose menu several
times before really sending a mail, it's up to the user to ensure that
the message is properly space-stuffed.
</para>

<para>
For example, <emphasis>vim</emphasis> provides the <literal>w</literal>
flag for its <literal>formatoptions</literal> setting to assist in
creating <literal>f=f</literal> messages, see <literal>:help
fo-table</literal> for details.
</para>

</sect3>

</sect2>

</sect1>

<sect1 id="forwarding-mail">
<title>Forwarding and Bouncing Mail</title>

<para>
Bouncing and forwarding let you send an existing message to recipients
that you specify. Bouncing a message sends a verbatim copy of a message
to alternative addresses as if they were the message's original
recipients specified in the Bcc header.
Forwarding a message, on the other hand, allows you to modify the message
before it is resent (for example, by adding your own comments). Bouncing
is done using the <literal>&lt;bounce&gt;</literal> function and forwarding
using the <literal>&lt;forward&gt;</literal> function bound to <quote>b</quote> and <quote>f</quote>
respectively.
</para>

<para>
Forwarding can be done by including the original message in the new
message's body (surrounded by indicating lines) or including it as a MIME
attachment, depending on the value of the <link linkend="mime-forward">&dollar;mime&lowbar;forward</link> variable.  Decoding of attachments,
like in the pager, can be controlled by the <link linkend="forward-decode">&dollar;forward&lowbar;decode</link> and <link linkend="mime-forward-decode">&dollar;mime&lowbar;forward&lowbar;decode</link> variables,
respectively.  The desired forwarding format may depend on the content,
therefore <link linkend="mime-forward">&dollar;mime&lowbar;forward</link> is a quadoption which, for
example, can be set to <quote>ask-no</quote>.
</para>

<para>
The inclusion of headers is controlled by the current setting of the
<link linkend="weed">&dollar;weed</link> variable, unless <link linkend="mime-forward">&dollar;mime&lowbar;forward</link> is set.
</para>

<para>
Editing the message to forward follows the same procedure as sending or
replying to a message does.
</para>

</sect1>

<sect1 id="postponing-mail">
<title>Postponing Mail</title>

<para>
At times it is desirable to delay sending a message that you have
already begun to compose.  When the <literal>&lt;postpone-message&gt;</literal> function is
used in the <emphasis>compose</emphasis> menu, the body of your message and attachments
are stored in the mailbox specified by the <link linkend="postponed">&dollar;postponed</link> variable.  This means that you can recall the
message even if you exit Mutt and then restart it at a later time.
</para>

<para>
Once a message is postponed, there are several ways to resume it.  From the
command line you can use the <quote>-p</quote> option, or if you compose a new
message from the <emphasis>index</emphasis> or <emphasis>pager</emphasis> you will be prompted if postponed
messages exist.  If multiple messages are currently postponed, the
<emphasis>postponed</emphasis> menu will pop up and you can select which message you would
like to resume.
</para>

<note>
<para>
If you postpone a reply to a message, the reply setting of
the message is only updated when you actually finish the message and
send it.  Also, you must be in the same folder with the message you
replied to for the status of the message to be updated.
</para>
</note>

<para>
See also the <link linkend="postpone">&dollar;postpone</link> quad-option.
</para>

</sect1>

</chapter>

<chapter id="configuration">
<title>Configuration</title>

<sect1 id="configuration-files">
<title>Location of initialization files</title>

<para>
While the default configuration (or <quote>preferences</quote>) make Mutt
usable right out of the box, it is often desirable to tailor Mutt to
suit your own tastes. When Mutt is first invoked, it will attempt to
read the <quote>system</quote> configuration file (defaults set by your local
system administrator), unless the <quote>-n</quote> <link linkend="commandline">command line</link> option is specified.  This file is typically
<literal>/usr/local/share/mutt/Muttrc</literal> or <literal>/etc/Muttrc</literal>. Mutt
will next look for a file named <literal>.muttrc</literal> in your home
directory.  If this file does not exist and your home directory has
a subdirectory named <literal>.mutt</literal>, mutt try to load a file named
<literal>.mutt/muttrc</literal>.
</para>

<para>
<literal>.muttrc</literal> is the file where you will usually place your <link linkend="commands">commands</link> to configure Mutt.
</para>

<para>
In addition, mutt supports version specific configuration files that are
parsed instead of the default files as explained above.  For instance, if
your system has a <literal>Muttrc-0.88</literal> file in the system configuration
directory, and you are running version 0.88 of mutt, this file will be
sourced instead of the <literal>Muttrc</literal> file.  The same is true of the user
configuration file, if you have a file <literal>.muttrc-0.88.6</literal> in your home
directory, when you run mutt version 0.88.6, it will source this file
instead of the default <literal>.muttrc</literal> file.  The version number is the
same which is visible using the <quote>-v</quote> <link linkend="commandline">command line</link> switch or using the <literal>show-version</literal> key (default:
V) from the index menu.
</para>

</sect1>

<sect1 id="muttrc-syntax" xreflabel="Syntax of Initialization Files">
<title>Syntax of Initialization Files</title>

<para>
An initialization file consists of a series of <link linkend="commands">commands</link>.  Each line of the file may contain one or more commands.
When multiple commands are used, they must be separated by a semicolon
(;).
</para>

<example id="ex-rc-multiple-cmds">
<title>Multiple configuration commands per line</title>
<screen>
set realname='Mutt user' ; ignore x-
</screen>
</example>

<para>
The hash mark, or pound sign
(<quote>&num;</quote>), is used as a <quote>comment</quote> character. You can use it to
annotate your initialization file. All text after the comment character
to the end of the line is ignored.
</para>

<example id="ex-ec-comment">
<title>Commenting configuration files</title>
<screen>
my_hdr X-Disclaimer: Why are you listening to me? &num; This is a comment
</screen>
</example>

<para>
Single quotes (') and double quotes (&quot;) can be used to quote strings
which contain spaces or other special characters.  The difference between
the two types of quotes is similar to that of many popular shell programs,
namely that a single quote is used to specify a literal string (one that is
not interpreted for shell variables or quoting with a backslash &lsqb;see
next paragraph&rsqb;), while double quotes indicate a string for which
should be evaluated.  For example, backticks are evaluated inside of double
quotes, but <emphasis>not</emphasis> for single quotes.
</para>

<para>
<quote>&bsol;</quote> quotes the next character, just as in shells such as bash and zsh.
For example, if want to put quotes <quote>&quot;</quote> inside of a string, you can use
<quote>&bsol;</quote> to force the next character to be a literal instead of interpreted
character.
</para>

<example id="ex-rc-quote">
<title>Escaping quotes in congfiguration files</title>
<screen>
set realname="Michael \"MuttDude\" Elkins"
</screen>
</example>

<para>
<quote>&bsol;&bsol;</quote> means to insert a literal <quote>&bsol;</quote> into the line.
<quote>&bsol;n</quote> and <quote>&bsol;r</quote> have their usual C meanings of linefeed and
carriage-return, respectively.
</para>

<para>
A <quote>&bsol;</quote> at the end of a line can be used to split commands over
multiple lines as it <quote>escapes</quote> the line end, provided that the split points don't appear in the
middle of command names. Lines are first concatenated before
interpretation so that a multi-line can be commented by commenting out
the first line only.
</para>

<example id="ex-rc-split">
<title>Splitting long configuration commands over several lines</title>
<screen>
set status_format="some very \
long value split \
over several lines"
</screen>
</example>

<para>
It is also possible to substitute the output of a Unix command in an
initialization file.  This is accomplished by enclosing the command in
backticks (``). In <xref linkend="ex-rc-backtick"/>, the output of the
Unix command <quote>uname -a</quote> will be substituted before the
line is parsed.
Since initialization files are line oriented, only
the first line of output from the Unix command will be substituted.
</para>

<example id="ex-rc-backtick">
<title>Using external command's output in configuration files</title>
<screen>
my_hdr X-Operating-System: `uname -a`
</screen>
</example>

<para>
Both environment variables and mutt variables can be accessed by
prepending <quote>&dollar;</quote> to the name of the variable. For example,
</para>

<example id="ex-rc-env">
<title>Using environment variables in configuration files</title>
<screen>
set record=+sent_on_$HOSTNAME
</screen>
</example>

<para>
will cause mutt to save outgoing messages to a folder named
<quote>sent_on_kremvax</quote> if the environment variable <literal>$HOSTNAME</literal> is set to
<quote>kremvax.</quote> (See <link linkend="record">&dollar;record</link> for
details.)
</para>

<para>
Mutt expands the variable when it is assigned, not when it is used. If
the value of a variable on the right-hand side of an assignment
changes after the assignment, the variable on the left-hand side will
not be affected.
</para>

<para>
The commands understood by mutt are explained in the next paragraphs.
For a complete list, see the <link linkend="commands">command reference</link>.
</para>

<para>
All configuration files are expected to be in the current locale as
specified by the <link linkend="charset">&dollar;charset</link> variable
which doesn't have a default value since it's determined by Mutt at startup.
If a configuration file is not encoded in the same character set the
<link linkend="config-charset">&dollar;config&lowbar;charset</link>
variable should be used: all lines starting with the next are recoded
from <link linkend="config-charset">&dollar;config&lowbar;charset</link>
to <link linkend="charset">&dollar;charset</link>.
</para>

<para>
This mechanism should be avoided if possible as it has the
following implications:
</para>

<itemizedlist>

<listitem><para>These variables should be set early in a configuration
file with <link linkend="charset">&dollar;charset</link> preceding
<link linkend="config-charset">&dollar;config&lowbar;charset</link> so Mutt
knows what character set to convert to.</para></listitem>

<listitem><para>If <link linkend="config-charset">&dollar;config&lowbar;charset</link> is set, it should be set
in each configuration file because the value is global and <emphasis>not</emphasis>
per configuration file.</para></listitem>

<listitem><para>Because Mutt first recodes a line before it attempts to parse it,
a conversion introducing question marks or other characters as
part of errors (unconvertable characters, transliteration) may introduce syntax
errors or silently change the meaning of certain tokens (e.g. inserting
question marks into regular expressions).</para></listitem>

</itemizedlist>

</sect1>

<sect1 id="addrgroup">
<title>Address groups</title>

<para>Usage:</para>

<cmdsynopsis>
<command>group</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>
</cmdsynopsis>

<cmdsynopsis>
<command>ungroup</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
<literal>group</literal> is used to directly add either addresses or
regular expressions to the specified group or groups. The different
categories of arguments to the <literal>group</literal> command can be
in any order. The flags <literal>-rx</literal> and
<literal>-addr</literal> specify what the following strings (that cannot
begin with a hyphen) should be interpreted as: either a regular
expression or an email address, respectively.
</para>

<para>
These address groups can also be created implicitly by the
<link linkend="alias">alias</link>, <link linkend="lists">lists</link>,
<link linkend="lists">subscribe</link> and
<link linkend="alternates">alternates</link> commands by specifying the
optional <literal>-group</literal> option.
</para>

<para>
Once defined, these address groups can be used in
<link linkend="patterns">patterns</link> to search for and limit the
display to messages matching a group.
</para>

<para>
<literal>ungroup</literal> is used to remove addresses or regular
expressions from the specified group or groups. The syntax is similar to
the <literal>group</literal> command, however the special character
<literal>*</literal> can be used to empty a group of all of its
contents.
</para>

</sect1>

<sect1 id="alias">
<title>Defining/Using aliases</title>

<para>Usage:</para>

<cmdsynopsis>
<command>alias</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">address</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">address</replaceable>
</arg>
</cmdsynopsis>

<para>
It's usually very cumbersome to remember or type out the address of someone
you are communicating with.  Mutt allows you to create <quote>aliases</quote> which map
a short string to a full address.
</para>

<note>
<para>
If you want to create an alias for more than
one address, you <emphasis>must</emphasis> separate the addresses with a comma (<quote>,</quote>).
</para>
</note>

<para>
The optional <literal>-group</literal> argument to
<literal>alias</literal> causes the aliased address(es) to be added to
the named <emphasis>group</emphasis>.
</para>

<para>
To remove an alias or aliases (<quote>*</quote> means all aliases):
</para>

<cmdsynopsis>
<command>unalias</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">key</replaceable>
</arg>
</group>
</cmdsynopsis>

<screen>
alias muttdude me@cs.hmc.edu (Michael Elkins)
alias theguys manny, moe, jack
</screen>

<para>
Unlike other mailers, Mutt doesn't require aliases to be defined
in a special file.  The <literal>alias</literal> command can appear anywhere in
a configuration file, as long as this file is <link linkend="source">sourced</link>.  Consequently, you can have multiple alias files, or
you can have all aliases defined in your muttrc.
</para>

<para>
On the other hand, the <link linkend="create-alias"><literal>&lt;create-alias&gt;</literal></link>
function can use only one file, the one pointed to by the <link linkend="alias-file">&dollar;alias&lowbar;file</link> variable (which is
<literal>&tilde;/.muttrc</literal> by default). This file is not special either,
in the sense that Mutt will happily append aliases to any file, but in
order for the new aliases to take effect you need to explicitly <link linkend="source">source</link> this file too.
</para>

<example id="ex-alias-external">
<title>Configuring external alias files</title>
<screen>
source /usr/local/share/Mutt.aliases
source ~/.mail_aliases
set alias_file=~/.mail_aliases
</screen>
</example>

<para>
To use aliases, you merely use the alias at any place in mutt where mutt
prompts for addresses, such as the <emphasis>To:</emphasis> or <emphasis>Cc:</emphasis> prompt.  You can
also enter aliases in your editor at the appropriate headers if you have the
<link linkend="edit-headers">&dollar;edit&lowbar;headers</link> variable set.
</para>

<para>
In addition, at the various address prompts, you can use the tab character
to expand a partial alias to the full alias.  If there are multiple matches,
mutt will bring up a menu with the matching aliases.  In order to be
presented with the full list of aliases, you must hit tab without a partial
alias, such as at the beginning of the prompt or after a comma denoting
multiple addresses.
</para>

<para>
In the alias menu, you can select as many aliases as you want with the
<literal>select-entry</literal> key (default: &lt;Return&gt;), and use the
<emphasis>exit</emphasis> key (default: q) to return to the address prompt.
</para>

</sect1>

<sect1 id="bind">
<title>Changing the default key bindings</title>

<para>Usage:</para>

<cmdsynopsis>
<command>bind</command>
<arg choice="plain">
<replaceable class="parameter">map</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>

<para>
This command allows you to change the default key bindings (operation
invoked when pressing a key).
</para>

<para>
<emphasis>map</emphasis> specifies in which menu the binding belongs.  Multiple maps may
be specified by separating them with commas (no additional whitespace is
allowed). The currently defined maps are:
</para>

<anchor id="maps"/>
<variablelist>

<varlistentry>
<term>generic</term>
<listitem>
<para>
This is not a real menu, but is used as a fallback for all of the other
menus except for the pager and editor modes.  If a key is not defined in
another menu, Mutt will look for a binding to use in this menu.  This allows
you to bind a key to a certain function in multiple menus instead of having
multiple bind statements to accomplish the same task.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>alias</term>
<listitem>
<para>
The alias menu is the list of your personal aliases as defined in your
muttrc.  It is the mapping from a short alias name to the full email
address(es) of the recipient(s).
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>attach</term>
<listitem>
<para>
The attachment menu is used to access the attachments on received messages.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>browser</term>
<listitem>
<para>
The browser is used for both browsing the local directory structure, and for
listing all of your incoming mailboxes.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>editor</term>
<listitem>
<para>
The editor is the line-based editor the user enters text data.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>index</term>
<listitem>
<para>
The index is the list of messages contained in a mailbox.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>compose</term>
<listitem>
<para>
The compose menu is the screen used when sending a new message.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>pager</term>
<listitem>
<para>
The pager is the mode used to display message/attachment data, and help
listings.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>pgp</term>
<listitem>
<para>
The pgp menu is used to select the OpenPGP keys used to encrypt outgoing
messages.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>smime</term>
<listitem>
<para>
The smime menu is used to select the OpenSSL certificates used to encrypt outgoing
messages.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>postpone</term>
<listitem>
<para>
The postpone menu is similar to the index menu, except is used when
recalling a message the user was composing, but saved until later.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>query</term>
<listitem>
<para>
The query menu is the browser for results returned by
<link linkend="query-command">&dollar;query&lowbar;command</link>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>mix</term>
<listitem>
<para>
The mixmaster screen is used to select remailer options for outgoing
messages (if Mutt is compiled with Mixmaster support).
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
<emphasis>key</emphasis> is the key (or key sequence) you wish to bind.  To specify a
control character, use the sequence <emphasis>&bsol;Cx</emphasis>, where <emphasis>x</emphasis> is the
letter of the control character (for example, to specify control-A use
<quote>&bsol;Ca</quote>).  Note that the case of <emphasis>x</emphasis> as well as <emphasis>&bsol;C</emphasis> is
ignored, so that <emphasis>&bsol;CA</emphasis>, <emphasis>&bsol;Ca</emphasis>, <emphasis>&bsol;cA</emphasis> and <emphasis>&bsol;ca</emphasis> are all
equivalent.  An alternative form is to specify the key as a three digit
octal number prefixed with a <quote>&bsol;</quote> (for example <emphasis>&bsol;177</emphasis> is
equivalent to <emphasis>&bsol;c?</emphasis>). In addition, <emphasis>key</emphasis> may
be a symbolic name as shown in <xref linkend="tab-key-names"/>.
</para>

<table id="tab-key-names">
<title>Symbolic key names</title>
<tgroup cols="2">
<thead>
<row><entry>Symbolic name</entry><entry>Meaning</entry></row>
</thead>
<tbody>
<row><entry>&bsol;t</entry><entry>tab</entry></row>
<row><entry>&lt;tab&gt;</entry><entry>tab</entry></row>
<row><entry>&lt;backtab&gt;</entry><entry>backtab / shift-tab</entry></row>
<row><entry>&bsol;r</entry><entry>carriage return</entry></row>
<row><entry>&bsol;n</entry><entry>newline</entry></row>
<row><entry>&bsol;e</entry><entry>escape</entry></row>
<row><entry>&lt;esc&gt;</entry><entry>escape</entry></row>
<row><entry>&lt;up&gt;</entry><entry>up arrow</entry></row>
<row><entry>&lt;down&gt;</entry><entry>down arrow</entry></row>
<row><entry>&lt;left&gt;</entry><entry>left arrow</entry></row>
<row><entry>&lt;right&gt;</entry><entry>right arrow</entry></row>
<row><entry>&lt;pageup&gt;</entry><entry>Page Up</entry></row>
<row><entry>&lt;pagedown&gt;</entry><entry>Page Down</entry></row>
<row><entry>&lt;backspace&gt;</entry><entry>Backspace</entry></row>
<row><entry>&lt;delete&gt;</entry><entry>Delete</entry></row>
<row><entry>&lt;insert&gt;</entry><entry>Insert</entry></row>
<row><entry>&lt;enter&gt;</entry><entry>Enter</entry></row>
<row><entry>&lt;return&gt;</entry><entry>Return</entry></row>
<row><entry>&lt;home&gt;</entry><entry>Home</entry></row>
<row><entry>&lt;end&gt;</entry><entry>End</entry></row>
<row><entry>&lt;space&gt;</entry><entry>Space bar</entry></row>
<row><entry>&lt;f1&gt;</entry><entry>function key 1</entry></row>
<row><entry>&lt;f10&gt;</entry><entry>function key 10</entry></row>
</tbody>
</tgroup>
</table>

<para>
<emphasis>key</emphasis> does not need to be enclosed in quotes unless it contains a
space (<quote>&puncsp;</quote>) or semi-colon (<quote>;</quote>).
</para>

<para>
<emphasis>function</emphasis> specifies which action to take when <emphasis>key</emphasis> is pressed.
For a complete list of functions, see the <link linkend="functions">reference</link>.  The special function <literal>&lt;noop&gt;</literal> unbinds the specified key
sequence.
</para>

</sect1>

<sect1 id="charset-hook">

<title>Defining aliases for character sets </title>

<para>Usage:</para>

<cmdsynopsis>
<command>charset-hook</command>
<arg choice="plain">
<replaceable class="parameter">alias</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>iconv-hook<anchor id="iconv-hook"/></command>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">local-charset</replaceable>
</arg>
</cmdsynopsis>

<para>
The <literal>charset-hook</literal> command defines an alias for a character set.
This is useful to properly display messages which are tagged with a
character set name not known to mutt.
</para>

<para>
The <literal>iconv-hook</literal> command defines a system-specific name for a
character set.  This is helpful when your systems character
conversion library insists on using strange, system-specific names
for character sets.
</para>

</sect1>

<sect1 id="folder-hook">
<title>Setting variables based upon mailbox</title>

<para>Usage:</para>

<cmdsynopsis>
<command>folder-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<para>
It is often desirable to change settings based on which mailbox you are
reading.  The folder-hook command provides a method by which you can execute
any configuration command.  <emphasis>regexp</emphasis> is a regular expression specifying
in which mailboxes to execute <emphasis>command</emphasis> before loading.  If a mailbox
matches multiple folder-hook's, they are executed in the order given in the
muttrc.
</para>

<note>
<para>
If you use the <quote>!</quote> shortcut for <link linkend="spoolfile">&dollar;spoolfile</link> at the beginning of the pattern, you must place it
inside of double or single quotes in order to distinguish it from the
logical <emphasis>not</emphasis> operator for the expression.
</para>
</note>

<note>
<para>
Settings are <emphasis>not</emphasis> restored when you leave the mailbox.
For example, a command action to perform is to change the sorting method
based upon the mailbox being read:

<screen>
folder-hook mutt set sort=threads</screen>

However, the sorting method is not restored to its previous value when
reading a different mailbox.  To specify a <emphasis>default</emphasis> command, use the
pattern <quote>.</quote> before other folder-hooks adjusting a value on a per-folder basis
because folder-hooks are evaluated in the order given in the
configuration file.
</para>
</note>

<para>
The following example will set the <link linkend="sort">sort</link> variable
to <literal>date-sent</literal> for all folders but to <literal>threads</literal>
for all folders containing <quote>mutt</quote> in their name.
</para>

<example id="ex-folder-sorting">
<title>Setting sort method based on mailbox name</title>
<screen>
folder-hook . set sort=date-sent
folder-hook mutt set sort=threads
</screen>
</example>

</sect1>

<sect1 id="macro">
<title>Keyboard macros</title>

<para>Usage:</para>

<cmdsynopsis>
<command>macro</command>
<arg choice="plain">
<replaceable class="parameter">menu</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">sequence</replaceable>
</arg>
<arg choice="opt">
<replaceable class="parameter">description</replaceable>
</arg>
</cmdsynopsis>

<para>
Macros are useful when you would like a single key to perform a series of
actions.  When you press <emphasis>key</emphasis> in menu <emphasis>menu</emphasis>, Mutt will behave as if
you had typed <emphasis>sequence</emphasis>.  So if you have a common sequence of commands
you type, you can create a macro to execute those commands with a single
key or fewer keys.
</para>

<para>
<emphasis>menu</emphasis> is the <link linkend="maps">map</link> which the macro will be bound in.
Multiple maps may be specified by separating multiple menu arguments by
commas. Whitespace may not be used in between the menu arguments and the
commas separating them.
</para>

<para>
<emphasis>key</emphasis> and <emphasis>sequence</emphasis> are expanded by the same rules as the
<link linkend="bind">key bindings</link> with some additions.  The
first is that control characters in <emphasis>sequence</emphasis> can also be specified
as <emphasis>&circ;x</emphasis>.  In order to get a caret (<quote>&circ;</quote>) you need to use
<emphasis>&circ;&circ;</emphasis>.  Secondly, to specify a certain key such as <emphasis>up</emphasis>
or to invoke a function directly, you can use the format
<emphasis>&lt;key name&gt;</emphasis> and <emphasis>&lt;function name&gt;</emphasis>.  For a listing of key
names see the section on <link linkend="bind">key bindings</link>.  Functions
are listed in the <link linkend="functions">reference</link>.
</para>

<para>
The advantage with using function names directly is that the macros will
work regardless of the current key bindings, so they are not dependent on
the user having particular key definitions.  This makes them more robust
and portable, and also facilitates defining of macros in files used by more
than one user (e.g., the system Muttrc).
</para>

<para>
Optionally you can specify a descriptive text after <emphasis>sequence</emphasis>,
which is shown in the help screens if they contain a description.
</para>

<note>
<para>
Macro definitions (if any) listed in the help screen(s), are
silently truncated at the screen width, and are not wrapped.
</para>
</note>

</sect1>

<sect1 id="color">
<title>Using color and mono video attributes</title>

<para>Usage:</para>

<cmdsynopsis>
<command>color</command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>color</command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>color</command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>uncolor</command>
<arg choice="plain">
<option>index</option>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
If your terminal supports color, you can spice up Mutt by creating your own
color scheme.  To define the color of an object (type of information), you
must specify both a foreground color <emphasis>and</emphasis> a background color (it is not
possible to only specify one or the other).
</para>

<para>
<emphasis>header</emphasis> and <emphasis>body</emphasis> match <emphasis>regexp</emphasis>
in the header/body of a message, <emphasis>index</emphasis> matches <emphasis>pattern</emphasis>
(see <xref linkend="patterns"/>) in the message index.
</para>

<para>
<emphasis>object</emphasis> can be one of:
</para>

<itemizedlist>
<listitem><para>attachment</para></listitem>
<listitem><para>bold (hiliting bold patterns in the body of messages)</para></listitem>
<listitem><para>error (error messages printed by Mutt)</para></listitem>
<listitem><para>hdrdefault (default color of the message header in the pager)</para></listitem>
<listitem><para>indicator (arrow or bar used to indicate the current item in a menu)</para></listitem>
<listitem><para>markers (the <quote>+</quote> markers at the beginning of wrapped lines in the pager)</para></listitem>
<listitem><para>message (informational messages)</para></listitem>
<listitem><para>normal</para></listitem>
<listitem><para>quoted (text matching <link linkend="quote-regexp">&dollar;quote&lowbar;regexp</link> in the body of a message)</para></listitem>
<listitem><para>quoted1, quoted2, ..., quoted<emphasis>N</emphasis> (higher levels of quoting)</para></listitem>
<listitem><para>search (hiliting of words in the pager)</para></listitem>
<listitem><para>signature</para></listitem><listitem><para>status (mode lines used to display info about the mailbox or message)</para></listitem>
<listitem><para>tilde (the <quote>&tilde;</quote> used to pad blank lines in the pager)</para></listitem>
<listitem><para>tree (thread tree drawn in the message index and attachment menu)</para></listitem>
<listitem><para>underline (hiliting underlined patterns in the body of messages)</para></listitem>
</itemizedlist>

<para>
<emphasis>foreground</emphasis> and <emphasis>background</emphasis> can be one of the following:
</para>

<itemizedlist>
<listitem><para>white</para></listitem>
<listitem><para>black</para></listitem>
<listitem><para>green</para></listitem>
<listitem><para>magenta</para></listitem>
<listitem><para>blue</para></listitem>
<listitem><para>cyan</para></listitem>
<listitem><para>yellow</para></listitem>
<listitem><para>red</para></listitem>
<listitem><para>default</para></listitem>
<listitem><para>color<emphasis>x</emphasis></para>
</listitem>
</itemizedlist>

<para>
<emphasis>foreground</emphasis> can optionally be prefixed with the keyword <literal>bright</literal> to make
the foreground color boldfaced (e.g., <literal>brightred</literal>).
</para>

<para>
If your terminal supports it, the special keyword <emphasis>default</emphasis> can be
used as a transparent color.  The value <emphasis>brightdefault</emphasis> is also valid.
If Mutt is linked against the <emphasis>S-Lang</emphasis> library, you also need to set
the <emphasis>COLORFGBG</emphasis> environment variable to the default colors of your
terminal for this to work; for example (for Bourne-like shells):
</para>

<screen>
set COLORFGBG="green;black"
export COLORFGBG
</screen>

<note>
<para>
The <emphasis>S-Lang</emphasis> library requires you to use the <emphasis>lightgray</emphasis>
and <emphasis>brown</emphasis> keywords instead of <emphasis>white</emphasis> and <emphasis>yellow</emphasis> when
setting this variable.
</para>
</note>

<note>
<para>
The uncolor command can be applied to the index object only.  It
removes entries from the list. You <emphasis>must</emphasis> specify the same pattern
specified in the color command for it to be removed.  The pattern <quote>*</quote> is
a special token which means to clear the color index list of all entries.
</para>
</note>

<para>
Mutt also recognizes the keywords <emphasis>color0</emphasis>, <emphasis>color1</emphasis>, &hellip;,
<emphasis>color</emphasis><emphasis>N-1</emphasis> (<emphasis>N</emphasis> being the number of colors supported
by your terminal).  This is useful when you remap the colors for your
display (for example by changing the color associated with <emphasis>color2</emphasis>
for your xterm), since color names may then lose their normal meaning.
</para>

<anchor id="mono"/>
<para>
If your terminal does not support color, it is still possible change the video
attributes through the use of the <quote>mono</quote> command. Usage:
</para>

<cmdsynopsis>
<command>mono</command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>mono</command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>mono</command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unmono</command>
<arg choice="plain">
<option>index</option>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
For <emphasis>object</emphasis>, see the color command. <emphasis>attribute</emphasis>
can be one of the following:
</para>

<itemizedlist>
<listitem><para>none</para></listitem>
<listitem><para>bold</para></listitem>
<listitem><para>underline</para></listitem>
<listitem><para>reverse</para></listitem>
<listitem><para>standout</para></listitem>
</itemizedlist>

</sect1>

<sect1 id="msg-hdr-display">
<title>Message header display</title>

<sect2 id="ignore">
<title>Selecting Headers</title>

<para>Usage:</para>

<cmdsynopsis>
<command>ignore</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unignore</command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
Messages often have many header fields added by automatic processing systems,
or which may not seem useful to display on the screen.  This command allows
you to specify header fields which you don't normally want to see in the pager.
</para>

<para>
You do not need to specify the full header field name.  For example,
<quote>ignore content-</quote> will ignore all header fields that begin with the pattern
<quote>content-</quote>. <quote>ignore *</quote> will ignore all headers.
</para>

<para>
To remove a previously added token from the list, use the <quote>unignore</quote> command.
The <quote>unignore</quote> command will make Mutt display headers with the given pattern.
For example, if you do <quote>ignore x-</quote> it is possible to <quote>unignore x-mailer</quote>.
</para>

<para>
<quote>unignore *</quote> will remove all tokens from the ignore list.
</para>

<example id="ex-header-weeding">
<title>Header weeding</title>
<screen>
# Sven's draconian header weeding
ignore *
unignore from date subject to cc
unignore organization organisation x-mailer: x-newsreader: x-mailing-list:
unignore posted-to:
</screen>
</example>

</sect2>

<sect2 id="hdr-order">
<title>Ordering Displayed Headers</title>

<para>Usage:</para>

<cmdsynopsis>
<command>hdr&lowbar;order</command>
<arg choice="plain">
<replaceable class="parameter">header</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">header</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unhdr&lowbar;order</command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>header</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
With the <literal>hdr&lowbar;order</literal> command you can specify an order in
which mutt will attempt to present these headers to you when viewing messages.
</para>

<para>
<quote>unhdr&lowbar;order *</quote> will clear all previous headers from the order list,
thus removing the header order effects set by the system-wide startup file.
</para>

<example id="ex-hdr-order">
<title>Configuring header display order</title>
<screen>
hdr&lowbar;order From Date: From: To: Cc: Subject:
</screen>
</example>

</sect2>
</sect1>

<sect1 id="alternates">
<title>Alternative addresses</title>

<para>Usage:</para>

<cmdsynopsis>
<command>alternates</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<arg choice="plain">
<replaceable>regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unalternates</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
With various functions, mutt will treat messages differently,
depending on whether you sent them or whether you received them from
someone else.  For instance, when replying to a message that you
sent to a different party, mutt will automatically suggest to send
the response to the original message's recipients -- responding to
yourself won't make much sense in many cases.  (See <link linkend="reply-to">&dollar;reply&lowbar;to</link>.)
</para>

<para>
Many users receive e-mail under a number of different addresses. To
fully use mutt's features here, the program must be able to
recognize what e-mail addresses you receive mail under. That's the
purpose of the <literal>alternates</literal> command: It takes a list of regular
expressions, each of which can identify an address under which you
receive e-mail.
</para>

<para>
As addresses are matched using regular expressions and not exact strict
comparisons, you should make sure you specify your addresses as precise
as possible to avoid mismatches. For example, if you specify:
</para>

<screen>
alternates user@example
</screen>

<para>
mutt will consider <quote><literal>some-user@example</literal></quote> as
being your address, too which may not be desired. As a solution, in such
cases addresses should be specified as:
</para>

<screen>
alternates '^user@example$'
</screen>

<para>
The <literal>-group</literal> flag causes all of the subsequent regular expressions
to be added to the named group.
</para>

<para>
The <literal>unalternates</literal> command can be used to write exceptions to
<literal>alternates</literal> patterns. If an address matches something in an
<literal>alternates</literal> command, but you nonetheless do not think it is
from you, you can list a more precise pattern under an <literal>unalternates</literal>
command.
</para>

<para>
To remove a regular expression from the <literal>alternates</literal> list, use the
<literal>unalternates</literal> command with exactly the same <emphasis>regexp</emphasis>.
Likewise, if the <emphasis>regexp</emphasis> for an <literal>alternates</literal> command matches
an entry on the <literal>unalternates</literal> list, that <literal>unalternates</literal>
entry will be removed. If the <emphasis>regexp</emphasis> for <literal>unalternates</literal>
is <quote>*</quote>, <emphasis>all entries</emphasis> on <literal>alternates</literal> will be removed.
</para>

</sect1>

<sect1 id="lists">
<title>Mailing lists</title>

<anchor id="subscribe"/>
<para>Usage:</para>

<cmdsynopsis>
<command>lists</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unlists</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</group>
</cmdsynopsis>

<cmdsynopsis>
<command>subscribe</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unsubscribe</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
Mutt has a few nice features for <link linkend="using-lists">handling mailing lists</link>.  In order to take advantage of them, you must
specify which addresses belong to mailing lists, and which mailing
lists you are subscribed to. Mutt also has limited support for
auto-detecting mailing lists: it supports parsing
<literal>mailto:</literal> links in the common
<literal>List-Post:</literal> header which has the same effect as
specifying the list address via the <literal>lists</literal> command
(except the group feature). Once you have done this, the
<link linkend="list-reply"><literal>&lt;list-reply&gt;</literal></link>
function will work for all known lists.
Additionally, when you send a message to a subscribed list, mutt will
add a Mail-Followup-To header to tell other users' mail user agents
not to send copies of replies to your personal address.
</para>

<note>
<para>
The Mail-Followup-To header is a non-standard extension which is not
supported by all mail user agents.  Adding it is not bullet-proof against
receiving personal CCs of list messages.  Also note that the generation
of the Mail-Followup-To header is controlled by the
<link linkend="followup-to">&dollar;followup&lowbar;to</link>
configuration variable since it's common practice on some mailing lists
to send Cc upons replies (which is more a group- than a list-reply).
</para>
</note>

<para>
More precisely, Mutt maintains lists of patterns for the addresses
of known and subscribed mailing lists.  Every subscribed mailing
list is known. To mark a mailing list as known, use the <quote>lists</quote>
command.  To mark it as subscribed, use <quote>subscribe</quote>.
</para>

<para>
You can use regular expressions with both commands. To mark all
messages sent to a specific bug report's address on Debian's bug
tracking system as list mail, for instance, you could say
</para>

<screen>
subscribe &lsqb;0-9&rsqb;*.*@bugs.debian.org</screen>

<para>
as it's often, it's sufficient to just give a portion of the list's e-mail address.
</para>

<para>
Specify as much of the address as you need to to remove ambiguity.  For
example, if you've subscribed to the Mutt mailing list, you will receive mail
addressed to <literal>mutt-users@mutt.org</literal>.  So, to tell Mutt
that this is a mailing list, you could add <literal>lists mutt-users@</literal> to your
initialization file.  To tell mutt that you are subscribed to it,
add <literal>subscribe mutt-users</literal> to your initialization file instead.
If you also happen to get mail from someone whose address is
<literal>mutt-users@example.com</literal>, you could use
<literal>lists ^mutt-users@mutt&bsol;&bsol;.org$</literal>
or <literal>subscribe ^mutt-users@mutt&bsol;&bsol;.org$</literal> to
match only mail from the actual list.
</para>

<para>
The <literal>-group</literal> flag adds all of the subsequent regular expressions
to the named group.
</para>

<para>
The <quote>unlists</quote> command is used to remove a token from the list of
known and subscribed mailing-lists. Use <quote>unlists *</quote> to remove all
tokens.
</para>

<para>
To remove a mailing list from the list of subscribed mailing lists,
but keep it on the list of known mailing lists, use <quote>unsubscribe</quote>.
</para>

</sect1>

<sect1 id="mbox-hook">
<title>Using Multiple spool mailboxes</title>

<para>Usage:</para>

<cmdsynopsis>
<command>mbox-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
This command is used to move read messages from a specified mailbox to a
different mailbox automatically when you quit or change folders.
<emphasis>pattern</emphasis> is a regular expression specifying the mailbox to treat as a
<quote>spool</quote> mailbox and <emphasis>mailbox</emphasis> specifies where mail should be saved when
read.
</para>

<para>
Unlike some of the other <emphasis>hook</emphasis> commands, only the <emphasis>first</emphasis> matching
pattern is used (it is not possible to save read mail in more than a single
mailbox).
</para>

</sect1>

<sect1 id="mailboxes">
<title>Monitoring incoming mail</title>

<para>Usage:</para>

<cmdsynopsis>
<command>mailboxes</command>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unmailboxes</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
This command specifies folders which can receive mail and
which will be checked for new messages periodically.
</para>

<para>
<emphasis>folder</emphasis> can either be a local file or directory
(Mbox/Mmdf or Maildir/Mh). If Mutt was built with POP and/or IMAP
support, <emphasis>folder</emphasis> can also be a POP/IMAP folder
URL. The URL syntax is described in <xref linkend="url-syntax"/>,
POP and IMAP are described in <xref linkend="pop"/> and <xref linkend="imap"/>
respectively.
</para>

<para>
Mutt provides a number of advanced features for handling (possibly many)
folders and new mail within them, please refer to
<xref linkend="handling-folders"/> for details (including in what
situations and how often Mutt checks for new mail).
</para>

<para>
The <quote>unmailboxes</quote> command is used to remove a token from the list
of folders which receive mail. Use <quote>unmailboxes *</quote> to remove all
tokens.
</para>

<note>
<para>
The folders in the <literal>mailboxes</literal> command are resolved when
the command is executed, so if these names contain <link linkend="shortcuts">shortcut characters</link> (such as <quote>=</quote> and <quote>!</quote>), any variable
definition that affects these characters (like <link linkend="folder">&dollar;folder</link> and <link linkend="spoolfile">&dollar;spoolfile</link>)
should be set before the <literal>mailboxes</literal> command. If
none of these shorcuts are used, a local path should be absolute as
otherwise mutt tries to find it relative to the directory
from where mutt was started which may not always be desired.
</para>
</note>

<para>
For Mbox and Mmdf folders, new mail is detected by comparing access and/or
modification times of files: Mutt assumes a folder has new mail if it wasn't
accessed after it was last modified. Utilities like <literal>biff</literal> or
<literal>frm</literal> or any other program which accesses the mailbox might cause
Mutt to never detect new mail for that mailbox if they do not properly reset the
access time. Other possible causes of Mutt not detecting new mail in these folders
are backup tools (updating access times) or filesystems mounted without
access time update support.
</para>

<para>
In cases where new mail detection for Mbox or Mmdf folders appears to be
unreliable, the
<link linkend="check-mbox-size">&dollar;check&lowbar;mbox&lowbar;size</link>
option can be used to make Mutt track and consult file sizes for new
mail detection instead which won't work for size-neutral changes.
</para>

</sect1>

<sect1 id="my-hdr">
<title>User defined headers</title>

<para>Usage:</para>

<cmdsynopsis>
<command>my&lowbar;hdr</command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unmy&lowbar;hdr</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">field</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
The <literal>my&lowbar;hdr</literal> command allows you to create your own header
fields which will be added to every message you send and appear in the
editor if <link linkend="edit-headers">&dollar;edit&lowbar;headers</link> is set.
</para>

<para>
For example, if you would like to add an <quote>Organization:</quote> header field to
all of your outgoing messages, you can put the command something like
shown in <xref linkend="ex-my-hdr"/> in your <literal>.muttrc</literal>.
</para>

<example id="ex-my-hdr">
<title>Defining custom headers</title>
<screen>
my&lowbar;hdr Organization: A Really Big Company, Anytown, USA
</screen>
</example>

<note>
<para>
Space characters are <emphasis>not</emphasis> allowed between the keyword and
the colon (<quote>:</quote>). The standard for electronic mail (RFC2822) says that
space is illegal there, so Mutt enforces the rule.
</para>
</note>

<para>
If you would like to add a header field to a single message, you should
either set the <link linkend="edit-headers">&dollar;edit&lowbar;headers</link> variable,
or use the <literal>&lt;edit-headers&gt;</literal> function (default: <quote>E</quote>) in the compose menu so
that you can edit the header of your message along with the body.
</para>

<para>
To remove user defined header fields, use the <literal>unmy&lowbar;hdr</literal>
command. You may specify an asterisk (<quote>*</quote>) to remove all header
fields, or the fields to remove. For example, to remove all <quote>To</quote> and
<quote>Cc</quote> header fields, you could use:
</para>

<screen>
unmy&lowbar;hdr to cc
</screen>

</sect1>

<sect1 id="save-hook">
<title>Specify default save mailbox</title>

<para>Usage:</para>

<cmdsynopsis>
<command>save-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
This command is used to override the default mailbox used when saving
messages. <emphasis>mailbox</emphasis> will be used as the default if the message
matches <emphasis>pattern</emphasis>, see <xref linkend="pattern-hook"/> for information
on the exact format.
</para>

<para>
To provide more flexibility and good defaults, Mutt applies the
expandos of <link linkend="index-format">&dollar;index&lowbar;format</link> to
<emphasis>mailbox</emphasis> after it was expanded.
</para>

<example id="ex-save-hook-exando">
<title>Using %-expandos in <literal>save-hook</literal></title>
<screen>
# default: save all to ~/Mail/&lt;author name&gt;
save-hook . ~/Mail/%F

# save from me@turing.cs.hmc.edu and me@cs.hmc.edu to $folder/elkins
save-hook me@(turing\\.)?cs\\.hmc\\.edu$ +elkins

# save from aol.com to $folder/spam
save-hook aol\\.com$ +spam
</screen>
</example>

<para>
Also see the <link linkend="fcc-save-hook">fcc-save-hook</link> command.
</para>

</sect1>

<sect1 id="fcc-hook">
<title>Specify default Fcc: mailbox when composing</title>

<para>Usage:</para>

<cmdsynopsis>
<command>fcc-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
This command is used to save outgoing mail in a mailbox other than
<link linkend="record">&dollar;record</link>.  Mutt searches the initial list of
message recipients for the first matching <emphasis>regexp</emphasis> and uses <emphasis>mailbox</emphasis>
as the default Fcc: mailbox.  If no match is found the message will be saved
to <link linkend="record">&dollar;record</link> mailbox.
</para>

<para>
To provide more flexibility and good defaults, Mutt applies the
expandos of <link linkend="index-format">&dollar;index&lowbar;format</link> to
<emphasis>mailbox</emphasis> after it was expanded.
</para>

<para>
See <xref linkend="pattern-hook"/> for information on the exact format of <emphasis>pattern</emphasis>.
</para>

<screen>fcc-hook &lsqb;@.&rsqb;aol&bsol;&bsol;.com&dollar; +spammers</screen>

<para>
...will save a copy of all messages going to the aol.com domain to
the `+spammers' mailbox by default.  Also see the <link linkend="fcc-save-hook">fcc-save-hook</link> command.
</para>

</sect1>

<sect1 id="fcc-save-hook">
<title>Specify default save filename and default Fcc: mailbox at once</title>

<para>Usage:</para>

<cmdsynopsis>
<command>fcc-save-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
This command is a shortcut, equivalent to doing both a <link linkend="fcc-hook">fcc-hook</link>
and a <link linkend="save-hook">save-hook</link> with its arguments,
including &percnt;-expansion on <emphasis>mailbox</emphasis> according
to <link linkend="index-format">&dollar;index&lowbar;format</link>.
</para>

</sect1>

<sect1 id="send-hook">
<title>Change settings based upon message recipients</title>

<anchor id="reply-hook"/>
<anchor id="send2-hook"/>

<para>Usage:</para>

<cmdsynopsis>
<command>reply-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>send-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>send2-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<para>
These commands can be used to execute arbitrary configuration commands based
upon recipients of the message.  <emphasis>pattern</emphasis> is used to match
the message, see <xref linkend="pattern-hook"/> for details. <emphasis>command</emphasis>
is executed when <emphasis>pattern</emphasis> matches.
</para>

<para>
<literal>reply-hook</literal> is matched against the message you are <emphasis>replying to</emphasis>,
instead of the message you are <emphasis>sending</emphasis>.  <literal>send-hook</literal> is
matched against all messages, both <emphasis>new</emphasis>
and <emphasis>replies</emphasis>.
</para>

<note>
<para>
<literal>reply-hook</literal>s are matched <emphasis>before</emphasis> the <literal>send-hook</literal>, <emphasis>regardless</emphasis>
of the order specified in the user's configuration file.
</para>
</note>

<para>
<literal>send2-hook</literal> is matched every time a message is changed, either
by editing it, or by using the compose menu to change its recipients
or subject.  <literal>send2-hook</literal> is executed after <literal>send-hook</literal>, and
can, e.g., be used to set parameters such as the <link linkend="sendmail">&dollar;sendmail</link> variable depending on the message's sender
address.
</para>

<para>
For each type of <literal>send-hook</literal> or <literal>reply-hook</literal>, when multiple matches
occur, commands are executed in the order they are specified in the muttrc
(for that type of hook).
</para>

<para>
Example: <literal>send-hook mutt &quot;set mime&lowbar;forward signature=''&quot;</literal>
</para>

<para>
Another typical use for this command is to change the values of the
<link linkend="attribution">&dollar;attribution</link>, <link linkend="signature">&dollar;signature</link> and <link linkend="locale">&dollar;locale</link>
variables in order to change the language of the attributions and
signatures based upon the recipients.
</para>

<note>
<para>
<literal>send-hook</literal>'s are only executed once after getting the initial
list of recipients.  Adding a recipient after replying or editing the
message will not cause any send-hook to be executed.  Also note that
<link linkend="my-hdr"><literal>my&lowbar;hdr</literal></link> commands which modify recipient headers, or the message's
subject, don't have any effect on the current message when executed
from a <literal>send-hook</literal>.
</para>
</note>

</sect1>

<sect1 id="message-hook">
<title>Change settings before formatting a message</title>

<para>Usage:</para>

<cmdsynopsis>
<command>message-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<para>
This command can be used to execute arbitrary configuration commands
before viewing or formatting a message based upon information about the message.
<emphasis>command</emphasis> is executed if the <emphasis>pattern</emphasis> matches the message to be
displayed. When multiple matches occur, commands are executed in the order
they are specified in the muttrc.
</para>

<para>
See <xref linkend="pattern-hook"/> for
information on the exact format of <emphasis>pattern</emphasis>.
</para>

<para>
Example:
</para>

<screen>
message-hook ~A 'set pager=builtin'
message-hook '~f freshmeat-news' 'set pager="less \"+/^  subject: .*\""'
</screen>

</sect1>

<sect1 id="crypt-hook">
<title>Choosing the cryptographic key of the recipient</title>

<para>Usage:</para>

<cmdsynopsis>
<command>crypt-hook</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">keyid</replaceable>
</arg>
</cmdsynopsis>

<para>
When encrypting messages with PGP/GnuPG or OpenSSL, you may want to associate a certain
key with a given e-mail address automatically, either because the
recipient's public key can't be deduced from the destination address,
or because, for some reasons, you need to override the key Mutt would
normally use.  The <literal>crypt-hook</literal> command provides a
method by which you can specify the ID of the public key to be used
when encrypting messages to a certain recipient.
</para>

<para>
The meaning of <emphasis>keyid</emphasis> is to be taken broadly in this context:  You
can either put a numerical key ID here, an e-mail address, or even
just a real name.
</para>

</sect1>

<sect1 id="push">
<title>Adding key sequences to the keyboard buffer</title>

<para>Usage:</para>

<cmdsynopsis>
<command>push</command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>
</cmdsynopsis>

<para>
This command adds the named string to the keyboard buffer. The string may
contain control characters, key names and function names like the sequence
string in the <link linkend="macro">macro</link> command. You may use it to
automatically run a sequence of commands at startup, or when entering
certain folders. For example, <xref linkend="ex-folder-hook-push"/>
shows how to automatically collapse all threads when entering a folder.
</para>

<example id="ex-folder-hook-push">
<title>Embedding <literal>push</literal> in <literal>folder-hook</literal></title>
<screen>
folder-hook . 'push &lt;collapse-all&gt;'
</screen>
</example>

</sect1>

<sect1 id="exec">
<title>Executing functions</title>

<para>Usage:</para>

<cmdsynopsis>
<command>exec</command>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>

<para>
This command can be used to execute any function. Functions are
listed in the <link linkend="functions">function reference</link>.
<quote><literal>exec function</literal></quote> is equivalent to
<quote><literal>push &lt;function&gt;</literal></quote>.
</para>

</sect1>

<sect1 id="score-command">
<title>Message Scoring</title>

<para>Usage:</para>

<cmdsynopsis>
<command>score</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">value</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unscore</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
The <literal>score</literal> commands adds <emphasis>value</emphasis> to a message's score if <emphasis>pattern</emphasis>
matches it.  <emphasis>pattern</emphasis> is a string in the format described in the <link linkend="patterns">patterns</link> section (note: For efficiency reasons, patterns
which scan information not available in the index, such as <literal>&tilde;b</literal>,
<literal>&tilde;B</literal> or <literal>&tilde;h</literal>, may not be used).  <emphasis>value</emphasis> is a
positive or negative integer.  A message's final score is the sum total of all
matching <literal>score</literal> entries.  However, you may optionally prefix <emphasis>value</emphasis> with
an equal sign (=) to cause evaluation to stop at a particular entry if there is
a match.  Negative final scores are rounded up to 0.
</para>

<para>
The <literal>unscore</literal> command removes score entries from the list.  You <emphasis>must</emphasis>
specify the same pattern specified in the <literal>score</literal> command for it to be
removed.  The pattern <quote>*</quote> is a special token which means to clear the list
of all score entries.
</para>

</sect1>

<sect1 id="spam">
<title>Spam detection</title>

<para>Usage:</para>

<cmdsynopsis>
<command>spam</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">format</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>nospam</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
Mutt has generalized support for external spam-scoring filters.
By defining your spam patterns with the <literal>spam</literal> and <literal>nospam</literal>
commands, you can <emphasis>limit</emphasis>, <emphasis>search</emphasis>, and <emphasis>sort</emphasis> your
mail based on its spam attributes, as determined by the external
filter. You also can display the spam attributes in your index
display using the <literal>&percnt;H</literal> selector in the <link linkend="index-format">&dollar;index&lowbar;format</link> variable. (Tip: try <literal>&percnt;?H?[&percnt;H] ?</literal>
to display spam tags only when they are defined for a given message.)
</para>

<para>
Your first step is to define your external filter's spam patterns using
the <literal>spam</literal> command. <emphasis>pattern</emphasis> should be a regular expression
that matches a header in a mail message. If any message in the mailbox
matches this regular expression, it will receive a <quote>spam tag</quote> or
<quote>spam attribute</quote> (unless it also matches a <literal>nospam</literal> pattern -- see
below.) The appearance of this attribute is entirely up to you, and is
governed by the <emphasis>format</emphasis> parameter. <emphasis>format</emphasis> can be any static
text, but it also can include back-references from the <emphasis>pattern</emphasis>
expression. (A regular expression <quote>back-reference</quote> refers to a
sub-expression contained within parentheses.) <literal>&percnt;1</literal> is replaced with
the first back-reference in the regex, <literal>&percnt;2</literal> with the second, etc.
</para>

<para>
If you're using multiple spam filters, a message can have more than
one spam-related header. You can define <literal>spam</literal> patterns for each
filter you use. If a message matches two or more of these patterns, and
the <link linkend="spam-separator">&dollar;spam&lowbar;separator</link> variable is set to a string, then the
message's spam tag will consist of all the <emphasis>format</emphasis> strings joined
together, with the value of <link linkend="spam-separator">&dollar;spam&lowbar;separator</link> separating
them.
</para>

<para>
For example, suppose one uses DCC, SpamAssassin, and PureMessage, then
the configuration might look like in <xref linkend="ex-spam"/>.
</para>

<example id="ex-spam">
<title>Configuring spam detection</title>
<screen>
spam "X-DCC-.*-Metrics:.*(....)=many"         "90+/DCC-%1"
spam "X-Spam-Status: Yes"                     "90+/SA"
spam "X-PerlMX-Spam: .*Probability=([0-9]+)%" "%1/PM"
set spam_separator=", "
</screen>
</example>

<para>
If then a message is received that DCC registered with <quote>many</quote> hits
under the <quote>Fuz2</quote> checksum, and that PureMessage registered with a
97&percnt; probability of being spam, that message's spam tag would read
<literal>90+/DCC-Fuz2, 97/PM</literal>. (The four characters before <quote>=many</quote> in a
DCC report indicate the checksum used -- in this case, <quote>Fuz2</quote>.)
</para>

<para>
If the <link linkend="spam-separator">&dollar;spam&lowbar;separator</link> variable is unset, then each
spam pattern match supersedes the previous one. Instead of getting
joined <emphasis>format</emphasis> strings, you'll get only the last one to match.
</para>

<para>
The spam tag is what will be displayed in the index when you use
<literal>&percnt;H</literal> in the <link linkend="index-format">&dollar;index&lowbar;format</link> variable. It's also the
string that the <literal>&tilde;H</literal> pattern-matching expression matches against for
<literal>&lt;search&gt;</literal> and <literal>&lt;limit&gt;</literal> functions. And it's what sorting by spam
attribute will use as a sort key.
</para>

<para>
That's a pretty complicated example, and most people's actual
environments will have only one spam filter. The simpler your
configuration, the more effective mutt can be, especially when it comes
to sorting.
</para>

<para>
Generally, when you sort by spam tag, mutt will sort <emphasis>lexically</emphasis> --
that is, by ordering strings alphanumerically. However, if a spam tag
begins with a number, mutt will sort numerically first, and lexically
only when two numbers are equal in value. (This is like UNIX's
<literal>sort -n</literal>.) A message with no spam attributes at all -- that is, one
that didn't match <emphasis>any</emphasis> of your <literal>spam</literal> patterns -- is sorted at
lowest priority. Numbers are sorted next, beginning with 0 and ranging
upward. Finally, non-numeric strings are sorted, with <quote>a</quote> taking lower
priority than <quote>z</quote>. Clearly, in general, sorting by spam tags is most
effective when you can coerce your filter to give you a raw number. But
in case you can't, mutt can still do something useful.
</para>

<para>
The <literal>nospam</literal> command can be used to write exceptions to <literal>spam</literal>
patterns. If a header pattern matches something in a <literal>spam</literal> command,
but you nonetheless do not want it to receive a spam tag, you can list a
more precise pattern under a <literal>nospam</literal> command.
</para>

<para>
If the <emphasis>pattern</emphasis> given to <literal>nospam</literal> is exactly the same as the
<emphasis>pattern</emphasis> on an existing <literal>spam</literal> list entry, the effect will be to
remove the entry from the spam list, instead of adding an exception.
Likewise, if the <emphasis>pattern</emphasis> for a <literal>spam</literal> command matches an entry
on the <literal>nospam</literal> list, that <literal>nospam</literal> entry will be removed. If the
<emphasis>pattern</emphasis> for <literal>nospam</literal> is <quote>*</quote>, <emphasis>all entries on both lists</emphasis>
will be removed. This might be the default action if you use <literal>spam</literal>
and <literal>nospam</literal> in conjunction with a <literal>folder-hook</literal>.
</para>

<para>
You can have as many <literal>spam</literal> or <literal>nospam</literal> commands as you like.
You can even do your own primitive spam detection within mutt -- for
example, if you consider all mail from <literal>MAILER-DAEMON</literal> to be spam,
you can use a <literal>spam</literal> command like this:
</para>

<screen>
spam "^From: .*MAILER-DAEMON"       "999"
</screen>

</sect1>

<sect1 id="set">
<title>Setting and Querying Variables</title>

<sect2 id="var-types">
<title>Variable types</title>

<para>
Mutt supports these types of configuration variables:
</para>

<variablelist>
<varlistentry>
<term>boolean</term>
<listitem>
<para>
A boolean expression, either <quote>yes</quote> or <quote>no</quote>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>number</term>
<listitem>
<para>
A signed integer number in the range -32768 to 32767.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>string</term>
<listitem>
<para>
Arbitrary text.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>path</term>
<listitem>
<para>
A specialized string for representing paths including support for
mailbox shortcuts (see <xref linkend="shortcuts"/>) as well as tilde
(<quote>&tilde;</quote>) for a user's home directory and more.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>quadoption</term>
<listitem>
<para>
Like a boolean but triggers a prompt when set to <quote>ask-yes</quote>
or <quote>ask-no</quote> with <quote>yes</quote> and <quote>no</quote>
preselected respectively.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>sort order</term>
<listitem>
<para>
A specialized string allowing only particular words as values depending
on the variable.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>regular expression</term>
<listitem>
<para>
A regular expression, see <xref linkend="regexp"/> for an introduction.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>folder magic</term>
<listitem>
<para>
Specifies the type of folder to use: <emphasis>mbox</emphasis>,
<emphasis>mmdf</emphasis>, <emphasis>mh</emphasis>
or <emphasis>maildir</emphasis>.
Currently only used to determine the type for newly created folders.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>e-mail address</term>
<listitem>
<para>
An e-mail address either with or without
realname. The older <quote><literal>user@example.org (Joe User)</literal></quote>
form is supported but strongly deprecated.
</para>
</listitem>
</varlistentry>
</variablelist>

</sect2>

<sect2 id="set-commands">
<title>Commands</title>

<para>
The following commands are available to manipulate and query variables:
</para>

<para>Usage:</para>

<cmdsynopsis>
<command>set</command>
<group choice="req">
<arg choice="plain">
<group choice="opt">
<arg choice="plain"><option>no</option></arg>
<arg choice="plain"><option>inv</option></arg>
</group>
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">variable=value</replaceable>
</arg>
</group>
<arg choice="opt" rep="repeat"/>
</cmdsynopsis>

<cmdsynopsis>
<command>toggle</command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unset</command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>reset</command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>

<para>
This command is used to set (and unset) <link linkend="variables">configuration variables</link>.  There are four basic types of variables:
boolean, number, string and quadoption.  <emphasis>boolean</emphasis> variables can be
<emphasis>set</emphasis> (true) or <emphasis>unset</emphasis> (false).  <emphasis>number</emphasis> variables can be
assigned a positive integer value.
<emphasis>string</emphasis> variables consist of any number of printable characters and
must be enclosed in quotes if they contain spaces or tabs.  You
may also use the escape sequences <quote>&bsol;n</quote> and <quote>&bsol;t</quote> for newline and tab, respectively.
<emphasis>quadoption</emphasis> variables are used to control whether or not to be prompted
for certain actions, or to specify a default action.  A value of <emphasis>yes</emphasis>
will cause the action to be carried out automatically as if you had answered
yes to the question.  Similarly, a value of <emphasis>no</emphasis> will cause the
action to be carried out as if you had answered <quote>no.</quote>  A value of
<emphasis>ask-yes</emphasis> will cause a prompt with a default answer of <quote>yes</quote> and
<emphasis>ask-no</emphasis> will provide a default answer of <quote>no.</quote>
</para>

<para>
Prefixing a variable with <quote>no</quote> will unset it.  Example: <literal>set noaskbcc</literal>.
</para>

<para>
For <emphasis>boolean</emphasis> variables, you may optionally prefix the variable name with
<literal>inv</literal> to toggle the value (on or off).  This is useful when writing
macros.  Example: <literal>set invsmart&lowbar;wrap</literal>.
</para>

<para>
The <literal>toggle</literal> command automatically prepends the <literal>inv</literal> prefix to all
specified variables.
</para>

<para>
The <literal>unset</literal> command automatically prepends the <literal>no</literal> prefix to all
specified variables.
</para>

<para>
Using the <literal>&lt;enter-command&gt;</literal> function in the <emphasis>index</emphasis> menu, you can query the
value of a variable by prefixing the name of the variable with a question
mark:
</para>

<screen>
set ?allow_8bit
</screen>

<para>
The question mark is actually only required for boolean and quadoption
variables.
</para>

<para>
The <literal>reset</literal> command resets all given variables to the compile time
defaults (hopefully mentioned in this manual). If you use the command
<literal>set</literal> and prefix the variable with <quote>&amp;</quote> this has the same
behavior as the reset command.
</para>

<para>
With the <literal>reset</literal> command there exists the special variable <quote>all</quote>,
which allows you to reset all variables to their system defaults.
</para>

</sect2>

<sect2 id="set-myvar">
<title>User-defined variables</title>

<sect3 id="set-myvar-intro">
<title>Introduction</title>

<para>
Along with the variables listed in the
<link linkend="variables">Configuration variables</link> section, mutt
supports user-defined variables with names starting
with <literal>my&lowbar;</literal> as in, for
example, <literal>my&lowbar;cfgdir</literal>.
</para>

<para>
The <literal>set</literal> command either creates a
custom <literal>my&lowbar;</literal> variable or changes its
value if it does exist already. The <literal>unset</literal> and <literal>reset</literal>
commands remove the variable entirely.
</para>

<para>
Since user-defined variables are expanded in the same way that
environment variables are (except for
the <link linkend="shell-escape">shell-escape</link> command and
backtick expansion), this feature can be used to make configuration
files more readable.
</para>

</sect3>

<sect3 id="set-myvar-examples">
<title>Examples</title>

<para>
The following example defines and uses the variable <literal>my&lowbar;cfgdir</literal>
to abbreviate the calls of the <link linkend="source">source</link> command:
</para>

<example id="ex-myvar1">
<title>Using user-defined variables for config file readability</title>
<screen>
set my_cfgdir = $HOME/mutt/config

source $my_cfgdir/hooks
source $my_cfgdir/macros
# more source commands...
</screen>
</example>

<para>
A custom variable can also be used in macros to backup the current value
of another variable. In the following example, the value of the
<link linkend="delete">&dollar;delete</link> is changed temporarily
while its original value is saved as <literal>my&lowbar;delete</literal>.
After the macro has executed all commands, the original value of <link
linkend="delete">&dollar;delete</link> is restored.
</para>

<example id="ex-myvar2">
<title>Using user-defined variables for backing up other config option values</title>
<screen>
macro pager ,x '&bsol;
&lt;enter-command&gt;set my_delete=$delete&lt;enter&gt;&bsol;
&lt;enter-command&gt;set delete=yes&lt;enter&gt;&bsol;
...&bsol;
&lt;enter-command&gt;set delete=$my_delete&lt;enter&gt;'
</screen>
</example>

<para>
Since mutt expands such values already when parsing the configuration
file(s), the value of <literal>&dollar;my&lowbar;delete</literal> in the
last example would be the value of <link linkend="delete">&dollar;delete</link> exactly
as it was at that point during parsing the configuration file. If
another statement would change the value for <link linkend="delete">&dollar;delete</link>
later in the same or another file, it would have no effect on
<literal>&dollar;my&lowbar;delete</literal>. However, the expansion can
be deferred to runtime, as shown in the next example, when escaping the
dollar sign.
</para>

<example id="ex-myvar3">
<title>Deferring user-defined variable expansion to runtime</title>
<screen>
macro pager &lt;PageDown&gt; "&bsol;
&lt;enter-command&gt; set my&lowbar;old&lowbar;pager&lowbar;stop=&bsol;&dollar;pager&lowbar;stop pager&lowbar;stop&lt;Enter&gt;&bsol;
&lt;next-page&gt;&bsol;
&lt;enter-command&gt; set pager&lowbar;stop=&bsol;&dollar;my&lowbar;old&lowbar;pager&lowbar;stop&lt;Enter&gt;&bsol;
&lt;enter-command&gt; unset my&lowbar;old&lowbar;pager&lowbar;stop&lt;Enter&gt;"
</screen>
</example>

<para>
Note that there is a space
between <literal>&lt;enter-command&gt;</literal> and
the <literal>set</literal> configuration command, preventing mutt from
recording the macro's commands into its history.
</para>

</sect3>

</sect2>

</sect1>

<sect1 id="source">
<title>Reading initialization commands from another file</title>

<para>Usage:</para>

<cmdsynopsis>
<command>source</command>
<arg choice="plain">
<replaceable class="parameter">filename</replaceable>
</arg>
</cmdsynopsis>

<para>
This command allows the inclusion of initialization commands
from other files.  For example, I place all of my aliases in
<literal>&tilde;/.mail&lowbar;aliases</literal> so that I can make my
<literal>&tilde;/.muttrc</literal> readable and keep my aliases private.
</para>

<para>
If the filename begins with a tilde (<quote>&tilde;</quote>), it will be expanded to the
path of your home directory.
</para>

<para>
If the filename ends with a vertical bar (&verbar;), then <emphasis>filename</emphasis> is
considered to be an executable program from which to read input (eg.
<literal>source &tilde;/bin/myscript&verbar;</literal>).
</para>

</sect1>

<sect1 id="unhook">
<title>Removing hooks</title>

<para>Usage:</para>

<cmdsynopsis>
<command>unhook</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">hook-type</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
This command permits you to flush hooks you have previously defined.
You can either remove all hooks by giving the <quote>*</quote> character as an
argument, or you can remove all hooks of a specific type by saying
something like <literal>unhook send-hook</literal>.
</para>

</sect1>

<sect1 id="formatstrings">
<title>Format Strings</title>

<sect2 id="formatstrings-basics">
<title>Basic usage</title>

<para>
Format strings are a general concept you'll find in several locations
through the mutt configuration, especially in the
<link linkend="index-format">&dollar;index&lowbar;format</link>,
<link linkend="pager-format">&dollar;pager&lowbar;format</link>,
<link linkend="status-format">&dollar;status&lowbar;format</link>,
and other related variables. These can be very straightforward,
and it's quite possible you already know how to use them.
</para>

<para>
The most basic format string element is a percent symbol followed
by another character. For example, <literal>%s</literal>
represents a message's Subject: header in the <link
linkend="index-format">&dollar;index&lowbar;format</link> variable. The
<quote>expandos</quote> available are documented with each format variable, but
there are general modifiers available with all formatting expandos,
too. Those are our concern here.
</para>

<para>
Some of the modifiers are borrowed right out of C (though you might
know them from Perl, Python, shell, or another language). These are
the <literal>&lsqb;-&rsqb;m.n</literal> modifiers, as in <literal>%-12.12s</literal>. As with
such programming languages, these modifiers allow you to specify the
minimum and maximum size of the resulting string, as well as its
justification. If the <quote>-</quote> sign follows the percent, the string will
be left-justified instead of right-justified. If there's a number
immediately following that, it's the minimum amount of space the
formatted string will occupy -- if it's naturally smaller than that, it
will be padded out with spaces.  If a decimal point and another number
follow, that's the maximum space allowable -- the string will not be
permitted to exceed that width, no matter its natural size. Each of
these three elements is optional, so that all these are legal format
strings: <literal>%-12s</literal>, <literal>%4c</literal>,
<literal>%.15F</literal> and <literal>%-12.15L</literal>.
</para>

<para>
Mutt adds some other modifiers to format strings. If you use an equals
symbol (<literal>=</literal>) as a numeric prefix (like the minus
above), it will force the string to be centered within its minimum
space range. For example, <literal>%=14y</literal> will reserve 14
characters for the %y expansion -- that's the X-Label: header, in
<link linkend="index-format">&dollar;index&lowbar;format</link>. If the expansion
results in a string less than 14 characters, it will be centered in a
14-character space.  If the X-Label for a message were <quote>test</quote>, that
expansion would look like <quote>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</quote>.
</para>

<para>
There are two very little-known modifiers that affect the way that an
expando is replaced. If there is an underline (<quote>&lowbar;</quote>) character
between any format modifiers (as above) and the expando letter, it will
expands in all lower case. And if you use a colon (<quote>:</quote>), it will
replace all decimal points with underlines.
</para>

</sect2>

<sect2 id="formatstrings-conditionals">
<title>Conditionals</title>

<para>
Depending on the format string variable, some of its sequences can be
used to optionally print a string if their value is nonzero. For
example, you may only want to see the number of flagged messages if such
messages exist, since zero is not particularly meaningful. To optionally
print a string based upon one of the above sequences, the following
construct is used:
</para>

<screen>
&percnt;?&lt;sequence_char&gt;?&lt;optional_string&gt;?</screen>

<para>
where <emphasis>sequence_char</emphasis> is an expando, and
<emphasis>optional_string</emphasis> is the string you would like printed if
<emphasis>sequence_char</emphasis> is nonzero.
<emphasis>optional_string</emphasis> may contain other
sequences as well as normal text, but you may not nest optional
strings.
</para>

<para>
Here is an example illustrating how to optionally print the number of
new messages in a mailbox in
<link linkend="status-format">&dollar;status&lowbar;format</link>:
</para>

<screen>
&percnt;?n?&percnt;n new messages.?</screen>

<para>
You can also switch between two strings using the following construct:
</para>

<screen>
&percnt;?&lt;sequence_char&gt;?&lt;if_string&gt;&amp;&lt;else_string&gt;?</screen>

<para>
If the value of <emphasis>sequence_char</emphasis> is
non-zero, <emphasis>if_string</emphasis> will be expanded,
otherwise <emphasis>else_string</emphasis> will be expanded.
</para>

</sect2>

<sect2 id="formatstrings-filters">
<title>Filters</title>

<para>
Any format string ending in a vertical bar (<quote>&verbar;</quote>) will be
expanded and piped through the first word in the string, using spaces
as separator. The string returned will be used for display.
If the returned string ends in &percnt;, it will be passed through
the formatter a second time. This allows the filter to generate a
replacement format string including &percnt; expandos.
</para>

<para>
All &percnt; expandos in a format string are expanded before the script
is called so that:
</para>

<example id="ex-fmtpipe">
<title>Using external filters in format strings</title>
<screen>
set status_format="script.sh '%r %f (%L)'|"
</screen>
</example>

<para>
will make mutt expand <literal>&percnt;r</literal>,
<literal>&percnt;f</literal> and <literal>&percnt;L</literal>
before calling the script. The example also shows that arguments can be
quoted: the script will receive the expanded string between the single quotes
as the only argument.
</para>

<para>
A practical example is the <literal>mutt&lowbar;xtitle</literal>
script installed in the <literal>samples</literal>
subdirectory of the mutt documentation: it can be used as filter for
<literal>&dollar;status&lowbar;format</literal> to set the current
terminal's title, if supported.
</para>

</sect2>

</sect1>

</chapter>

<chapter id="advancedusage">
<title>Advanced Usage</title>

<sect1 id="regexp">
<title>Regular Expressions</title>

<para>
All string patterns in Mutt including those in more complex
<link linkend="patterns">patterns</link> must be specified
using regular expressions (regexp) in the <quote>POSIX extended</quote> syntax (which
is more or less the syntax used by egrep and GNU awk).  For your
convenience, we have included below a brief description of this syntax.
</para>

<para>
The search is case sensitive if the pattern contains at least one upper
case letter, and case insensitive otherwise.
</para>

<note>
<para>
<quote>&bsol;</quote>
must be quoted if used for a regular expression in an initialization
command: <quote>&bsol;&bsol;</quote>.
</para>
</note>

<para>
A regular expression is a pattern that describes a set of strings.
Regular expressions are constructed analogously to arithmetic
expressions, by using various operators to combine smaller expressions.
</para>

<note>
<para>
The regular expression can be enclosed/delimited by either &quot;
or ' which is useful if the regular expression includes a white-space
character.  See <xref linkend="muttrc-syntax"/>
for more information on &quot; and ' delimiter processing.  To match a
literal &quot; or ' you must preface it with \ (backslash).
</para>
</note>

<para>
The fundamental building blocks are the regular expressions that match
a single character.  Most characters, including all letters and digits,
are regular expressions that match themselves.  Any metacharacter with
special meaning may be quoted by preceding it with a backslash.
</para>

<para>
The period <quote>.</quote> matches any single character.  The caret <quote>&circ;</quote> and
the dollar sign <quote>&dollar;</quote> are metacharacters that respectively match
the empty string at the beginning and end of a line.
</para>

<para>
A list of characters enclosed by <quote>&lsqb;</quote> and <quote>&rsqb;</quote> matches any
single character in that list; if the first character of the list
is a caret <quote>&circ;</quote> then it matches any character <emphasis>not</emphasis> in the
list.  For example, the regular expression <emphasis>&lsqb;0123456789&rsqb;</emphasis>
matches any single digit.  A range of ASCII characters may be specified
by giving the first and last characters, separated by a hyphen
<quote>-</quote>.  Most metacharacters lose their special meaning inside
lists.  To include a literal <quote>&rsqb;</quote> place it first in the list.
Similarly, to include a literal <quote>&circ;</quote> place it anywhere but first.
Finally, to include a literal hyphen <quote>-</quote> place it last.
</para>

<para>
Certain named classes of characters are predefined.  Character classes
consist of <quote>&lsqb;:</quote>, a keyword denoting the class, and <quote>:&rsqb;</quote>.
The following classes are defined by the POSIX standard in
<xref linkend="posix-regex-char-classes"/>
</para>

<table id="posix-regex-char-classes">
<title>POSIX regular expression character classes</title>
<tgroup cols="2">
<thead>
<row><entry>Character class</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>&lsqb;:alnum:&rsqb;</entry><entry>Alphanumeric characters</entry></row>
<row><entry>&lsqb;:alpha:&rsqb;</entry><entry>Alphabetic characters</entry></row>
<row><entry>&lsqb;:blank:&rsqb;</entry><entry>Space or tab characters</entry></row>
<row><entry>&lsqb;:cntrl:&rsqb;</entry><entry>Control characters</entry></row>
<row><entry>&lsqb;:digit:&rsqb;</entry><entry>Numeric characters</entry></row>
<row><entry>&lsqb;:graph:&rsqb;</entry><entry>Characters that are both printable and visible. (A space is printable, but not visible, while an <quote>a</quote> is both)</entry></row>
<row><entry>&lsqb;:lower:&rsqb;</entry><entry>Lower-case alphabetic characters</entry></row>
<row><entry>&lsqb;:print:&rsqb;</entry><entry>Printable characters (characters that are not control characters)</entry></row>
<row><entry>&lsqb;:punct:&rsqb;</entry><entry>Punctuation characters (characters that are not letter, digits, control characters, or space characters)</entry></row>
<row><entry>&lsqb;:space:&rsqb;</entry><entry>Space characters (such as space, tab and formfeed, to name a few)</entry></row>
<row><entry>&lsqb;:upper:&rsqb;</entry><entry>Upper-case alphabetic characters</entry></row>
<row><entry>&lsqb;:xdigit:&rsqb;</entry><entry>Characters that are hexadecimal digits</entry></row>
</tbody>
</tgroup>
</table>

<para>
A character class is only valid in a regular expression inside the
brackets of a character list.
</para>

<note>
<para>
Note that the brackets in these
class names are part of the symbolic names, and must be included
in addition to the brackets delimiting the bracket list. For
example, <emphasis>&lsqb;&lsqb;:digit:&rsqb;&rsqb;</emphasis> is equivalent to
<emphasis>&lsqb;0-9&rsqb;</emphasis>.
</para>
</note>

<para>
Two additional special sequences can appear in character lists.  These
apply to non-ASCII character sets, which can have single symbols (called
collating elements) that are represented with more than one character,
as well as several characters that are equivalent for collating or
sorting purposes:
</para>

<variablelist>

<varlistentry>
<term>Collating Symbols</term>
<listitem>
<para>
A collating symbol is a multi-character collating element enclosed in
<quote>&lsqb;.</quote> and <quote>.&rsqb;</quote>.  For example, if <quote>ch</quote> is a collating
element, then <emphasis>&lsqb;&lsqb;.ch.&rsqb;&rsqb;</emphasis> is a regexp that matches
this collating element, while <emphasis>&lsqb;ch&rsqb;</emphasis> is a regexp that
matches either <quote>c</quote> or <quote>h</quote>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Equivalence Classes</term>
<listitem>
<para>
An equivalence class is a locale-specific name for a list of
characters that are equivalent. The name is enclosed in <quote>&lsqb;=</quote>
and <quote>=&rsqb;</quote>.  For example, the name <quote>e</quote> might be used to
represent all of <quote>&egrave;</quote> <quote>&eacute;</quote> and <quote>e</quote>.  In this case,
<emphasis>&lsqb;&lsqb;=e=&rsqb;&rsqb;</emphasis> is a regexp that matches any of
<quote>&egrave;</quote>, <quote>&eacute;</quote> and <quote>e</quote>.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
A regular expression matching a single character may be followed by one
of several repetition operators described in <xref linkend="regex-repeat"/>.
</para>

<table id="regex-repeat">
<title>Regular expression repetition operators</title>
<tgroup cols="2">
<thead>
<row><entry>Operator</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>?</entry><entry>The preceding item is optional and matched at most once</entry></row>
<row><entry>*</entry><entry>The preceding item will be matched zero or more times</entry></row>
<row><entry>+</entry><entry>The preceding item will be matched one or more times</entry></row>
<row><entry>&lcub;n&rcub;</entry><entry>The preceding item is matched exactly <emphasis>n</emphasis> times</entry></row>
<row><entry>&lcub;n,&rcub;</entry><entry>The preceding item is matched <emphasis>n</emphasis> or more times</entry></row>
<row><entry>&lcub;,m&rcub;</entry><entry>The preceding item is matched at most <emphasis>m</emphasis> times</entry></row>
<row><entry>&lcub;n,m&rcub;</entry><entry>The preceding item is matched at least <emphasis>n</emphasis> times, but no more than <emphasis>m</emphasis> times</entry></row>
</tbody>
</tgroup>
</table>

<para>
Two regular expressions may be concatenated; the resulting regular
expression matches any string formed by concatenating two substrings
that respectively match the concatenated subexpressions.
</para>

<para>
Two regular expressions may be joined by the infix operator <quote>&verbar;</quote>;
the resulting regular expression matches any string matching either
subexpression.
</para>

<para>
Repetition takes precedence over concatenation, which in turn takes
precedence over alternation.  A whole subexpression may be enclosed in
parentheses to override these precedence rules.
</para>

<note>
<para>
If you compile Mutt with the GNU <emphasis>rx</emphasis> package, the
following operators may also be used in regular expressions as described in <xref linkend="regex-gnu-ext"/>.
</para>
</note>

<table id="regex-gnu-ext">
<title>GNU regular expression extensions</title>
<tgroup cols="2">
<thead>
<row><entry>Expression</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>&bsol;&bsol;y</entry><entry>Matches the empty string at either the beginning or the end of a word</entry></row>
<row><entry>&bsol;&bsol;B</entry><entry>Matches the empty string within a word</entry></row>
<row><entry>&bsol;&bsol;&lt;</entry><entry>Matches the empty string at the beginning of a word</entry></row>
<row><entry>&bsol;&bsol;&gt;</entry><entry>Matches the empty string at the end of a word</entry></row>
<row><entry>&bsol;&bsol;w</entry><entry>Matches any word-constituent character (letter, digit, or underscore)</entry></row>
<row><entry>&bsol;&bsol;W</entry><entry>Matches any character that is not word-constituent</entry></row>
<row><entry>&bsol;&bsol;`</entry><entry>Matches the empty string at the beginning of a buffer (string)</entry></row>
<row><entry>&bsol;&bsol;'</entry><entry>Matches the empty string at the end of a buffer</entry></row>
</tbody>
</tgroup>
</table>

<para>
Please note however that these operators are not defined by POSIX, so
they may or may not be available in stock libraries on various systems.
</para>

</sect1>

<sect1 id="patterns">
<title>Patterns: Searching, Limiting and Tagging</title>

<sect2 id="patterns-modifier">
<title>Pattern Modifier</title>

<para>
Many of Mutt's commands allow you to specify a pattern to match
(<literal>limit</literal>, <literal>tag-pattern</literal>,
<literal>delete-pattern</literal>, etc.). <xref linkend="tab-patterns"/>
shows several ways to select messages.
</para>

<table id="tab-patterns">
<title>Pattern modifiers</title>
<tgroup cols="2">
<thead>
<row><entry>Pattern modifier</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>~A</entry><entry>all messages</entry></row>
<row><entry>~b <emphasis>EXPR</emphasis></entry><entry>messages which contain <emphasis>EXPR</emphasis> in the message body</entry></row>
<row><entry>=b <emphasis>STRING</emphasis></entry><entry>messages which contain <emphasis>STRING</emphasis> in the message body. If IMAP is enabled, searches for <emphasis>STRING</emphasis> on the server, rather than downloading each message and searching it locally.</entry></row>
<row><entry>~B <emphasis>EXPR</emphasis></entry><entry>messages which contain <emphasis>EXPR</emphasis> in the whole message</entry></row>
<row><entry>~c <emphasis>EXPR</emphasis></entry><entry>messages carbon-copied to <emphasis>EXPR</emphasis></entry></row>
<row><entry>%c <emphasis>GROUP</emphasis></entry><entry>messages carbon-copied to any member of <emphasis>GROUP</emphasis></entry></row>
<row><entry>~C <emphasis>EXPR</emphasis></entry><entry>messages either to: or cc: <emphasis>EXPR</emphasis></entry></row>
<row><entry>%C <emphasis>GROUP</emphasis></entry><entry>messages either to: or cc: to any member of <emphasis>GROUP</emphasis></entry></row>
<row><entry>~d &lsqb;<emphasis>MIN</emphasis>&rsqb;-&lsqb;<emphasis>MAX</emphasis>&rsqb;</entry><entry>messages with <quote>date-sent</quote> in a Date range</entry></row>
<row><entry>~D</entry><entry>deleted messages</entry></row>
<row><entry>~e <emphasis>EXPR</emphasis></entry><entry>messages which contains <emphasis>EXPR</emphasis> in the <quote>Sender</quote> field</entry></row>
<row><entry>%e <emphasis>GROUP</emphasis></entry><entry>messages which contain a member of <emphasis>GROUP</emphasis> in the <quote>Sender</quote> field</entry></row>
<row><entry>~E</entry><entry>expired messages</entry></row>
<row><entry>~F</entry><entry>flagged messages</entry></row>
<row><entry>~f <emphasis>EXPR</emphasis></entry><entry>messages originating from <emphasis>EXPR</emphasis></entry></row>
<row><entry>%f <emphasis>GROUP</emphasis></entry><entry>messages originating from any member of <emphasis>GROUP</emphasis></entry></row>
<row><entry>~g</entry><entry>cryptographically signed messages</entry></row>
<row><entry>~G</entry><entry>cryptographically encrypted messages</entry></row>
<row><entry>~h <emphasis>EXPR</emphasis></entry><entry>messages which contain <emphasis>EXPR</emphasis> in the message header</entry></row>
<row><entry>~H <emphasis>EXPR</emphasis></entry><entry>messages with a spam attribute matching <emphasis>EXPR</emphasis></entry></row>
<row><entry>~i <emphasis>EXPR</emphasis></entry><entry>messages which match <emphasis>EXPR</emphasis> in the <quote>Message-ID</quote> field</entry></row>
<row><entry>~k</entry><entry>messages which contain PGP key material</entry></row>
<row><entry>~L <emphasis>EXPR</emphasis></entry><entry>messages either originated or received by <emphasis>EXPR</emphasis></entry></row>
<row><entry>%L <emphasis>GROUP</emphasis></entry><entry>message either originated or received by any member of <emphasis>GROUP</emphasis></entry></row>
<row><entry>~l</entry><entry>messages addressed to a known mailing list</entry></row>
<row><entry>~m &lsqb;<emphasis>MIN</emphasis>&rsqb;-&lsqb;<emphasis>MAX</emphasis>&rsqb;</entry><entry>messages in the range <emphasis>MIN</emphasis> to <emphasis>MAX</emphasis> *)</entry></row>
<row><entry>~n &lsqb;<emphasis>MIN</emphasis>&rsqb;-&lsqb;<emphasis>MAX</emphasis>&rsqb;</entry><entry>messages with a score in the range <emphasis>MIN</emphasis> to <emphasis>MAX</emphasis> *)</entry></row>
<row><entry>~N</entry><entry>new messages</entry></row>
<row><entry>~O</entry><entry>old messages</entry></row>
<row><entry>~p</entry><entry>messages addressed to you (consults alternates)</entry></row>
<row><entry>~P</entry><entry>messages from you (consults alternates)</entry></row>
<row><entry>~Q</entry><entry>messages which have been replied to</entry></row>
<row><entry>~r &lsqb;<emphasis>MIN</emphasis>&rsqb;-&lsqb;<emphasis>MAX</emphasis>&rsqb;</entry><entry>messages with <quote>date-received</quote> in a Date range</entry></row>
<row><entry>~R</entry><entry>read messages</entry></row>
<row><entry>~s <emphasis>EXPR</emphasis></entry><entry>messages having <emphasis>EXPR</emphasis> in the <quote>Subject</quote> field.</entry></row>
<row><entry>~S</entry><entry>superseded messages</entry></row>
<row><entry>~t <emphasis>EXPR</emphasis></entry><entry>messages addressed to <emphasis>EXPR</emphasis></entry></row>
<row><entry>~T</entry><entry>tagged messages</entry></row>
<row><entry>~u</entry><entry>messages addressed to a subscribed mailing list</entry></row>
<row><entry>~U</entry><entry>unread messages</entry></row>
<row><entry>~v</entry><entry>messages part of a collapsed thread.</entry></row>
<row><entry>~V</entry><entry>cryptographically verified messages</entry></row>
<row><entry>~x <emphasis>EXPR</emphasis></entry><entry>messages which contain <emphasis>EXPR</emphasis> in the <quote>References</quote> field</entry></row>
<row><entry>~X &lsqb;<emphasis>MIN</emphasis>&rsqb;-&lsqb;<emphasis>MAX</emphasis>&rsqb;</entry><entry>messages with <emphasis>MIN</emphasis> to <emphasis>MAX</emphasis> attachments *)</entry></row>
<row><entry>~y <emphasis>EXPR</emphasis></entry><entry>messages which contain <emphasis>EXPR</emphasis> in the <quote>X-Label</quote> field</entry></row>
<row><entry>~z &lsqb;<emphasis>MIN</emphasis>&rsqb;-&lsqb;<emphasis>MAX</emphasis>&rsqb;</entry><entry>messages with a size in the range <emphasis>MIN</emphasis> to <emphasis>MAX</emphasis> *) **)</entry></row>
<row><entry>~=</entry><entry>duplicated messages (see <link linkend="duplicate-threads">&dollar;duplicate&lowbar;threads</link>)</entry></row>
<row><entry>~$</entry><entry>unreferenced messages (requires threaded view)</entry></row>
<row><entry>~(<emphasis>PATTERN</emphasis>)</entry><entry>messages in threads
containing messages matching <emphasis>PATTERN</emphasis>, e.g. all
threads containing messages from you: ~(~P)</entry></row>
</tbody>
</tgroup>
</table>

<para>
Where <emphasis>EXPR</emphasis> is a
<link linkend="regexp">regular expression</link>. 
</para>

<para>
*) The forms <quote>&lt;&lsqb;<emphasis>MAX</emphasis>&rsqb;</quote>, <quote>&gt;&lsqb;<emphasis>MIN</emphasis>&rsqb;</quote>,
<quote>&lsqb;<emphasis>MIN</emphasis>&rsqb;-</quote> and <quote>-&lsqb;<emphasis>MAX</emphasis>&rsqb;</quote>
are allowed, too.
</para>

<para>
**) The suffixes <quote>K</quote> and <quote>M</quote> are allowed to specify kilobyte and megabyte respectively.
</para>

<para>
Special attention has to be
payed when using regular expressions inside of patterns.  Specifically,
Mutt's parser for these patterns will strip one level of backslash (<quote>\</quote>),
which is normally used for quoting.  If it is your intention to use a
backslash in the regular expression, you will need to use two backslashes
instead (<quote>\\</quote>). You can force mutt to treat <emphasis>EXPR</emphasis> as a simple string
instead of a regular expression by using = instead of &tilde; in the
pattern name. For example, <literal>=b *.*</literal> will find all messages that contain
the literal string <quote>*.*</quote>. Simple string matches are less powerful than
regular expressions but can be considerably faster. This is especially
true for IMAP folders, because string matches can be performed on the
server instead of by fetching every message. IMAP treats <literal>=h</literal> specially:
it must be of the form <quote>header: substring</quote> and will not partially
match header names. The substring part may be omitted if you simply
wish to find messages containing a particular header without regard to
its value.
</para>

<para>
Patterns matching lists of addresses (notably c, C, p, P and t)
match if there is at least one match in the whole list. If you want to
make sure that all elements of that list match, you need to prefix your
pattern with <quote>&circ;</quote>.
This example matches all mails which only has recipients from Germany.
</para>

<example id="ex-recips">
<title>Matching all addresses in address lists</title>
<screen>
^~C \.de$
</screen>
</example>

</sect2>

<sect2 id="simple-searches">
<title>Simple Searches</title>

<para>
Mutt supports two versions of so called <quote>simple searches</quote>. These are
issued if the query entered for searching, limiting and similar
operations does not seem to contain a valid pattern modifier (i.e. it does not contain
one of these characters: <quote>&tilde;</quote>, <quote>=</quote> or <quote>&percnt;</quote>). If the query is
supposed to contain one of these special characters, they must be escaped
by prepending a backslash (<quote>\</quote>).
</para>

<para>
The first type is by checking whether the query string equals
a keyword case-insensitively from <xref linkend="tab-simplesearch-keywords"/>:
If that is the case, Mutt will use the shown pattern modifier instead.
If a keyword would conflict with your search keyword, you need to turn
it into a regular expression to avoid matching the keyword table. For
example, if you want to find all messages matching <quote>flag</quote>
(using <link linkend="simple-search">&dollar;simple&lowbar;search</link>)
but don't want to match flagged messages, simply search for
<quote><literal>&lsqb;f&rsqb;lag</literal></quote>.
</para>

<table id="tab-simplesearch-keywords">
<title>Simple search keywords</title>
<tgroup cols="2">
<thead>
<row><entry>Keyword</entry><entry>Pattern modifier</entry></row>
</thead>
<tbody>
<row><entry>all</entry><entry>~A</entry></row>
<row><entry>.</entry><entry>~A</entry></row>
<row><entry>&circ;</entry><entry>~A</entry></row>
<row><entry>del</entry><entry>~D</entry></row>
<row><entry>flag</entry><entry>~F</entry></row>
<row><entry>new</entry><entry>~N</entry></row>
<row><entry>old</entry><entry>~O</entry></row>
<row><entry>repl</entry><entry>~Q</entry></row>
<row><entry>read</entry><entry>~R</entry></row>
<row><entry>tag</entry><entry>~T</entry></row>
<row><entry>unread</entry><entry>~U</entry></row>
</tbody>
</tgroup>
</table>

<para>
The second type of simple search is to build a complex search
pattern using <link linkend="simple-search">&dollar;simple&lowbar;search</link>
as a template. Mutt will insert your query properly quoted and search
for the composed complex query.
</para>

</sect2>

<sect2 id="complex-patterns">
<title>Nesting and Boolean Operators</title>

<para>
Logical AND is performed by specifying more than one criterion.  For
example:
</para>

<screen>
~t mutt ~f elkins
</screen>

<para>
would select messages which contain the word <quote>mutt</quote> in the list of
recipients <emphasis>and</emphasis> that have the word <quote>elkins</quote> in the <quote>From</quote> header
field.
</para>

<para>
Mutt also recognizes the following operators to create more complex search
patterns:
</para>

<itemizedlist>
<listitem>

<para>
! -- logical NOT operator
</para>
</listitem>
<listitem>

<para>
&verbar; -- logical OR operator
</para>
</listitem>
<listitem>

<para>
() -- logical grouping operator
</para>
</listitem>

</itemizedlist>

<para>
Here is an example illustrating a complex search pattern.  This pattern will
select all messages which do not contain <quote>mutt</quote> in the <quote>To</quote> or <quote>Cc</quote>
field and which are from <quote>elkins</quote>.
</para>

<example id="ex-pattern-bool">
<title>Using boolean operators in patterns</title>
<screen>
!(~t mutt|~c mutt) ~f elkins
</screen>
</example>

<para>
Here is an example using white space in the regular expression (note
the ' and &quot; delimiters).  For this to match, the mail's subject must
match the <quote>&circ;Junk +From +Me$</quote> and it must be from either <quote>Jim +Somebody</quote>
or <quote>Ed +SomeoneElse</quote>:
</para>

<screen>
 '~s "^Junk +From +Me$" ~f ("Jim +Somebody"|"Ed +SomeoneElse")'
</screen>

<note>
<para>
If a regular expression contains parenthesis, or a vertical bar
("&verbar;"), you <emphasis>must</emphasis> enclose the expression in double or single quotes since
those characters are also used to separate different parts of Mutt's
pattern language.  For example: <literal>~f "me@(mutt\.org|cs\.hmc\.edu)"</literal>
Without the quotes, the parenthesis wouldn't end.
This would be separated to two OR'd patterns: <emphasis>&tilde;f me@(mutt\.org</emphasis>
and <emphasis>cs\.hmc\.edu)</emphasis>. They are never what you want.
</para>
</note>

</sect2>

<sect2 id="date-patterns">
<title>Searching by Date</title>

<para>
Mutt supports two types of dates, <emphasis>absolute</emphasis> and <emphasis>relative</emphasis>.
</para>

<sect3 id="date-absolute">
<title>Absolute Dates</title>

<para>
Dates <emphasis>must</emphasis> be in DD/MM/YY format (month and year are
optional, defaulting to the current month and year).  An example of a valid
range of dates is:
</para>

<screen>
Limit to messages matching: ~d 20/1/95-31/10
</screen>

<para>
If you omit the minimum (first) date, and just specify <quote>-DD/MM/YY</quote>, all
messages <emphasis>before</emphasis> the given date will be selected.  If you omit the maximum
(second) date, and specify <quote>DD/MM/YY-</quote>, all messages <emphasis>after</emphasis> the given
date will be selected.  If you specify a single date with no dash (<quote>-</quote>),
only messages sent on the given date will be selected.
</para>

<para>
You can add error margins to absolute dates.
An error margin is a sign (+ or -), followed by a digit, followed by
one of the units in <xref linkend="tab-date-units"/>. As a special case, you can replace the
sign by a <quote>*</quote> character, which is equivalent to giving identical plus and minus error margins.
</para>

<table id="tab-date-units">
<title>Date units</title>
<tgroup cols="2">
<thead>
<row><entry>Unit</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>y</entry><entry>Years</entry></row>
<row><entry>m</entry><entry>Months</entry></row>
<row><entry>w</entry><entry>Weeks</entry></row>
<row><entry>d</entry><entry>Days</entry></row>
</tbody>
</tgroup>
</table>

<para>
Example: To select any messages two weeks around January 15, 2001,
you'd use the following pattern:
</para>

<screen>
Limit to messages matching: ~d 15/1/2001*2w
</screen>

</sect3>

<sect3 id="dates-relative">
<title>Relative Dates</title>

<para>
This type of date is relative to the current date, and may
be specified as:
</para>

<itemizedlist>
<listitem>

<para>
&gt;<emphasis>offset</emphasis> for messages older than <emphasis>offset</emphasis> units
</para>
</listitem>
<listitem>

<para>
&lt;<emphasis>offset</emphasis> for messages newer than <emphasis>offset</emphasis> units
</para>
</listitem>
<listitem>

<para>
=<emphasis>offset</emphasis> for messages exactly <emphasis>offset</emphasis> units old
</para>
</listitem>

</itemizedlist>

<para>
<emphasis>offset</emphasis> is specified as a positive number with one of the units from <xref linkend="tab-date-units"/>.
</para>

<para>
Example: to select messages less than 1 month old, you would use
</para>

<screen>
Limit to messages matching: ~d &lt;1m
</screen>

<note>
<para>
All dates used when searching are relative to the
<emphasis>local</emphasis> time zone, so unless you change the setting of your <link linkend="index-format">&dollar;index&lowbar;format</link> to include a
<literal>&percnt;&lsqb;...&rsqb;</literal> format, these are <emphasis>not</emphasis> the dates shown
in the main index.
</para>
</note>

</sect3>

</sect2>

</sect1>

<sect1 id="tags">
<title>Using Tags</title>

<para>
Sometimes it is desirable to perform an operation on a group of
messages all at once rather than one at a time.  An example might be
to save messages to a mailing list to a separate folder, or to
delete all messages with a given subject.  To tag all messages
matching a pattern, use the <literal>&lt;tag-pattern&gt;</literal> function, which is bound to
<quote>shift-T</quote> by default.  Or you can select individual messages by
hand using the <literal>&lt;tag-message&gt;</literal> function, which is bound to <quote>t</quote> by
default.  See <link linkend="patterns">patterns</link> for Mutt's pattern
matching syntax.
</para>

<para>
Once you have tagged the desired messages, you can use the
<quote>tag-prefix</quote> operator, which is the <quote>;</quote> (semicolon) key by default.
When the <quote>tag-prefix</quote> operator is used, the <emphasis>next</emphasis> operation will
be applied to all tagged messages if that operation can be used in that
manner.  If the <link linkend="auto-tag">&dollar;auto&lowbar;tag</link>
variable is set, the next operation applies to the tagged messages
automatically, without requiring the <quote>tag-prefix</quote>.
</para>

<para>
In <link linkend="macro">macros</link> or <link linkend="push">push</link> commands,
you can use the <literal>&lt;tag-prefix-cond&gt;</literal> operator.  If there are no tagged
messages, mutt will <quote>eat</quote> the rest of the macro to abort it's execution.
Mutt will stop <quote>eating</quote> the macro when it encounters the <literal>&lt;end-cond&gt;</literal>
operator; after this operator the rest of the macro will be executed as
normal.
</para>

</sect1>

<sect1 id="hooks">
<title>Using Hooks</title>

<para>
A <emphasis>hook</emphasis> is a concept found in many other programs which allows you to
execute arbitrary commands before performing some operation.  For example,
you may wish to tailor your configuration based upon which mailbox you are
reading, or to whom you are sending mail.  In the Mutt world, a <emphasis>hook</emphasis>
consists of a <link linkend="regexp">regular expression</link> or
<link linkend="patterns">pattern</link> along with a
configuration option/command.  See:

<itemizedlist>

<listitem>
<para>
<link linkend="account-hook">account-hook</link>
</para>
</listitem>

<listitem>
<para>
<link linkend="charset-hook">charset-hook</link>
</para>
</listitem>

<listitem>
<para>
<link linkend="crypt-hook">crypt-hook</link>
</para>
</listitem>

<listitem>
<para>
<link linkend="fcc-hook">fcc-hook</link>
</para>
</listitem>

<listitem>
<para>
<link linkend="fcc-save-hook">fcc-save-hook</link>
</para>
</listitem>

<listitem>
<para>
<link linkend="folder-hook">folder-hook</link>
</para>
</listitem>

<listitem>
<para>
<link linkend="iconv-hook">iconv-hook</link>
</para>
</listitem>

<listitem>
<para>
<link linkend="mbox-hook">mbox-hook</link>
</para>
</listitem>

<listitem>
<para>
<link linkend="message-hook">message-hook</link>
</para>
</listitem>

<listitem>
<para>
<link linkend="reply-hook">reply-hook</link>
</para>
</listitem>

<listitem>
<para>
<link linkend="save-hook">save-hook</link>
</para>
</listitem>

<listitem>
<para>
<link linkend="send-hook">send-hook</link>
</para>
</listitem>

<listitem>
<para>
<link linkend="send2-hook">send2-hook</link>
</para>
</listitem>

</itemizedlist>

for specific details on each type of <emphasis>hook</emphasis> available.
</para>

<note>
<para>
If a hook changes configuration settings, these changes remain
effective until the end of the current mutt session. As this is generally
not desired, a <quote>default</quote> hook needs to be added before all
other hooks  of that type to restore configuration defaults.
</para>
</note>

<example id="ex-default-hook">
<title>Specifying a <quote>default</quote> hook</title>
<screen>
send-hook . 'unmy_hdr From:'
send-hook ~C'^b@b\.b$' my_hdr from: c@c.c
</screen>
</example>

<para>
In <xref linkend="ex-default-hook"/>, by default the value of
<link linkend="from">&dollar;from</link>
and <link linkend="realname">&dollar;realname</link>
is not overridden. When sending messages either To: or Cc:
to <literal>&lt;b@b.b&gt;</literal>, the From: header is changed to
<literal>&lt;c@c.c&gt;</literal>.
</para>

<sect2 id="pattern-hook" xreflabel="Message Matching in Hooks">
<title>Message Matching in Hooks</title>

<para>
Hooks that act upon messages (<literal>message-hook, reply-hook,
send-hook, send2-hook, save-hook, fcc-hook</literal>) are evaluated in a
slightly different manner. For the other
types of hooks, a <link linkend="regexp">regular expression</link> is
sufficient.  But in dealing with messages a finer grain of control is
needed for matching since for different purposes you want to match
different criteria.
</para>

<para>
Mutt allows the use of the <link linkend="patterns">search pattern</link>
language for matching messages in hook commands.  This works in
exactly the same way as it would when <emphasis>limiting</emphasis> or
<emphasis>searching</emphasis> the mailbox, except that you are restricted to those
operators which match information mutt extracts from the header of
the message (i.e., from, to, cc, date, subject, etc.).
</para>

<para>
For example, if you wanted to set your return address based upon sending
mail to a specific address, you could do something like:
</para>

<screen>
send-hook '~t ^me@cs\.hmc\.edu$' 'my_hdr From: Mutt User &lt;user@host&gt;'
</screen>

<para>
which would execute the given command when sending mail to
<emphasis>me@cs.hmc.edu</emphasis>.
</para>

<para>
However, it is not required that you write the pattern to match using the
full searching language.  You can still specify a simple <emphasis>regular
expression</emphasis> like the other hooks, in which case Mutt will translate your
pattern into the full language, using the translation specified by the
<link linkend="default-hook">&dollar;default&lowbar;hook</link> variable.  The
pattern is translated at the time the hook is declared, so the value of
<link linkend="default-hook">&dollar;default&lowbar;hook</link> that is in effect
at that time will be used.
</para>

</sect2>

</sect1>

<sect1 id="query">
<title>External Address Queries</title>

<para>
Mutt supports connecting to external directory databases such as LDAP,
ph/qi, bbdb, or NIS through a wrapper script which connects to mutt
using a simple interface.  Using the <link linkend="query-command">&dollar;query&lowbar;command</link> variable, you specify the wrapper
command to use.  For example:
</para>

<screen>
set query_command = "mutt_ldap_query.pl '%s'"
</screen>

<para>
The wrapper script should accept the query on the command-line.  It
should return a one line message, then each matching response on a
single line, each line containing a tab separated address then name then
some other optional information.  On error, or if there are no matching
addresses, return a non-zero exit code and a one line error message.
</para>

<para>
An example multiple response output:
</para>

<screen>
Searching database ... 20 entries ... 3 matching:
me@cs.hmc.edu           Michael Elkins  mutt dude
blong@fiction.net       Brandon Long    mutt and more
roessler@does-not-exist.org        Thomas Roessler mutt pgp
</screen>

<para>
There are two mechanisms for accessing the query function of mutt.  One
is to do a query from the index menu using the <literal>&lt;query&gt;</literal> function (default: Q).
This will prompt for a query, then bring up the query menu which will
list the matching responses.  From the query menu, you can select
addresses to create aliases, or to mail.  You can tag multiple addresses
to mail, start a new query, or have a new query appended to the current
responses.
</para>

<para>
The other mechanism for accessing the query function is for address
completion, similar to the alias completion.  In any prompt for address
entry, you can use the <literal>&lt;complete-query&gt;</literal> function (default: &circ;T) to run a
query based on the current address you have typed.  Like aliases, mutt
will look for what you have typed back to the last space or comma.  If
there is a single response for that query, mutt will expand the address
in place.  If there are multiple responses, mutt will activate the query
menu.  At the query menu, you can select one or more addresses to be
added to the prompt.
</para>

</sect1>

<sect1 id="mailbox-formats">
<title>Mailbox Formats</title>

<para>
Mutt supports reading and writing of four different local mailbox formats:
mbox, MMDF, MH and Maildir.  The mailbox type is autodetected, so there
is no need to use a flag for different mailbox types.  When creating new
mailboxes, Mutt uses the default specified with the
<link linkend="mbox-type">&dollar;mbox&lowbar;type</link> variable. A
short description of the formats follows.
</para>

<para>
<emphasis>mbox</emphasis>.  This is a widely used mailbox format for UNIX.  All
messages are stored in a single file.  Each message has a line of the form:
</para>

<screen>
From me@cs.hmc.edu Fri, 11 Apr 1997 11:44:56 PST
</screen>

<para>
to denote the start of a new message (this is often referred to as the
<quote>From&lowbar;</quote> line). The mbox format requires mailbox
locking, is prone to mailbox corruption with concurrently writing
clients or misinterpreted From&lowbar; lines. Depending on the
environment, new mail detection can be unreliable. Mbox folders are fast
to open and easy to archive.
</para>

<para>
<emphasis>MMDF</emphasis>.  This is a variant of
the <emphasis>mbox</emphasis> format.  Each message is surrounded by
lines containing <quote>&circ;A&circ;A&circ;A&circ;A</quote> (four
control-A's). The same problems as for mbox apply (also with finding the
right message separator as four control-A's may appear in message
bodies).
</para>

<para>
<emphasis>MH</emphasis>. A radical departure from <emphasis>mbox</emphasis> and <emphasis>MMDF</emphasis>, a mailbox
consists of a directory and each message is stored in a separate file.
The filename indicates the message number (however, this is may not
correspond to the message number Mutt displays). Deleted messages are
renamed with a comma (,) prepended to the filename. Mutt
detects this type of mailbox by looking for either <literal>.mh&lowbar;sequences</literal>
or <literal>.xmhcache</literal> files (needed to distinguish normal directories from MH
mailboxes). MH is more robust with concurrent clients writing the mailbox,
but still may suffer from lost flags; message corruption is less likely
to occur than with mbox/mmdf. It's usually slower to open compared to
mbox/mmdf since many small files have to be read (Mutt provides
<xref linkend="header-caching"/> to greatly speed this process up).
Depending on the environment, MH is not very disk-space efficient.
</para>

<para>
<emphasis>Maildir</emphasis>.  The newest of the mailbox formats, used by the Qmail MTA (a
replacement for sendmail).  Similar to <emphasis>MH</emphasis>, except that it adds three
subdirectories of the mailbox: <emphasis>tmp</emphasis>, <emphasis>new</emphasis> and <emphasis>cur</emphasis>.  Filenames
for the messages are chosen in such a way they are unique, even when two
programs are writing the mailbox over NFS, which means that no file locking
is needed and corruption is very unlikely. Maildir maybe
slower to open without caching in Mutt, it too is not very
disk-space efficient depending on the environment. Since no additional
files are used for metadata (which is embedded in the message filenames)
and Maildir is locking-free, it's easy to sync across different machines
using file-level synchronization tools.
</para>

</sect1>

<sect1 id="shortcuts">
<title>Mailbox Shortcuts</title>

<para>
There are a number of built in shortcuts which refer to specific mailboxes.
These shortcuts can be used anywhere you are prompted for a file or mailbox
path or in path-related configuration variables. Note that these only
work at the beginning of a string.
</para>

<itemizedlist>
<listitem>

<para>
! -- refers to your <link linkend="spoolfile">&dollar;spoolfile</link> (incoming) mailbox
</para>
</listitem>
<listitem>

<para>
&gt; -- refers to your <link linkend="mbox">&dollar;mbox</link> file
</para>
</listitem>
<listitem>

<para>
&lt; -- refers to your <link linkend="record">&dollar;record</link> file
</para>
</listitem>
<listitem>

<para>
&circ; -- refers to the current mailbox
</para>
</listitem>
<listitem>

<para>
- or !! -- refers to the file you've last visited
</para>
</listitem>
<listitem>

<para>
&tilde; -- refers to your home directory
</para>
</listitem>
<listitem>

<para>
= or + -- refers to your <link linkend="folder">&dollar;folder</link> directory
</para>
</listitem>
<listitem>

<para>
@<emphasis>alias</emphasis> -- refers to the <link linkend="save-hook">default save folder</link> as determined by the address of the alias
</para>
</listitem>

</itemizedlist>

<para>
For example, to store a copy of outgoing messages in the folder they
were composed in,
a <link linkend="folder-hook">folder-hook</link> can
be used to set <link linkend="record">&dollar;record</link>:
</para>

<screen>
folder-hook . 'set record=&circ;'</screen>

</sect1>

<sect1 id="using-lists">
<title>Handling Mailing Lists</title>

<para>
Mutt has a few configuration options that make dealing with large
amounts of mail easier.  The first thing you must do is to let Mutt
know what addresses you consider to be mailing lists (technically
this does not have to be a mailing list, but that is what it is most
often used for), and what lists you are subscribed to.  This is
accomplished through the use of the <link linkend="lists">lists and subscribe</link> commands in your muttrc.
</para>

<para>
Now that Mutt knows what your mailing lists are, it can do several
things, the first of which is the ability to show the name of a list
through which you received a message (i.e., of a subscribed list) in
the <emphasis>index</emphasis> menu display.  This is useful to distinguish between
personal and list mail in the same mailbox.  In the <link linkend="index-format">&dollar;index&lowbar;format</link> variable, the expando <quote>&percnt;L</quote>
will print the string <quote>To &lt;list&gt;</quote> when <quote>list</quote> appears in the
<quote>To</quote> field, and <quote>Cc &lt;list&gt;</quote> when it appears in the <quote>Cc</quote>
field (otherwise it prints the name of the author).
</para>

<para>
Often times the <quote>To</quote> and <quote>Cc</quote> fields in mailing list messages
tend to get quite large. Most people do not bother to remove the
author of the message they reply to from the list, resulting in
two or more copies being sent to that person.  The <literal>&lt;list-reply&gt;</literal>
function, which by default is bound to <quote>L</quote> in the <emphasis>index</emphasis> menu
and <emphasis>pager</emphasis>, helps reduce the clutter by only replying to the
known mailing list addresses instead of all recipients (except as
specified by <literal>Mail-Followup-To</literal>, see below).
</para>

<para>
Mutt also supports the <literal>Mail-Followup-To</literal> header.  When you send
a message to a list of recipients which includes one or several
subscribed mailing lists, and if the <link linkend="followup-to">&dollar;followup&lowbar;to</link> option is set, mutt will generate
a Mail-Followup-To header which contains all the recipients to whom
you send this message, but not your address. This indicates that
group-replies or list-replies (also known as <quote>followups</quote>) to this
message should only be sent to the original recipients of the
message, and not separately to you - you'll receive your copy through
one of the mailing lists you are subscribed to.
</para>

<para>
Conversely, when group-replying or list-replying to a message which
has a <literal>Mail-Followup-To</literal> header, mutt will respect this header if
the <link linkend="honor-followup-to">&dollar;honor&lowbar;followup&lowbar;to</link> configuration
variable is set.  Using <link linkend="list-reply">list-reply</link> will in this case also make sure
that the reply goes to the mailing list, even if it's not specified
in the list of recipients in the <literal>Mail-Followup-To</literal>.
</para>

<note>
<para>
When header editing is enabled, you can create a
<literal>Mail-Followup-To</literal> header manually.  Mutt will only auto-generate
this header if it doesn't exist when you send the message.
</para>
</note>

<para>
The other method some mailing list admins use is to generate a
<quote>Reply-To</quote> field which points back to the mailing list address rather
than the author of the message.  This can create problems when trying
to reply directly to the author in private, since most mail clients
will automatically reply to the address given in the <quote>Reply-To</quote>
field.  Mutt uses the <link linkend="reply-to">&dollar;reply&lowbar;to</link>
variable to help decide which address to use.  If set to <emphasis>ask-yes</emphasis> or
<emphasis>ask-no</emphasis>, you will be
prompted as to whether or not you would like to use the address given in
the <quote>Reply-To</quote> field, or reply directly to the address given in the
<quote>From</quote> field.  When set to <emphasis>yes</emphasis>, the <quote>Reply-To</quote> field will be used when
present.
</para>

<para>
The <quote>X-Label:</quote> header field can be used to further identify mailing
lists or list subject matter (or just to annotate messages
individually).  The <link linkend="index-format">&dollar;index&lowbar;format</link> variable's <quote>&percnt;y</quote> and
<quote>&percnt;Y</quote> expandos can be used to expand <quote>X-Label:</quote> fields in the
index, and Mutt's pattern-matcher can match regular expressions to
<quote>X-Label:</quote> fields with the <quote>&tilde;y</quote> selector.  <quote>X-Label:</quote> is not a
standard message header field, but it can easily be inserted by procmail
and other mail filtering agents.
</para>

<para>
Lastly, Mutt has the ability to <link linkend="sort">sort</link> the mailbox into
<link linkend="threads">threads</link>.  A thread is a group of messages which all relate to the same
subject.  This is usually organized into a tree-like structure where a
message and all of its replies are represented graphically.  If you've ever
used a threaded news client, this is the same concept.  It makes dealing
with large volume mailing lists easier because you can easily delete
uninteresting threads and quickly find topics of value.
</para>

</sect1>

<sect1 id="handling-folders">
<title>Handling multiple folders</title>

<para>
Mutt supports setups with multiple folders, allowing all of them to
be monitored for new mail (see <xref linkend="mailboxes"/> for details).
</para>

<para>
When in the index menu and being idle (also see
<link linkend="timeout">&dollar;timeout</link>), Mutt periodically checks
for new mail in all folders which have been configured via the
<literal>mailboxes</literal> command. The interval depends on the folder
type: for local/IMAP folders it consults
<link linkend="mail-check">&dollar;mail&lowbar;check</link> and
<link linkend="pop-checkinterval">&dollar;pop&lowbar;checkinterval</link>
for POP folders.
</para>

<para>
Outside the index menu the directory browser supports checking
for new mail using the <literal>&lt;check-new&gt;</literal> function which is
unbound by default. Pressing TAB will bring up a
menu showing the files specified by the <literal>mailboxes</literal> command,
and indicate which contain new messages. Mutt will automatically enter this
mode when invoked from the command line with the <literal>-y</literal> option.
</para>

<para>
For the pager, index and directory browser menus, Mutt contains the
<literal>&lt;buffy-list&gt;</literal> function (bound to <quote>.</quote> by default)
which will print a list of folders with new mail in the command line at
the bottom of the screen.
</para>

<para>
For the index, by default Mutt displays the number of mailboxes with new
mail in the status bar, please refer to the
<link linkend="status-format">&dollar;status&lowbar;format</link>
variable for details.
</para>

<para>
When changing folders, Mutt fills the prompt with the first folder from
the mailboxes list containing new mail (if any), pressing
<emphasis>space</emphasis> will cycle through folders with new mail.
</para>

</sect1>

<sect1 id="editing-threads">
<title>Editing threads</title>

<para>
Mutt has the ability to dynamically restructure threads that are broken
either by misconfigured software or bad behavior from some
correspondents. This allows to clean your mailboxes from these
annoyances which make it hard to follow a discussion.
</para>

<sect2 id="link-threads">
<title>Linking threads</title>

<para>
Some mailers tend to <quote>forget</quote> to correctly set the <quote>In-Reply-To:</quote> and
<quote>References:</quote> headers when replying to a message. This results in broken
discussions because Mutt has not enough information to guess the correct
threading.
You can fix this by tagging the reply, then moving to the parent message
and using the <literal>&lt;link-threads&gt;</literal> function (bound to &amp; by default). The
reply will then be connected to this parent message.
</para>

<para>
You can also connect multiple children at once, tagging them and using the
<literal>&lt;tag-prefix&gt;</literal> command (';') or the <link linkend="auto-tag">&dollar;auto&lowbar;tag</link> option.
</para>

</sect2>

<sect2 id="break-threads">
<title>Breaking threads</title>

<para>
On mailing lists, some people are in the bad habit of starting a new
discussion by hitting <quote>reply</quote> to any message from the list and changing
the subject to a totally unrelated one.
You can fix such threads by using the <literal>&lt;break-thread&gt;</literal> function (bound
by default to &num;), which will turn the subthread starting from the
current message into a whole different thread.
</para>

</sect2>

</sect1>

<sect1 id="dsn">
<title>Delivery Status Notification (DSN) Support</title>

<para>
RFC1894 defines a set of MIME content types for relaying information
about the status of electronic mail messages.  These can be thought of as
<quote>return receipts.</quote>
</para>

<para>
To support DSN, there are two variables. <link linkend="dsn-notify">&dollar;dsn&lowbar;notify</link> is used to request receipts for
different results (such as failed message, message delivered, etc.).
<link linkend="dsn-return">&dollar;dsn&lowbar;return</link> requests how much
of your message should be returned with the receipt (headers or full
message).
</para>

<para>
When using <link linkend="sendmail">&dollar;sendmail</link> for mail
delivery, you need to use either Berkeley sendmail 8.8.x (or greater) a MTA
supporting DSN command line options compatible to Sendmail: The -N and -R
options can be used by the mail client to make requests as to what type of
status messages should be returned. Please consider your MTA documentation
whether DSN is supported.
</para>

<para>
For SMTP delivery using <link
  linkend="smtp-url">&dollar;smtp&lowbar;url</link>, it depends on the
capabilities announced by the server whether mutt will attempt to
request DSN or not.
</para>

</sect1>

<sect1 id="urlview">
<title>Start a WWW Browser on URLs</title>

<para>
If a message contains URLs, it is efficient to get
a menu with all the URLs and start a WWW browser on one of them.  This
functionality is provided by the external urlview program which can be
retrieved at
<ulink url="ftp://ftp.mutt.org/mutt/contrib/">ftp://ftp.mutt.org/mutt/contrib/</ulink>
and the configuration commands:
</para>

<screen>
macro index \cb |urlview\n
macro pager \cb |urlview\n
</screen>

</sect1>

<sect1 id="misc-topics">
<title>Miscellany</title>

<para>
This section documents various features that fit nowhere else.
</para>

<variablelist>
<varlistentry>
<term>
Address normalization
</term>
<listitem>
<para>
Mutt normalizes all e-mail addresses to the simplest form possible. If
an address contains a realname, the form
<emphasis>Joe User &lt;joe@example.com&gt;</emphasis> is used and the
pure e-mail address without angle brackets otherwise, i.e. just
<emphasis>joe@example.com</emphasis>.
</para>
<para>
This normalization affects all headers mutt generates including aliases.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
Initial folder selection
</term>
<listitem>
<para>
The folder Mutt opens at startup is determined as follows: the folder
specified in the <literal>$MAIL</literal> environment variable if
present. Otherwise, the value of <literal>$MAILDIR</literal> is taken
into account. If that isn't present either, Mutt takes the user's
mailbox in the mailspool as determined at compile-time (which may also
reside in the home directory). The
<link linkend="spoolfile">&dollar;spoolfile</link> setting overrides
this selection. Highest priority has the mailbox given with the
<literal>-f</literal> command line option.
</para>
</listitem>
</varlistentry>
</variablelist>

</sect1>

</chapter>

<chapter id="mimesupport">
<title>Mutt's MIME Support</title>

<para>
Quite a bit of effort has been made to make Mutt the premier text-mode
MIME MUA.  Every effort has been made to provide the functionality that
the discerning MIME user requires, and the conformance to the standards
wherever possible.  When configuring Mutt for MIME, there are two extra
types of configuration files which Mutt uses.  One is the
<literal>mime.types</literal> file, which contains the mapping of file extensions to
IANA MIME types.  The other is the <literal>mailcap</literal> file, which specifies
the external commands to use for handling specific MIME types.
</para>

<sect1 id="using-mime">
<title>Using MIME in Mutt</title>

<para>
There are three areas/menus in Mutt which deal with MIME, they are the
pager (while viewing a message), the attachment menu and the compose
menu.
</para>

<sect2 id="mime-pager">
<title>Viewing MIME messages in the pager</title>

<para>
When you select a message from the index and view it in the pager, Mutt
decodes the message to a text representation.  Mutt internally supports
a number of MIME types, including <literal>text/plain, text/enriched,
message/rfc822, and message/news</literal>.  In addition, the export
controlled version of Mutt recognizes a variety of PGP MIME types,
including PGP/MIME and application/pgp.
</para>

<para>
Mutt will denote attachments with a couple lines describing them.
These lines are of the form:
</para>

<screen>
[-- Attachment #1: Description --]
[-- Type: text/plain, Encoding: 7bit, Size: 10000 --]
</screen>

<para>
Where the <literal>Description</literal> is the description or filename given for the
attachment, and the <literal>Encoding</literal> is one of
<literal>7bit/8bit/quoted-printable/base64/binary</literal>.
</para>

<para>
If Mutt cannot deal with a MIME type, it will display a message like:
</para>

<screen>
[-- image/gif is unsupported (use 'v' to view this part) --]
</screen>

</sect2>

<sect2 id="attach-menu">
<title>The Attachment Menu</title>

<para>
The default binding for <literal>&lt;view-attachments&gt;</literal> is <quote>v</quote>, which displays the
attachment menu for a message.  The attachment menu displays a list of
the attachments in a message.  From the attachment menu, you can save,
print, pipe, delete, and view attachments.  You can apply these
operations to a group of attachments at once, by tagging the attachments
and by using the <literal>&lt;tag-prefix&gt;</literal> operator.  You can also reply to the
current message from this menu, and only the current attachment (or the
attachments tagged) will be quoted in your reply.  You can view
attachments as text, or view them using the mailcap viewer definition.
</para>

<para>
Finally, you can apply the usual message-related functions (like
<link linkend="resend-message"><literal>&lt;resend-message&gt;</literal></link>, and the
<literal>&lt;reply&gt;</literal> and <literal>&lt;forward&gt;</literal>
functions) to attachments of type <literal>message/rfc822</literal>.
</para>

<para>
See the help on the attachment menu for more information.
</para>

</sect2>

<sect2 id="compose-menu">
<title>The Compose Menu</title>

<para>
The compose menu is the menu you see before you send a message.  It
allows you to edit the recipient list, the subject, and other aspects
of your message.  It also contains a list of the attachments of your
message, including the main body.  From this menu, you can print, copy,
filter, pipe, edit, compose, review, and rename an attachment or a
list of tagged attachments.  You can also modifying the attachment
information, notably the type, encoding and description.
</para>

<para>
Attachments appear as follows:
</para>

<screen>
- 1 [text/plain, 7bit, 1K]           /tmp/mutt-euler-8082-0 &lt;no description&gt;
  2 [applica/x-gunzip, base64, 422K] ~/src/mutt-0.85.tar.gz &lt;no description&gt;
</screen>

<para>
The '-' denotes that Mutt will delete the file after sending (or
postponing, or canceling) the message.  It can be toggled with the
<literal>&lt;toggle-unlink&gt;</literal> command (default: u).  The next field is the MIME
content-type, and can be changed with the <literal>&lt;edit-type&gt;</literal> command
(default: &circ;T).  The next field is the encoding for the attachment,
which allows a binary message to be encoded for transmission on 7bit
links.  It can be changed with the <literal>&lt;edit-encoding&gt;</literal> command
(default: &circ;E).  The next field is the size of the attachment,
rounded to kilobytes or megabytes.  The next field is the filename,
which can be changed with the <literal>&lt;rename-file&gt;</literal> command (default: R).
The final field is the description of the attachment, and can be
changed with the <literal>&lt;edit-description&gt;</literal> command (default: d).
</para>

</sect2>

</sect1>

<sect1 id="mime-types">
<title>MIME Type configuration with <literal>mime.types</literal></title>

<para>
When you add an attachment to your mail message, Mutt searches your
personal <literal>mime.types</literal> file at <literal>&dollar;&lcub;HOME&rcub;/.mime.types</literal>, and then
the system <literal>mime.types</literal> file at <literal>/usr/local/share/mutt/mime.types</literal> or
<literal>/etc/mime.types</literal>
</para>

<para>
The <literal>mime.types</literal> file consist of lines containing a MIME type and a space
separated list of extensions.  For example:
</para>

<screen>
application/postscript          ps eps
application/pgp                 pgp
audio/x-aiff                    aif aifc aiff
</screen>

<para>
A sample <literal>mime.types</literal> file comes with the Mutt distribution, and
should contain most of the MIME types you are likely to use.
</para>

<para>
If Mutt can not determine the mime type by the extension of the file you
attach, it will look at the file.  If the file is free of binary
information, Mutt will assume that the file is plain text, and mark it
as <literal>text/plain</literal>.  If the file contains binary information, then Mutt will
mark it as <literal>application/octet-stream</literal>.  You can change the MIME
type that Mutt assigns to an attachment by using the <literal>&lt;edit-type&gt;</literal>
command from the compose menu (default: &circ;T). The MIME type is actually a
major mime type followed by the sub-type, separated by a '/'. 6 major
types: application, text, image, video, audio, and model have been approved
after various internet discussions. Mutt recognizes all of these if the
appropriate entry is found in the <literal>mime.types</literal> file. It also recognizes other
major mime types, such as the chemical type that is widely used in the
molecular modeling community to pass molecular data in various forms to
various molecular viewers. Non-recognized mime types should only be used
if the recipient of the message is likely to be expecting such attachments.
</para>

</sect1>

<sect1 id="mailcap">
<title>MIME Viewer configuration with mailcap</title>

<para>
Mutt supports RFC 1524 MIME Configuration, in particular the Unix
specific format specified in Appendix A of RFC 1524.  This file format
is commonly referred to as the mailcap format.  Many MIME compliant
programs utilize the mailcap format, allowing you to specify handling
for all MIME types in one place for all programs.  Programs known to
use this format include Netscape, XMosaic, lynx and metamail.
</para>

<para>
In order to handle various MIME types that Mutt can not handle
internally, Mutt parses a series of external configuration files to
find an external handler. The default search string for these files
is a colon delimited list containing the following files:
</para>

<orderedlist>
<listitem><para><literal>&dollar;HOME/.mailcap</literal></para></listitem>
<listitem><para><literal>&dollar;PKGDATADIR/mailcap</literal></para></listitem>
<listitem><para><literal>&dollar;SYSCONFDIR/mailcap</literal></para></listitem>
<listitem><para><literal>/etc/mailcap</literal></para></listitem>
<listitem><para><literal>/usr/etc/mailcap</literal></para></listitem>
<listitem><para><literal>/usr/local/etc/mailcap</literal></para></listitem>
</orderedlist>

<para>
where <literal>&dollar;HOME</literal> is your home directory. The
<literal>&dollar;PKGDATADIR</literal> and the
<literal>&dollar;SYSCONFDIR</literal> directories depend on where mutt
is installed: the former is the default for shared data, the
latter for system configuration files.
</para>

<para>
The default search path can be obtained by running the following
command:
</para>

<screen>
mutt -nF /dev/null -Q mailcap_path
</screen>

<para>
In particular, the metamail distribution will install a mailcap file,
usually as <literal>/usr/local/etc/mailcap</literal>, which contains some baseline
entries.
</para>

<sect2 id="mailcap-basics">
<title>The Basics of the mailcap file</title>

<para>
A mailcap file consists of a series of lines which are comments, blank,
or definitions.
</para>

<para>
A comment line consists of a &num; character followed by anything you want.
</para>

<para>
A blank line is blank.
</para>

<para>
A definition line consists of a content type, a view command, and any
number of optional fields.  Each field of a definition line is divided
by a semicolon ';' character.
</para>

<para>
The content type is specified in the MIME standard type/subtype method.
For example,
<literal>text/plain, text/html, image/gif, </literal>
etc.  In addition, the mailcap format includes two formats for
wildcards, one using the special '*' subtype, the other is the implicit
wild, where you only include the major type.  For example, <literal>image/*</literal>, or
<literal>video,</literal> will match all image types and video types,
respectively.
</para>

<para>
The view command is a Unix command for viewing the type specified. There
are two different types of commands supported. The default is to send
the body of the MIME message to the command on stdin. You can change
this behavior by using &percnt;s as a parameter to your view command.
This will cause Mutt to save the body of the MIME message to a temporary
file, and then call the view command with the &percnt;s replaced by
the name of the temporary file. In both cases, Mutt will turn over the
terminal to the view program until the program quits, at which time Mutt
will remove the temporary file if it exists.
</para>

<para>
So, in the simplest form, you can send a text/plain message to the
external pager more on stdin:
</para>

<screen>
text/plain; more
</screen>

<para>
Or, you could send the message as a file:
</para>

<screen>
text/plain; more %s
</screen>

<para>
Perhaps you would like to use lynx to interactively view a text/html
message:
</para>

<screen>
text/html; lynx %s
</screen>

<para>
In this case, lynx does not support viewing a file from stdin, so you
must use the &percnt;s syntax.
</para>

<note>
<para>
<emphasis>Some older versions of lynx contain a bug where they
will check the mailcap file for a viewer for text/html.  They will find
the line which calls lynx, and run it.  This causes lynx to continuously
spawn itself to view the object.</emphasis>
</para>
</note>

<para>
On the other hand, maybe you don't want to use lynx interactively, you
just want to have it convert the text/html to text/plain, then you can
use:
</para>

<screen>
text/html; lynx -dump %s | more
</screen>

<para>
Perhaps you wish to use lynx to view text/html files, and a pager on
all other text formats, then you would use the following:
</para>

<screen>
text/html; lynx %s
text/*; more
</screen>

<para>
This is the simplest form of a mailcap file.
</para>

</sect2>

<sect2 id="secure-mailcap">
<title>Secure use of mailcap</title>

<para>
The interpretation of shell meta-characters embedded in MIME parameters
can lead to security problems in general.  Mutt tries to quote parameters
in expansion of &percnt;s syntaxes properly, and avoids risky characters by
substituting them, see the <link linkend="mailcap-sanitize">&dollar;mailcap&lowbar;sanitize</link> variable.
</para>

<para>
Although mutt's procedures to invoke programs with mailcap seem to be
safe, there are other applications parsing mailcap, maybe taking less care
of it.  Therefore you should pay attention to the following rules:
</para>

<para>
<emphasis>Keep the &percnt;-expandos away from shell quoting.</emphasis>
Don't quote them with single or double quotes.  Mutt does this for
you, the right way, as should any other program which interprets
mailcap.  Don't put them into backtick expansions.  Be highly careful
with eval statements, and avoid them if possible at all.  Trying to fix
broken behavior with quotes introduces new leaks - there is no
alternative to correct quoting in the first place.
</para>

<para>
If you have to use the &percnt;-expandos' values in context where you need
quoting or backtick expansions, put that value into a shell variable
and reference the shell variable where necessary, as in the following
example (using <literal>&dollar;charset</literal> inside the backtick expansion is safe,
since it is not itself subject to any further expansion):
</para>

<screen>
text/test-mailcap-bug; cat %s; copiousoutput; test=charset=%{charset} &bsol;
        &amp;&amp; test "`echo $charset | tr '[A-Z]' '[a-z]'`" != iso-8859-1
</screen>

</sect2>

<sect2 id="advanced-mailcap">
<title>Advanced mailcap Usage</title>

<sect3 id="optional-mailcap-fields">
<title>Optional Fields</title>

<para>
In addition to the required content-type and view command fields, you
can add semi-colon ';' separated fields to set flags and other options.
Mutt recognizes the following optional fields:
</para>

<variablelist>

<varlistentry>
<term>copiousoutput</term>
<listitem>
<para>
This flag tells Mutt that the command passes possibly large amounts of
text on stdout.  This causes Mutt to invoke a pager (either the internal
pager or the external pager defined by the pager variable) on the output
of the view command.  Without this flag, Mutt assumes that the command
is interactive.  One could use this to replace the pipe to <literal>more</literal>
in the <literal>lynx -dump</literal> example in the Basic section:
</para>

<screen>
text/html; lynx -dump %s ; copiousoutput
</screen>

<para>
This will cause lynx to format the text/html output as text/plain
and Mutt will use your standard pager to display the results.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>needsterminal</term>
<listitem>
<para>
Mutt uses this flag when viewing attachments with <link linkend="auto-view">auto&lowbar;view</link>, in order to decide whether it should honor the setting
of the <link linkend="wait-key">&dollar;wait&lowbar;key</link> variable or
not.  When an attachment is viewed using an interactive program, and the
corresponding mailcap entry has a <emphasis>needsterminal</emphasis> flag, Mutt will use
<link linkend="wait-key">&dollar;wait&lowbar;key</link> and the exit status
of the program to decide if it will ask you to press a key after the
external program has exited.  In all other situations it will not prompt
you for a key.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>compose=&lt;command&gt;</term>
<listitem>
<para>
This flag specifies the command to use to create a new attachment of a
specific MIME type.  Mutt supports this from the compose menu.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>composetyped=&lt;command&gt;</term>
<listitem>
<para>
This flag specifies the command to use to create a new attachment of a
specific MIME type.  This command differs from the compose command in
that mutt will expect standard MIME headers on the data.  This can be
used to specify parameters, filename, description, etc. for a new
attachment.   Mutt supports this from the compose menu.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>print=&lt;command&gt;</term>
<listitem>
<para>
This flag specifies the command to use to print a specific MIME type.
Mutt supports this from the attachment and compose menus.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>edit=&lt;command&gt;</term>
<listitem>
<para>
This flag specifies the command to use to edit a specific MIME type.
Mutt supports this from the compose menu, and also uses it to compose
new attachments.  Mutt will default to the defined editor for text
attachments.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>nametemplate=&lt;template&gt;</term>
<listitem>
<para>
This field specifies the format for the file denoted by &percnt;s in the
command fields.  Certain programs will require a certain file extension,
for instance, to correctly view a file.  For instance, lynx will only
interpret a file as <literal>text/html</literal> if the file ends in <literal>.html</literal>.
So, you would specify lynx as a <literal>text/html</literal> viewer with a line in
the mailcap file like:
</para>

<screen>
text/html; lynx %s; nametemplate=%s.html
</screen>

</listitem>
</varlistentry>
<varlistentry>
<term>test=&lt;command&gt;</term>
<listitem>
<para>
This field specifies a command to run to test whether this mailcap
entry should be used.  The command is defined with the command expansion
rules defined in the next section.  If the command returns 0, then the
test passed, and Mutt uses this entry.  If the command returns non-zero,
then the test failed, and Mutt continues searching for the right entry.
Note that the content-type must match before Mutt performs the test.
For example:
</para>

<screen>
text/html; netscape -remote 'openURL(%s)' ; test=RunningX
text/html; lynx %s
</screen>

<para>
In this example, Mutt will run the program RunningX which will return 0
if the X Window manager is running, and non-zero if it isn't.  If
RunningX returns 0, then Mutt will call netscape to display the
<literal>text/html</literal> object.  If RunningX doesn't return 0, then Mutt will go on
to the next entry and use lynx to display the <literal>text/html</literal> object.
</para>
</listitem>
</varlistentry>
</variablelist>

</sect3>

<sect3 id="mailcap-search-order">
<title>Search Order</title>

<para>
When searching for an entry in the mailcap file, Mutt will search for
the most useful entry for its purpose.  For instance, if you are
attempting to print an <literal>image/gif</literal>, and you have the following
entries in your mailcap file, Mutt will search for an entry with the
print command:
</para>

<screen>
image/*;        xv %s
image/gif;      ; print= anytopnm %s | pnmtops | lpr; &bsol;
                nametemplate=%s.gif
</screen>

<para>
Mutt will skip the <literal>image/*</literal> entry and use the <literal>image/gif</literal>
entry with the print command.
</para>

<para>
In addition, you can use this with <link linkend="auto-view">auto&lowbar;view</link>
to denote two commands for viewing an attachment, one to be viewed
automatically, the other to be viewed interactively from the attachment
menu.  In addition, you can then use the test feature to determine which
viewer to use interactively depending on your environment.
</para>

<screen>
text/html;      netscape -remote 'openURL(%s)' ; test=RunningX
text/html;      lynx %s; nametemplate=%s.html
text/html;      lynx -dump %s; nametemplate=%s.html; copiousoutput
</screen>

<para>
For <link linkend="auto-view">auto&lowbar;view</link>, Mutt will choose the third
entry because of the copiousoutput tag.  For interactive viewing, Mutt
will run the program RunningX to determine if it should use the first
entry.  If the program returns non-zero, Mutt will use the second entry
for interactive viewing.
</para>

</sect3>

<sect3 id="mailcap-command-expansion">
<title>Command Expansion</title>

<para>
The various commands defined in the mailcap files are passed to the
<literal>/bin/sh</literal> shell using the <literal>system(3)</literal> function.  Before the
command is passed to <literal>/bin/sh -c</literal>, it is parsed to expand
various special parameters with information from Mutt.  The keywords
Mutt expands are:
</para>

<variablelist>

<varlistentry>
<term>&percnt;s</term>
<listitem>
<para>
As seen in the basic mailcap section, this variable is expanded
to a filename specified by the calling program.  This file contains
the body of the message to view/print/edit or where the composing
program should place the results of composition.  In addition, the
use of this keyword causes Mutt to not pass the body of the message
to the view/print/edit program on stdin.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>&percnt;t</term>
<listitem>
<para>
Mutt will expand &percnt;t to the text representation of the content
type of the message in the same form as the first parameter of the
mailcap definition line, ie <literal>text/html</literal> or
<literal>image/gif</literal>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>&percnt;&lcub;&lt;parameter&gt;&rcub;</term>
<listitem>
<para>
Mutt will expand this to the value of the specified parameter
from the Content-Type: line of the mail message.  For instance, if
Your mail message contains:
</para>

<screen>
Content-Type: text/plain; charset=iso-8859-1
</screen>

<para>
then Mutt will expand &percnt;&lcub;charset&rcub; to iso-8859-1.  The default metamail
mailcap file uses this feature to test the charset to spawn an xterm
using the right charset to view the message.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>&bsol;&percnt;</term>
<listitem>
<para>
This will be replaced by a &percnt;
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
Mutt does not currently support the &percnt;F and &percnt;n keywords
specified in RFC 1524.  The main purpose of these parameters is for
multipart messages, which is handled internally by Mutt.
</para>

</sect3>

</sect2>

<sect2 id="mailcap-example">
<title>Example mailcap files</title>

<para>
This mailcap file is fairly simple and standard:
</para>

<screen>
# I'm always running X :)
video/*;        xanim %s &gt; /dev/null
image/*;        xv %s &gt; /dev/null

# I'm always running netscape (if my computer had more memory, maybe)
text/html;      netscape -remote 'openURL(%s)'
</screen>

<para>
This mailcap file shows quite a number of examples:
</para>

<screen>
# Use xanim to view all videos   Xanim produces a header on startup,
# send that to /dev/null so I don't see it
video/*;        xanim %s &gt; /dev/null

# Send html to a running netscape by remote
text/html;      netscape -remote 'openURL(%s)'; test=RunningNetscape

# If I'm not running netscape but I am running X, start netscape on the
# object
text/html;      netscape %s; test=RunningX

# Else use lynx to view it as text
text/html;      lynx %s

# This version would convert the text/html to text/plain
text/html;      lynx -dump %s; copiousoutput

# I use enscript to print text in two columns to a page
text/*;         more %s; print=enscript -2Gr %s

# Netscape adds a flag to tell itself to view jpegs internally
image/jpeg;xv %s; x-mozilla-flags=internal

# Use xv to view images if I'm running X
# In addition, this uses the \ to extend the line and set my editor
# for images
image/*;xv %s; test=RunningX; &bsol;
        edit=xpaint %s

# Convert images to text using the netpbm tools
image/*;  (anytopnm %s | pnmscale -xysize 80 46 | ppmtopgm | pgmtopbm |
pbmtoascii -1x2 ) 2&gt;&amp;1 ; copiousoutput

# Send excel spreadsheets to my NT box
application/ms-excel; open.pl %s
</screen>

</sect2>

</sect1>

<sect1 id="auto-view">
<title>MIME Autoview</title>

<para>
In addition to explicitly telling Mutt to view an attachment with the
MIME viewer defined in the mailcap file, Mutt has support for
automatically viewing MIME attachments while in the pager.
</para>

<para>
To work, you must define a viewer in the mailcap file which uses the
<literal>copiousoutput</literal> option to denote that it is non-interactive.
Usually, you also use the entry to convert the attachment to a text
representation which you can view in the pager.
</para>

<para>
You then use the auto&lowbar;view muttrc command to list the
content-types that you wish to view automatically.  For instance, if you
set it to:
</para>

<screen>
auto_view text/html application/x-gunzip &bsol;
  application/postscript image/gif application/x-tar-gz
</screen>

<para>
Mutt could use the following mailcap entries to automatically view
attachments of these types.
</para>

<screen>
text/html;      lynx -dump %s; copiousoutput; nametemplate=%s.html
image/*;        anytopnm %s | pnmscale -xsize 80 -ysize 50 | ppmtopgm | &bsol;
                pgmtopbm | pbmtoascii ; copiousoutput
application/x-gunzip;   gzcat; copiousoutput
application/x-tar-gz; gunzip -c %s | tar -tf - ; copiousoutput
application/postscript; ps2ascii %s; copiousoutput
</screen>

<para>
unauto&lowbar;view can be used to remove previous entries from the autoview list.
This can be used with <link linkend="message-hook">message-hook</link> to autoview messages based on size, etc.
<quote>unauto&lowbar;view *</quote> will remove all previous entries.
</para>

</sect1>

<sect1 id="alternative-order">
<title>MIME Multipart/Alternative</title>

<para>
Mutt has some heuristics for determining which attachment of a
<literal>multipart/alternative</literal> type to display.  First, mutt will check the
alternative&lowbar;order list
to determine if one of the available types is preferred.  It consists of
a number of mimetypes in order, including support for implicit and
explicit wildcards, for example:
</para>

<screen>
alternative_order text/enriched text/plain text application/postscript image/*
</screen>

<para>
Next, mutt will check if any of the types have a defined
<link linkend="auto-view">auto&lowbar;view</link>, and use that.  Failing
that, Mutt will look for any text type.  As a last attempt, mutt will
look for any type it knows how to handle.
</para>

<para>
To remove a MIME type from the alternative&lowbar;order list, use the
unalternative&lowbar;order command.
</para>

</sect1>

<sect1 id="attachments">
<title>Attachment Searching and Counting</title>

<para>
If you ever lose track of attachments in your mailboxes, Mutt's
attachment-counting and -searching support might be for you.  You can
make your message index display the number of qualifying attachments in
each message, or search for messages by attachment count.  You also can
configure what kinds of attachments qualify for this feature with the
<literal>attachments</literal> and <literal>unattachments</literal> commands.
</para>

<para>
In order to provide this information, mutt needs to fully MIME-parse
all messages affected first. This can slow down operation especially for
remote mail folders such as IMAP because all messages have to be
downloaded first regardless whether the user really wants to view them
or not.
</para>

<para>
The syntax is:
</para>

<cmdsynopsis>
<command>attachments</command>
<arg choice="plain">
<replaceable>&lcub; + &verbar; - &rcub;disposition</replaceable>
</arg>
<arg choice="plain">
<replaceable>mime-type</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unattachments</command>
<arg choice="plain">
<replaceable>&lcub; + &verbar; - &rcub;disposition</replaceable>
</arg>
<arg choice="plain">
<replaceable>mime-type</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>attachments</command>
<arg choice="plain">
<replaceable>?</replaceable>
</arg>
</cmdsynopsis>

<para>
<emphasis>disposition</emphasis> is the attachment's Content-Disposition type -- either
<literal>inline</literal> or <literal>attachment</literal>.
You can abbreviate this to <literal>I</literal> or <literal>A</literal>.
</para>

<para>
Disposition is prefixed by either a + symbol or a - symbol.  If it's
a +, you're saying that you want to allow this disposition and MIME
type to qualify.  If it's a -, you're saying that this disposition
and MIME type is an exception to previous + rules.  There are examples
below of how this is useful.
</para>

<para>
<emphasis>mime-type</emphasis> is, unsurprisingly, the MIME type of the attachment you want
to affect.  A MIME type is always of the format <literal>major/minor</literal>, where
<literal>major</literal> describes the broad category of document you're looking at, and
<literal>minor</literal> describes the specific type within that category.  The major
part of mime-type must be literal text (or the special token <quote><literal>*</literal></quote>), but
the minor part may be a regular expression.  (Therefore, <quote><literal>*/.*</literal></quote> matches
any MIME type.)
</para>

<para>
The MIME types you give to the attachments directive are a kind of
pattern.  When you use the attachments directive, the patterns you
specify are added to a list.  When you use unattachments, the pattern
is removed from the list.  The patterns are not expanded and matched
to specific MIME types at this time -- they're just text in a list.
They're only matched when actually evaluating a message.
</para>

<para>
Some examples might help to illustrate.  The examples that are not
commented out define the default configuration of the lists.
</para>

<example id="ex-attach-count">
<title>Attachment counting</title>
<screen>
## Removing a pattern from a list removes that pattern literally. It
## does not remove any type matching the pattern.
##
##  attachments   +A */.*
##  attachments   +A image/jpeg
##  unattachments +A */.*
##
## This leaves "attached" image/jpeg files on the allowed attachments
## list. It does not remove all items, as you might expect, because the
## second */.* is not a matching expression at this time.
##
## Remember: "unattachments" only undoes what "attachments" has done!
## It does not trigger any matching on actual messages.


## Qualify any MIME part with an "attachment" disposition, EXCEPT for
## text/x-vcard and application/pgp parts. (PGP parts are already known
## to mutt, and can be searched for with ~g, ~G, and ~k.)
##
## I've added x-pkcs7 to this, since it functions (for S/MIME)
## analogously to PGP signature attachments. S/MIME isn't supported
## in a stock mutt build, but we can still treat it specially here.
##
attachments   +A */.*
attachments   -A text/x-vcard application/pgp.*
attachments   -A application/x-pkcs7-.*

## Discount all MIME parts with an "inline" disposition, unless they're
## text/plain. (Why inline a text/plain part unless it's external to the
## message flow?)
##
attachments   +I text/plain

## These two lines make Mutt qualify MIME containers.  (So, for example,
## a message/rfc822 forward will count as an attachment.)  The first
## line is unnecessary if you already have "attach-allow */.*", of
## course.  These are off by default!  The MIME elements contained
## within a message/* or multipart/* are still examined, even if the
## containers themseves don't qualify.
##
#attachments  +A message/.* multipart/.*
#attachments  +I message/.* multipart/.*

## You probably don't really care to know about deleted attachments.
attachments   -A message/external-body
attachments   -I message/external-body
</screen>
</example>

<para>
Entering the command <quote><literal>attachments ?</literal></quote>
as a command will list your current settings in Muttrc format, so that
it can be pasted elsewhere.
</para>

</sect1>

<sect1 id="mime-lookup">
<title>MIME Lookup</title>

<para>
Mutt's mime&lowbar;lookup list specifies a list of mime-types that should not
be treated according to their mailcap entry.  This option is designed to
deal with binary types such as <literal>application/octet-stream</literal>.  When an attachment's
mime-type is listed in mime&lowbar;lookup, then the extension of the filename will
be compared to the list of extensions in the <literal>mime.types</literal> file.  The mime-type
associated with this extension will then be used to process the attachment
according to the rules in the mailcap file and according to any other configuration
options (such as auto&lowbar;view) specified.  Common usage would be:
</para>

<screen>
mime_lookup application/octet-stream application/X-Lotus-Manuscript
</screen>

<para>
In addition, the <literal>unmime&lowbar;lookup</literal> command may be
used to disable this feature for any particular mime-type if it had been
set, for example, in a global muttrc.
</para>

</sect1>

</chapter>

<chapter id="optionalfeatures">
<title>Optional features</title>

<sect1 id="optionalfeatures-notes">
<title>General notes</title>

<sect2 id="compile-time-features">
<title>Enabling/disabling features</title>

<para>
Mutt supports several of optional features which can be enabled or
disabled at compile-time by giving the <emphasis>configure</emphasis> script
certain arguments. These are listed in the <quote>Optional features</quote> section of
the <emphasis>configure --help</emphasis> output.
</para>

<para>
Which features are enabled or disabled can later be determined from the
output of <literal>mutt -v</literal>. If a compile option starts with
<quote>+</quote> it is enabled and disabled if prefixed with <quote>-</quote>. For example, if
mutt was compiled using GnuTLS for encrypted communication instead of
OpenSSL, <literal>mutt -v</literal> would contain:
</para>

<screen>
-USE_SSL_OPENSSL +USE_SSL_GNUTLS</screen>

</sect2>

<sect2 id="url-syntax">
<title>URL syntax</title>

<para>
Mutt optionally supports the IMAP, POP3 and SMTP protocols which require
to access servers using URLs. The canonical syntax for specifying URLs
in mutt is (an item enclosed in <literal>[]</literal> means it is optional and
may be omitted):
</para>

<screen>
proto[s]://[username[:password]@]server[:port]/[path]
</screen>

<para>
<literal>proto</literal> is the communication protocol:
<literal>imap</literal> for IMAP, <literal>pop</literal> for POP3 and
<literal>smtp</literal> for SMTP. If <quote>s</quote> for <quote>secure communication</quote>
is appended, mutt will attempt to establish an encrypted communication
using SSL or TLS. If no explicit port is given, mutt will use the
system's default for the given protocol.
</para>

<para>
Since all protocols supported by mutt support, the username may be
given directly in the URL instead of using the <literal>pop_user</literal> or
<literal>imap_user</literal> variables. It may contain the <quote>@</quote> symbol
being used by many mail systems as part of the login name. A password can be
given, too but is not recommended if the URL is specified in a configuration
file on disk.
</para>

<para>
The optional path is only relevant for IMAP.
</para>

<para>
For IMAP for example, you can also specify different
usernames for each folder: <literal>imap://username@imapserver[:port]/INBOX</literal>
or <literal>imap://username2@imapserver[:port]/path/to/folder</literal>.
</para>

</sect2>

</sect1>

<sect1 id="ssl">
<title>SSL/TLS Support</title>

<para>
If mutt is compiled with IMAP, POP3 and/or SMTP support, it can also be
compiled with support for SSL or TLS using either OpenSSL or GnuTLS (
by running the <emphasis>configure</emphasis> script with the
<emphasis>--enable-ssl=...</emphasis> option for OpenSSL or
<emphasis>--enable-gnutls=...</emphasis> for GnuTLS). Mutt can then
attempt to encrypt communication with remote servers if these protocols
are suffixed with <quote>s</quote> for <quote>secure communication</quote>.
</para>

</sect1>

<sect1 id="pop">
<title>POP3 Support</title>

<para>
If Mutt is compiled with POP3 support (by running the <emphasis>configure</emphasis>
script with the <emphasis>--enable-pop</emphasis> flag), it has the ability to work
with mailboxes located on a remote POP3 server and fetch mail for local
browsing.
</para>

<para>
Remote POP3 servers can be accessed using URLs with the <literal>pop</literal> protocol
for unencrypted and <literal>pops</literal> for encrypted
communication, see <xref linkend="url-syntax"/> for details.
</para>

<para>
Polling for new mail is more expensive over POP3 than locally. For this
reason the frequency at which Mutt will check for mail remotely can be
controlled by the
<link linkend="pop-checkinterval">&dollar;pop&lowbar;checkinterval</link>
variable, which defaults to every 60 seconds.
</para>

<anchor id="fetch-mail"/>
<para>
Another way to access your POP3 mail is the <literal>&lt;fetch-mail&dollar;</literal> function
(default: G).  It allows to connect to <link linkend="pop-host">&dollar;pop&lowbar;host</link>, fetch all your new mail and place it in the
local <link linkend="spoolfile">&dollar;spoolfile</link>.  After this
point, Mutt runs exactly as if the mail had always been local.
</para>

<note>
<para>
If you only need to fetch all messages to a
local mailbox you should consider using a specialized program, such as
<literal>fetchmail(1)</literal>, <literal>getmail(1)</literal> or similar.
</para>
</note>

</sect1>

<sect1 id="imap">
<title>IMAP Support</title>

<para>
If Mutt was compiled with IMAP support (by running the <emphasis>configure</emphasis>
script with the <emphasis>--enable-imap</emphasis> flag), it has the ability to work
with folders located on a remote IMAP server.
</para>

<para>
You can access the remote inbox by selecting the folder by its URL
(see <xref linkend="url-syntax"/> for details) using the
<literal>imap</literal> or <literal>imaps</literal> protocol.
Alternatively, a pine-compatible notation is also supported, ie
<literal>&lcub;[username@]imapserver[:port][/ssl]&rcub;path/to/folder</literal>
</para>

<para>
Note that not all servers use <quote>/</quote> as the hierarchy separator.  Mutt should
correctly notice which separator is being used by the server and convert
paths accordingly.
</para>

<para>
When browsing folders on an IMAP server, you can toggle whether to look
at only the folders you are subscribed to, or all folders with the
<emphasis>toggle-subscribed</emphasis> command.  See also the
<link linkend="imap-list-subscribed">&dollar;imap&lowbar;list&lowbar;subscribed</link> variable.
</para>

<para>
Polling for new mail on an IMAP server can cause noticeable delays. So, you'll
want to carefully tune the
<link linkend="mail-check">&dollar;mail&lowbar;check</link>
and
<link linkend="timeout">&dollar;timeout</link>
variables. Reasonable values are:
</para>

<screen>
set mail_check=90
set timeout=15
</screen>

<para>
with relatively good results even over slow modem lines.
</para>

<note>
<para>
Note that if you are using mbox as the mail store on UW servers prior to
v12.250, the server has been reported to disconnect a client if another client
selects the same folder.
</para>
</note>

<sect2 id="imap-browser">
<title>The Folder Browser</title>

<para>
As of version 1.2, mutt supports browsing mailboxes on an IMAP
server. This is mostly the same as the local file browser, with the
following differences:
</para>

<itemizedlist>
<listitem>

<para>
In lieu of file permissions, mutt displays the string <quote>IMAP</quote>,
possibly followed by the symbol <quote>+</quote>, indicating
that the entry contains both messages and subfolders. On
Cyrus-like servers folders will often contain both messages and
subfolders.
</para>
</listitem>
<listitem>

<para>
For the case where an entry can contain both messages and
subfolders, the selection key (bound to <literal>enter</literal> by default)
will choose to descend into the subfolder view. If you wish to view
the messages in that folder, you must use <literal>view-file</literal> instead
(bound to <literal>space</literal> by default).
</para>
</listitem>
<listitem>

<para>
You can create, delete and rename mailboxes with the
<literal>&lt;create-mailbox&gt;</literal>, <literal>&lt;delete-mailbox&gt;</literal>, and
<literal>&lt;rename-mailbox&gt;</literal> commands (default bindings: <literal>C</literal>,
<literal>d</literal> and <literal>r</literal>, respectively). You may also
<literal>&lt;subscribe&gt;</literal> and <literal>&lt;unsubscribe&gt;</literal> to mailboxes (normally
these are bound to <literal>s</literal> and <literal>u</literal>, respectively).
</para>
</listitem>

</itemizedlist>

</sect2>

<sect2 id="imap-authentication">
<title>Authentication</title>

<para>
Mutt supports four authentication methods with IMAP servers: SASL,
GSSAPI, CRAM-MD5, and LOGIN (there is a patch by Grant Edwards to add
NTLM authentication for you poor exchange users out there, but it has
yet to be integrated into the main tree). There is also support for
the pseudo-protocol ANONYMOUS, which allows you to log in to a public
IMAP server without having an account. To use ANONYMOUS, simply make
your username blank or <quote>anonymous</quote>.
</para>

<para>
SASL is a special super-authenticator, which selects among several protocols
(including GSSAPI, CRAM-MD5, ANONYMOUS, and DIGEST-MD5) the most secure
method available on your host and the server. Using some of these methods
(including DIGEST-MD5 and possibly GSSAPI), your entire session will be
encrypted and invisible to those teeming network snoops. It is the best
option if you have it. To use it, you must have the Cyrus SASL library
installed on your system and compile mutt with the <emphasis>--with-sasl</emphasis> flag.
</para>

<para>
Mutt will try whichever methods are compiled in and available on the server,
in the following order: SASL, ANONYMOUS, GSSAPI, CRAM-MD5, LOGIN.
</para>

<para>
There are a few variables which control authentication:
</para>

<itemizedlist>
<listitem>

<para>
<link linkend="imap-user">&dollar;imap&lowbar;user</link> - controls
the username under which you request authentication on the IMAP server,
for all authenticators. This is overridden by an explicit username in
the mailbox path (ie by using a mailbox name of the form
<literal>&lcub;user@host&rcub;</literal>).
</para>
</listitem>
<listitem>

<para>
<link linkend="imap-pass">&dollar;imap&lowbar;pass</link> - a
password which you may preset, used by all authentication methods where
a password is needed.
</para>
</listitem>
<listitem>

<para>
<link linkend="imap-authenticators">&dollar;imap&lowbar;authenticators</link> - a colon-delimited list of IMAP
authentication methods to try, in the order you wish to try them. If
specified, this overrides mutt's default (attempt everything, in the order
listed above).
</para>
</listitem>

</itemizedlist>

</sect2>

</sect1>

<sect1 id="smtp">
<title>SMTP Support</title>

<para>
Besides supporting traditional mail delivery through a
sendmail-compatible program, mutt supports delivery through SMTP if it
was configured and built with <literal>--enable-smtp</literal>.
</para>

<para>
If the configuration variable
<link linkend="smtp-url">&dollar;smtp&lowbar;url</link> is set, mutt
will contact the given SMTP server to deliver messages; if it is unset,
mutt will use the program specified by <link linkend="sendmail">&dollar;sendmail</link>.
</para>

<para>
For details on the URL syntax, please see <xref linkend="url-syntax"/>.
</para>

<para>
The built-in SMTP support supports encryption (the <literal>smtps</literal> protocol
using SSL or TLS) as well as SMTP authentication using SASL. The authentication mechanisms
for SASL are specified in <link linkend="smtp-authenticators">&dollar;smtp&lowbar;authenticators</link>
defaulting to an empty list which makes mutt try all available methods
from most-secure to least-secure.
</para>

</sect1>

<sect1 id="account-hook">
<title>Managing multiple accounts</title>

<para>
If you happen to have accounts on multiple IMAP, POP and/or SMTP servers,
you may find managing all the authentication settings inconvenient and
error-prone. The <link linkend="account-hook">account-hook</link> command may help. This hook works like
<link linkend="folder-hook">folder-hook</link> but is invoked whenever you access a remote mailbox
(including inside the folder browser), not just when you open the
mailbox. This includes (for example) polling for new mail, storing Fcc
messages and saving messages to a folder. As a consequence,
<link linkend="account-hook">account-hook</link> should only be used to set connection-related settings such
as passwords or tunnel commands but not settings such as sender
address or name (because in general it should be considered unpredictable
which <link linkend="account-hook">account-hook</link> was last used).
</para>

<para>
Some examples:
</para>

<screen>
account-hook . 'unset imap_user; unset imap_pass; unset tunnel'
account-hook imap://host1/ 'set imap_user=me1 imap_pass=foo'
account-hook imap://host2/ 'set tunnel="ssh host2 /usr/libexec/imapd"'
account-hook smtp://user@host3/ 'set tunnel="ssh host3 /usr/libexec/smtpd"'
</screen>

</sect1>

<sect1 id="caching">
<title>Local caching</title>

<para>
Mutt contains two types of local caching: <emphasis>(1)</emphasis>
the so-called <quote>header caching</quote> and <emphasis>(2)</emphasis> the
so-called <quote>body caching</quote> which are both described in this section.
</para>

<para>
Header caching is optional as it depends on external libraries, body
caching is always enabled if mutt is compiled with POP and/or IMAP
support as these use it (body caching requires no external library).
</para>

<sect2 id="header-caching">
<title>Header caching</title>

<para>
Mutt provides optional support for caching message headers for the
following types of folders: IMAP, POP, Maildir and MH. Header caching
greatly improves speed because for remote folders, headers
usually only need to be downloaded once. For Maildir and MH, reading the
headers from a single file is much faster than looking at possibly
thousands of single files (since Maildir and MH use one file per message.)
</para>

<para>
Header caching can be enabled via the configure script and the
<emphasis>--enable-hcache</emphasis> option. It's not turned on
by default because external database libraries are required: one
of tokyocabinet, qdbm, gdbm or bdb must be present.
</para>

<para>
If enabled, <link
linkend="header-cache">&dollar;header&lowbar;cache</link> can be
used to either point to a file or a directory. If set to point to
a file, one database file for all folders will be used (which may
result in lower performance), but one file per folder if it points
to a directory.
</para>

</sect2>

<sect2 id="body-caching">
<title>Body caching</title>

<para>
Both cache methods can be combined using the same directory for storage
(and for IMAP/POP even provide meaningful file names) which simplifies
manual maintenance tasks.
</para>


<para>
In addition to caching message headers only, mutt can also cache
whole message bodies. This results in faster display of messages
for POP and IMAP folders because messages usually have to be
downloaded only once.
</para>

<para>
For configuration, the variable <link linkend="message-cachedir"
>&dollar;message&lowbar;cachedir</link> must point to a
directory. There, mutt will create a hierarchy of subdirectories
named like: <literal>proto:user@hostname</literal> where
<literal>proto</literal> is either <quote>pop</quote> or <quote>imap.</quote> Within
there for each folder, mutt stores messages in single files.
All files can be removed as needed if the consumed disk space
becomes an issue as mutt will silently fetch missing items again.
</para>

</sect2>

<sect2 id="maint-cache">
<title>Maintenance</title>

<para>
Mutt does not (yet) support maintenance features for header cache
database files so that files have to be removed in case they grow too
big. It depends on the database library used for header caching whether
disk space freed by removing messages is re-used.
</para>

<para>
For body caches, mutt can keep the local cache in sync with the
remote mailbox if the
<link linkend="message-cache-clean">&dollar;message&lowbar;cache&lowbar;clean</link>
variable is set. Cleaning means to remove messages from the cache which
are no longer present in the mailbox which only happens when other mail
clients or instances of mutt using a different body cache location
delete messages (Mutt itself removes deleted messages from the cache
when syncing a mailbox). As cleaning can take a noticeable amount of time,
it should not be set in general but only occasionally.
</para>

</sect2>

</sect1>

<sect1 id="exact-address">
<title>Exact address generation</title>

<para>
Mutt supports the <quote>Name &lt;user@host&gt;</quote> address syntax for reading and
writing messages, the older <quote>user@host (Name)</quote> syntax is only supported when
reading messages. The <emphasis>--enable-exact-address</emphasis>
switch can be given to configure to build it with write-support
for the latter syntax. <literal>EXACT_ADDRESS</literal> in the output of
<literal>mutt -v</literal> indicates whether it's supported.
</para>

</sect1>

</chapter>

<chapter id="tuning">
<title>Performance tuning</title>

<sect1 id="tuning-mailboxes">
<title>Reading and writing mailboxes</title>

<para>
Mutt's performance when reading mailboxes can be improved in two ways:
</para>

<orderedlist>

<listitem>
<para>
For remote folders (IMAP and POP) as well as folders using
one-file-per message storage (Maildir and MH), mutt's
performance can be greatly improved using
<link linkend="header-caching">header caching</link>.
using a single database per folder.
</para>
</listitem>

<listitem>
<para>
Mutt provides the <link linkend="read-inc">&dollar;read&lowbar;inc</link>
and <link linkend="write-inc">&dollar;write&lowbar;inc</link>
variables to specify at which rate to update progress
counters. If these values are too low, mutt may spend more
time on updating the progress counter than it spends on
actually reading/writing folders.
</para>
<para>
For example, when opening a maildir folder with a few
thousand messages, the default value for
<link linkend="read-inc">&dollar;read&lowbar;inc</link>
may be too low. It can be tuned on on a folder-basis using
<link linkend="folder-hook">folder-hooks</link>:
</para>

<screen>
# use very high $read_inc to speed up reading hcache'd maildirs
folder-hook . 'set read_inc=1000'
# use lower value for reading slower remote IMAP folders
folder-hook ^imap 'set read_inc=100'
# use even lower value for reading even slower remote POP folders
folder-hook ^pop 'set read_inc=1'</screen>

</listitem>
</orderedlist>

<para>These settings work on a per-message basis. However, as messages may
greatly differ in size and certain operations are much faster than others,
even per-folder settings of the increment variables may not be
desirable as they produce either too few or too much progress updates.
Thus, Mutt allows to limit the number of progress updates per second it'll
actually send to the terminal using the
<link linkend="time-inc">&dollar;time&lowbar;inc</link> variable.</para>

</sect1>

<sect1 id="tuning-messages">
<title>Reading messages from remote folders</title>

<para>
Reading messages from remote folders such as IMAP an POP can be
slow especially for large mailboxes since mutt only caches a very
limited number of recently viewed messages (usually 10) per
session (so that it will be gone for the next session.)
</para>

<para>
To improve performance and permanently cache whole messages,
please refer to mutt's so-called
<link linkend="body-caching">body caching</link> for details.
</para>

</sect1>

<sect1 id="tuning-search">
<title>Searching and limiting</title>

<para>
When searching mailboxes either via a search or a limit action, for
some patterns mutt distinguishes between regular expression and string
searches. For regular expressions, patterns are prefixed with
<quote>&tilde;</quote> and with <quote>=</quote> for string searches.
</para>

<para>
Even though a regular expression search is fast, it's several times
slower than a pure string search which is noticeable especially on large
folders. As a consequence, a string search should be used instead of a
regular expression search if the user already knows enough about the
search pattern.
</para>

<para>
For example, when limiting a large folder to all messages sent to or by
an author, it's much faster to search for the initial part of an e-mail
address via <literal>=Luser@</literal> instead of
<literal>&tilde;Luser@</literal>. This is especially true for searching
message bodies since a larger amount of input has to be searched.
</para>

<para>
Please note that string search is an exact case-sensitive search
while a regular expression search with only lower-case letters performs
a case-insensitive search.
</para>

</sect1>

</chapter>

<chapter id="reference">
<title>Reference</title>

<sect1 id="commandline">
<title>Command line options</title>

<para>
Running <literal>mutt</literal> with no arguments will make Mutt attempt to read your spool
mailbox.  However, it is possible to read other mailboxes and
to send messages from the command line as well.
</para>

<table id="tab-commandline-options">
<title>Command line options</title>
<tgroup cols="2">
<thead>
<row><entry>Option</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>-A</entry><entry>expand an alias</entry></row>
<row><entry>-a</entry><entry>attach a file to a message</entry></row>
<row><entry>-b</entry><entry>specify a blind carbon-copy (BCC) address</entry></row>
<row><entry>-c</entry><entry>specify a carbon-copy (Cc) address</entry></row>
<row><entry>-D</entry><entry>print the value of all mutt variables to stdout</entry></row>
<row><entry>-e</entry><entry>specify a config command to be run after initialization files are read</entry></row>
<row><entry>-f</entry><entry>specify a mailbox to load</entry></row>
<row><entry>-F</entry><entry>specify an alternate file to read initialization commands</entry></row>
<row><entry>-h</entry><entry>print help on command line options</entry></row>
<row><entry>-H</entry><entry>specify a draft file from which to read a header and body</entry></row>
<row><entry>-i</entry><entry>specify a file to include in a message composition</entry></row>
<row><entry>-m</entry><entry>specify a default mailbox type</entry></row>
<row><entry>-n</entry><entry>do not read the system Muttrc</entry></row>
<row><entry>-p</entry><entry>recall a postponed message</entry></row>
<row><entry>-Q</entry><entry>query a configuration variable</entry></row>
<row><entry>-R</entry><entry>open mailbox in read-only mode</entry></row>
<row><entry>-s</entry><entry>specify a subject (enclose in quotes if it contains spaces)</entry></row>
<row><entry>-v</entry><entry>show version number and compile-time definitions</entry></row>
<row><entry>-x</entry><entry>simulate the mailx(1) compose mode</entry></row>
<row><entry>-y</entry><entry>show a menu containing the files specified by the mailboxes command</entry></row>
<row><entry>-z</entry><entry>exit immediately if there are no messages in the mailbox</entry></row>
<row><entry>-Z</entry><entry>open the first folder with new message, exit immediately if none</entry></row>
</tbody>
</tgroup>
</table>

<para>
To read messages in a mailbox
</para>

<cmdsynopsis>
<command>mutt</command>
<arg choice="opt"><option>-nz</option></arg>
<arg choice="opt"><option>-F</option>
<replaceable>muttrc</replaceable>
</arg>
<arg choice="opt"><option>-m</option>
<replaceable>type</replaceable>
</arg>
<arg choice="opt"><option>-f</option>
<replaceable>mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
To compose a new message
</para>

<cmdsynopsis>
<command>mutt</command>
<arg choice="opt"><option>-n</option></arg>
<arg choice="opt"><option>-F</option>
<replaceable>muttrc</replaceable>
</arg>
<arg choice="opt"><option>-c</option>
<replaceable>address</replaceable>
</arg>
<arg choice="opt"><option>-i</option>
<replaceable>filename</replaceable>
</arg>
<arg choice="opt"><option>-s</option>
<replaceable>subject</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<option>-a</option>
<replaceable>file</replaceable>
</arg>
<arg choice="opt">--</arg>
<arg choice="plain">
<replaceable>address</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>address</replaceable>
</arg>
</cmdsynopsis>

<para>
Mutt also supports a <quote>batch</quote> mode to send prepared messages.  Simply redirect
input from the file you wish to send.  For example,
</para>

<screen>
mutt -s &quot;data set for run &num;2&quot; professor@bigschool.edu &lt; &tilde;/run2.dat</screen>

<para>
will send a message to <literal>&lt;professor@bigschool.edu&gt;</literal> with a subject
of <quote>data set for run &num;2</quote>.  In the body of the message will be the contents
of the file <quote>&tilde;/run2.dat</quote>.
</para>

<para>
All files passed with <literal>-a</literal> <emphasis>file</emphasis> will be attached as a MIME
part to the message. To attach several files, use <quote>--</quote> to separate files and
recipient addresses:
</para>

<screen>
mutt -a *.png -- some@one.org</screen>

<note>
<para>
The <literal>-a</literal> option must be last in the option list.
</para>
</note>

</sect1>

<sect1 id="commands">
<title>Configuration Commands</title>

<para>
The following are the commands understood by mutt.
</para>

<itemizedlist>

<listitem>
<cmdsynopsis>
<command><link linkend="account-hook">account-hook</link></command>
<arg choice="plain">
<replaceable>pattern</replaceable>
<replaceable>command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="alias">alias</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">address</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">address</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="alias">unalias</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">key</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="alternates">alternates</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<arg choice="plain">
<replaceable>regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="alternates">unalternates</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="alternative-order">alternative-order</link></command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="alternative-order">unalternative-order</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="attachments">attachments</link></command>
<arg choice="plain">
<replaceable>&lcub; + &verbar; - &rcub;disposition</replaceable>
</arg>
<arg choice="plain">
<replaceable>mime-type</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="attachments">unattachments</link></command>
<arg choice="plain">
<replaceable>&lcub; + &verbar; - &rcub;disposition</replaceable>
</arg>
<arg choice="plain">
<replaceable>mime-type</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="auto-view">auto-view</link></command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="auto-view">unauto-view</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="bind">bind</link></command>
<arg choice="plain">
<replaceable class="parameter">map</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="charset-hook">charset-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">alias</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="iconv-hook">iconv-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">local-charset</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="color">color</link></command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
</cmdsynopsis>
<cmdsynopsis>
<command><link linkend="color">color</link></command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>
<cmdsynopsis>
<command><link linkend="color">color</link></command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="color">uncolor</link></command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="crypt-hook">crypt-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">keyid</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="exec">exec</link></command>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="fcc-hook">fcc-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="fcc-save-hook">fcc-save-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="folder-hook">folder-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="addrgroup">group</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="addrgroup">ungroup</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="hdr-order">hdr&lowbar;order</link></command>
<arg choice="plain">
<replaceable class="parameter">header</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">header</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="hdr-order">unhdr&lowbar;order</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>header</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="ignore">ignore</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="ignore">unignore</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="lists">lists</link></command>
<arg>
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="lists">unlists</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="macro">macro</link></command>
<arg choice="plain">
<replaceable class="parameter">menu</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">sequence</replaceable>
</arg>
<arg choice="opt">
<replaceable class="parameter">description</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mailboxes">mailboxes</link></command>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="mailboxes">unmailboxes</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mbox-hook">mbox-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="message-hook">message-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mime-lookup">mime-lookup</link></command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="mime-lookup">unmime-lookup</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mono">mono</link></command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
</cmdsynopsis>
<cmdsynopsis>
<command><link linkend="mono">mono</link></command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>
<cmdsynopsis>
<command><link linkend="mono">mono</link></command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="mono">unmono</link></command>
<arg choice="plain">
<option>index</option>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="my-hdr">my&lowbar;hdr</link></command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="my-hdr">unmy&lowbar;hdr</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">field</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="push">push</link></command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="save-hook">save-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="score">score</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">value</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="score">unscore</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="reply-hook">reply-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="send-hook">send-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="send2-hook">send2-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="set">set</link></command>
<group choice="req">
<arg choice="plain">
<group choice="opt">
<arg choice="plain"><option>no</option></arg>
<arg choice="plain"><option>inv</option></arg>
</group>
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">variable=value</replaceable>
</arg>
</group>
<arg choice="opt" rep="repeat"/>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="set">toggle</link></command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="set">unset</link></command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="set">reset</link></command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="source">source</link></command>
<arg choice="plain">
<replaceable class="parameter">filename</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="spam">spam</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">format</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="spam">nospam</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="subscribe">subscribe</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command><link linkend="subscribe">unsubscribe</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="unhook">unhook</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">hook-type</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

</itemizedlist>

</sect1>

<sect1 id="variables">
<title>Configuration variables</title>
